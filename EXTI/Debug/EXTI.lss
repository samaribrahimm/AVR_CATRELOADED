
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000010e6  0000117a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800066  00800066  00001180  2**0
                  ALLOC
  3 .stab         000019e0  00000000  00000000  00001180  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e19  00000000  00000000  00002b60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 13 03 	jmp	0x626	; 0x626 <__vector_1>
       8:	0c 94 4a 03 	jmp	0x694	; 0x694 <__vector_2>
       c:	0c 94 81 03 	jmp	0x702	; 0x702 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 37       	cpi	r26, 0x72	; 114
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 34 08 	call	0x1068	; 0x1068 <main>
      8a:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GIE_enuGloable_Interrupt_Enable>:
#include "../../LIB/errorStates.h"

#include "GIE_priv.h"

ES_t GIE_enuGloable_Interrupt_Enable(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	0f 92       	push	r0
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
      9c:	19 82       	std	Y+1, r1	; 0x01

	SREG &= ~(1 << GIE_I);
      9e:	af e5       	ldi	r26, 0x5F	; 95
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	ef e5       	ldi	r30, 0x5F	; 95
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	8f 77       	andi	r24, 0x7F	; 127
      aa:	8c 93       	st	X, r24
	SREG |= (1 << GIE_I);
      ac:	af e5       	ldi	r26, 0x5F	; 95
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	ef e5       	ldi	r30, 0x5F	; 95
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	80 68       	ori	r24, 0x80	; 128
      b8:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
      ba:	81 e0       	ldi	r24, 0x01	; 1
      bc:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
      be:	89 81       	ldd	r24, Y+1	; 0x01
}
      c0:	0f 90       	pop	r0
      c2:	cf 91       	pop	r28
      c4:	df 91       	pop	r29
      c6:	08 95       	ret

000000c8 <GIE_enuGloable_Interrupt_Disable>:

ES_t GIE_enuGloable_Interrupt_Disable(void)
{
      c8:	df 93       	push	r29
      ca:	cf 93       	push	r28
      cc:	0f 92       	push	r0
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
      d2:	19 82       	std	Y+1, r1	; 0x01

	SREG &= ~(1<< GIE_I);
      d4:	af e5       	ldi	r26, 0x5F	; 95
      d6:	b0 e0       	ldi	r27, 0x00	; 0
      d8:	ef e5       	ldi	r30, 0x5F	; 95
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	80 81       	ld	r24, Z
      de:	8f 77       	andi	r24, 0x7F	; 127
      e0:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
      e6:	89 81       	ldd	r24, Y+1	; 0x01
}
      e8:	0f 90       	pop	r0
      ea:	cf 91       	pop	r28
      ec:	df 91       	pop	r29
      ee:	08 95       	ret

000000f0 <EXTI_enuInit>:
static volatile void (*EXTI_ApfunINTFun[3])(void*) = {NULL,NULL,NULL};
void * EXTI_ApvidGenericparameter[3] = {NULL,NULL,NULL};

// fun to initialize the external interrupt take pointer to  id of interrupt

ES_t EXTI_enuInit (EXTI_t * Copy_pstrEXTIConfig){
      f0:	df 93       	push	r29
      f2:	cf 93       	push	r28
      f4:	cd b7       	in	r28, 0x3d	; 61
      f6:	de b7       	in	r29, 0x3e	; 62
      f8:	2d 97       	sbiw	r28, 0x0d	; 13
      fa:	0f b6       	in	r0, 0x3f	; 63
      fc:	f8 94       	cli
      fe:	de bf       	out	0x3e, r29	; 62
     100:	0f be       	out	0x3f, r0	; 63
     102:	cd bf       	out	0x3d, r28	; 61
     104:	9d 83       	std	Y+5, r25	; 0x05
     106:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     108:	1b 82       	std	Y+3, r1	; 0x03
	if(Copy_pstrEXTIConfig!=NULL){
     10a:	8c 81       	ldd	r24, Y+4	; 0x04
     10c:	9d 81       	ldd	r25, Y+5	; 0x05
     10e:	00 97       	sbiw	r24, 0x00	; 0
     110:	09 f4       	brne	.+2      	; 0x114 <EXTI_enuInit+0x24>
     112:	10 c1       	rjmp	.+544    	; 0x334 <EXTI_enuInit+0x244>
		u8 Local_u8Iter=0;
     114:	1a 82       	std	Y+2, r1	; 0x02
    for (Local_u8Iter =0; Local_u8Iter < 3 ; Local_u8Iter++)
     116:	1a 82       	std	Y+2, r1	; 0x02
     118:	08 c1       	rjmp	.+528    	; 0x32a <EXTI_enuInit+0x23a>
    {
    	if (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8State == ENABLE)
     11a:	8a 81       	ldd	r24, Y+2	; 0x02
     11c:	88 2f       	mov	r24, r24
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	9c 01       	movw	r18, r24
     122:	22 0f       	add	r18, r18
     124:	33 1f       	adc	r19, r19
     126:	8c 81       	ldd	r24, Y+4	; 0x04
     128:	9d 81       	ldd	r25, Y+5	; 0x05
     12a:	fc 01       	movw	r30, r24
     12c:	e2 0f       	add	r30, r18
     12e:	f3 1f       	adc	r31, r19
     130:	80 81       	ld	r24, Z
     132:	81 30       	cpi	r24, 0x01	; 1
     134:	09 f0       	breq	.+2      	; 0x138 <EXTI_enuInit+0x48>
     136:	f6 c0       	rjmp	.+492    	; 0x324 <EXTI_enuInit+0x234>
    	{
    		switch (Local_u8Iter)
     138:	8a 81       	ldd	r24, Y+2	; 0x02
     13a:	28 2f       	mov	r18, r24
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	3d 87       	std	Y+13, r19	; 0x0d
     140:	2c 87       	std	Y+12, r18	; 0x0c
     142:	8c 85       	ldd	r24, Y+12	; 0x0c
     144:	9d 85       	ldd	r25, Y+13	; 0x0d
     146:	81 30       	cpi	r24, 0x01	; 1
     148:	91 05       	cpc	r25, r1
     14a:	09 f4       	brne	.+2      	; 0x14e <EXTI_enuInit+0x5e>
     14c:	60 c0       	rjmp	.+192    	; 0x20e <EXTI_enuInit+0x11e>
     14e:	2c 85       	ldd	r18, Y+12	; 0x0c
     150:	3d 85       	ldd	r19, Y+13	; 0x0d
     152:	22 30       	cpi	r18, 0x02	; 2
     154:	31 05       	cpc	r19, r1
     156:	09 f4       	brne	.+2      	; 0x15a <EXTI_enuInit+0x6a>
     158:	af c0       	rjmp	.+350    	; 0x2b8 <EXTI_enuInit+0x1c8>
     15a:	8c 85       	ldd	r24, Y+12	; 0x0c
     15c:	9d 85       	ldd	r25, Y+13	; 0x0d
     15e:	00 97       	sbiw	r24, 0x00	; 0
     160:	09 f0       	breq	.+2      	; 0x164 <EXTI_enuInit+0x74>
     162:	de c0       	rjmp	.+444    	; 0x320 <EXTI_enuInit+0x230>
    						{
    		case INT0:
    			 MCUCR &=~ (3<<0);
     164:	a5 e5       	ldi	r26, 0x55	; 85
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	e5 e5       	ldi	r30, 0x55	; 85
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	80 81       	ld	r24, Z
     16e:	8c 7f       	andi	r24, 0xFC	; 252
     170:	8c 93       	st	X, r24
    			 GICR|=(1<<6);
     172:	ab e5       	ldi	r26, 0x5B	; 91
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	eb e5       	ldi	r30, 0x5B	; 91
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	80 81       	ld	r24, Z
     17c:	80 64       	ori	r24, 0x40	; 64
     17e:	8c 93       	st	X, r24

    			switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenseLevel)
     180:	8a 81       	ldd	r24, Y+2	; 0x02
     182:	88 2f       	mov	r24, r24
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	9c 01       	movw	r18, r24
     188:	22 0f       	add	r18, r18
     18a:	33 1f       	adc	r19, r19
     18c:	8c 81       	ldd	r24, Y+4	; 0x04
     18e:	9d 81       	ldd	r25, Y+5	; 0x05
     190:	fc 01       	movw	r30, r24
     192:	e2 0f       	add	r30, r18
     194:	f3 1f       	adc	r31, r19
     196:	81 81       	ldd	r24, Z+1	; 0x01
     198:	28 2f       	mov	r18, r24
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	3b 87       	std	Y+11, r19	; 0x0b
     19e:	2a 87       	std	Y+10, r18	; 0x0a
     1a0:	8a 85       	ldd	r24, Y+10	; 0x0a
     1a2:	9b 85       	ldd	r25, Y+11	; 0x0b
     1a4:	82 30       	cpi	r24, 0x02	; 2
     1a6:	91 05       	cpc	r25, r1
     1a8:	f9 f0       	breq	.+62     	; 0x1e8 <EXTI_enuInit+0xf8>
     1aa:	2a 85       	ldd	r18, Y+10	; 0x0a
     1ac:	3b 85       	ldd	r19, Y+11	; 0x0b
     1ae:	23 30       	cpi	r18, 0x03	; 3
     1b0:	31 05       	cpc	r19, r1
     1b2:	34 f4       	brge	.+12     	; 0x1c0 <EXTI_enuInit+0xd0>
     1b4:	8a 85       	ldd	r24, Y+10	; 0x0a
     1b6:	9b 85       	ldd	r25, Y+11	; 0x0b
     1b8:	81 30       	cpi	r24, 0x01	; 1
     1ba:	91 05       	cpc	r25, r1
     1bc:	e9 f0       	breq	.+58     	; 0x1f8 <EXTI_enuInit+0x108>
     1be:	24 c0       	rjmp	.+72     	; 0x208 <EXTI_enuInit+0x118>
     1c0:	2a 85       	ldd	r18, Y+10	; 0x0a
     1c2:	3b 85       	ldd	r19, Y+11	; 0x0b
     1c4:	23 30       	cpi	r18, 0x03	; 3
     1c6:	31 05       	cpc	r19, r1
     1c8:	39 f0       	breq	.+14     	; 0x1d8 <EXTI_enuInit+0xe8>
     1ca:	8a 85       	ldd	r24, Y+10	; 0x0a
     1cc:	9b 85       	ldd	r25, Y+11	; 0x0b
     1ce:	84 30       	cpi	r24, 0x04	; 4
     1d0:	91 05       	cpc	r25, r1
     1d2:	09 f4       	brne	.+2      	; 0x1d6 <EXTI_enuInit+0xe6>
     1d4:	a7 c0       	rjmp	.+334    	; 0x324 <EXTI_enuInit+0x234>
     1d6:	18 c0       	rjmp	.+48     	; 0x208 <EXTI_enuInit+0x118>
    			{
                     case LOW_LEVEL:
                    	 break;
                     case ANY_LOGIC:
                    	 MCUCR |=(1<<0);
     1d8:	a5 e5       	ldi	r26, 0x55	; 85
     1da:	b0 e0       	ldi	r27, 0x00	; 0
     1dc:	e5 e5       	ldi	r30, 0x55	; 85
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	81 60       	ori	r24, 0x01	; 1
     1e4:	8c 93       	st	X, r24
     1e6:	9e c0       	rjmp	.+316    	; 0x324 <EXTI_enuInit+0x234>
                    	 break;
                     case FALLING_EDGE:
                    	 MCUCR |=(1<<1);
     1e8:	a5 e5       	ldi	r26, 0x55	; 85
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	e5 e5       	ldi	r30, 0x55	; 85
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	80 81       	ld	r24, Z
     1f2:	82 60       	ori	r24, 0x02	; 2
     1f4:	8c 93       	st	X, r24
     1f6:	96 c0       	rjmp	.+300    	; 0x324 <EXTI_enuInit+0x234>
                    	 break;
                     case RISING_EDGE:
                    	 MCUCR |=(3<<0);
     1f8:	a5 e5       	ldi	r26, 0x55	; 85
     1fa:	b0 e0       	ldi	r27, 0x00	; 0
     1fc:	e5 e5       	ldi	r30, 0x55	; 85
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	83 60       	ori	r24, 0x03	; 3
     204:	8c 93       	st	X, r24
     206:	8e c0       	rjmp	.+284    	; 0x324 <EXTI_enuInit+0x234>
                    	 break;
                    default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
     208:	83 e0       	ldi	r24, 0x03	; 3
     20a:	8b 83       	std	Y+3, r24	; 0x03
     20c:	8b c0       	rjmp	.+278    	; 0x324 <EXTI_enuInit+0x234>
					}
					break;

    		case INT1:
    			MCUCR &=~ (3<<2);
     20e:	a5 e5       	ldi	r26, 0x55	; 85
     210:	b0 e0       	ldi	r27, 0x00	; 0
     212:	e5 e5       	ldi	r30, 0x55	; 85
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	83 7f       	andi	r24, 0xF3	; 243
     21a:	8c 93       	st	X, r24
    			GICR |= (1<<7);
     21c:	ab e5       	ldi	r26, 0x5B	; 91
     21e:	b0 e0       	ldi	r27, 0x00	; 0
     220:	eb e5       	ldi	r30, 0x5B	; 91
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	80 68       	ori	r24, 0x80	; 128
     228:	8c 93       	st	X, r24

    			switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenseLevel)
     22a:	8a 81       	ldd	r24, Y+2	; 0x02
     22c:	88 2f       	mov	r24, r24
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	9c 01       	movw	r18, r24
     232:	22 0f       	add	r18, r18
     234:	33 1f       	adc	r19, r19
     236:	8c 81       	ldd	r24, Y+4	; 0x04
     238:	9d 81       	ldd	r25, Y+5	; 0x05
     23a:	fc 01       	movw	r30, r24
     23c:	e2 0f       	add	r30, r18
     23e:	f3 1f       	adc	r31, r19
     240:	81 81       	ldd	r24, Z+1	; 0x01
     242:	28 2f       	mov	r18, r24
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	39 87       	std	Y+9, r19	; 0x09
     248:	28 87       	std	Y+8, r18	; 0x08
     24a:	88 85       	ldd	r24, Y+8	; 0x08
     24c:	99 85       	ldd	r25, Y+9	; 0x09
     24e:	82 30       	cpi	r24, 0x02	; 2
     250:	91 05       	cpc	r25, r1
     252:	f9 f0       	breq	.+62     	; 0x292 <EXTI_enuInit+0x1a2>
     254:	28 85       	ldd	r18, Y+8	; 0x08
     256:	39 85       	ldd	r19, Y+9	; 0x09
     258:	23 30       	cpi	r18, 0x03	; 3
     25a:	31 05       	cpc	r19, r1
     25c:	34 f4       	brge	.+12     	; 0x26a <EXTI_enuInit+0x17a>
     25e:	88 85       	ldd	r24, Y+8	; 0x08
     260:	99 85       	ldd	r25, Y+9	; 0x09
     262:	81 30       	cpi	r24, 0x01	; 1
     264:	91 05       	cpc	r25, r1
     266:	e9 f0       	breq	.+58     	; 0x2a2 <EXTI_enuInit+0x1b2>
     268:	24 c0       	rjmp	.+72     	; 0x2b2 <EXTI_enuInit+0x1c2>
     26a:	28 85       	ldd	r18, Y+8	; 0x08
     26c:	39 85       	ldd	r19, Y+9	; 0x09
     26e:	23 30       	cpi	r18, 0x03	; 3
     270:	31 05       	cpc	r19, r1
     272:	39 f0       	breq	.+14     	; 0x282 <EXTI_enuInit+0x192>
     274:	88 85       	ldd	r24, Y+8	; 0x08
     276:	99 85       	ldd	r25, Y+9	; 0x09
     278:	84 30       	cpi	r24, 0x04	; 4
     27a:	91 05       	cpc	r25, r1
     27c:	09 f4       	brne	.+2      	; 0x280 <EXTI_enuInit+0x190>
     27e:	52 c0       	rjmp	.+164    	; 0x324 <EXTI_enuInit+0x234>
     280:	18 c0       	rjmp	.+48     	; 0x2b2 <EXTI_enuInit+0x1c2>
    			{
    	         case LOW_LEVEL:
    	        	 break;
    	         case ANY_LOGIC:
    	        	 MCUCR |=(1<<2);
     282:	a5 e5       	ldi	r26, 0x55	; 85
     284:	b0 e0       	ldi	r27, 0x00	; 0
     286:	e5 e5       	ldi	r30, 0x55	; 85
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	80 81       	ld	r24, Z
     28c:	84 60       	ori	r24, 0x04	; 4
     28e:	8c 93       	st	X, r24
     290:	49 c0       	rjmp	.+146    	; 0x324 <EXTI_enuInit+0x234>
    	        	 break;

    	         case FALLING_EDGE:
    	        	 MCUCR |=(1<<3);
     292:	a5 e5       	ldi	r26, 0x55	; 85
     294:	b0 e0       	ldi	r27, 0x00	; 0
     296:	e5 e5       	ldi	r30, 0x55	; 85
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	80 81       	ld	r24, Z
     29c:	88 60       	ori	r24, 0x08	; 8
     29e:	8c 93       	st	X, r24
     2a0:	41 c0       	rjmp	.+130    	; 0x324 <EXTI_enuInit+0x234>
    	        	 break;

    	         case RISING_EDGE:
    	        	 MCUCR |=(3<<2);
     2a2:	a5 e5       	ldi	r26, 0x55	; 85
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	e5 e5       	ldi	r30, 0x55	; 85
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	8c 60       	ori	r24, 0x0C	; 12
     2ae:	8c 93       	st	X, r24
     2b0:	39 c0       	rjmp	.+114    	; 0x324 <EXTI_enuInit+0x234>
    	        	 break;

    	        default:
    				Local_enuErrorState = ES_OUT_OF_RANGE;
     2b2:	83 e0       	ldi	r24, 0x03	; 3
     2b4:	8b 83       	std	Y+3, r24	; 0x03
     2b6:	36 c0       	rjmp	.+108    	; 0x324 <EXTI_enuInit+0x234>
    			}
    			break;

    		case INT2:
    			MCUCSR &=~(1<<6);
     2b8:	a4 e5       	ldi	r26, 0x54	; 84
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e4 e5       	ldi	r30, 0x54	; 84
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	8f 7b       	andi	r24, 0xBF	; 191
     2c4:	8c 93       	st	X, r24
    			GICR |= (1<<5);
     2c6:	ab e5       	ldi	r26, 0x5B	; 91
     2c8:	b0 e0       	ldi	r27, 0x00	; 0
     2ca:	eb e5       	ldi	r30, 0x5B	; 91
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	80 62       	ori	r24, 0x20	; 32
     2d2:	8c 93       	st	X, r24

    			switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenseLevel)
     2d4:	8a 81       	ldd	r24, Y+2	; 0x02
     2d6:	88 2f       	mov	r24, r24
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	9c 01       	movw	r18, r24
     2dc:	22 0f       	add	r18, r18
     2de:	33 1f       	adc	r19, r19
     2e0:	8c 81       	ldd	r24, Y+4	; 0x04
     2e2:	9d 81       	ldd	r25, Y+5	; 0x05
     2e4:	fc 01       	movw	r30, r24
     2e6:	e2 0f       	add	r30, r18
     2e8:	f3 1f       	adc	r31, r19
     2ea:	81 81       	ldd	r24, Z+1	; 0x01
     2ec:	28 2f       	mov	r18, r24
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	3f 83       	std	Y+7, r19	; 0x07
     2f2:	2e 83       	std	Y+6, r18	; 0x06
     2f4:	8e 81       	ldd	r24, Y+6	; 0x06
     2f6:	9f 81       	ldd	r25, Y+7	; 0x07
     2f8:	81 30       	cpi	r24, 0x01	; 1
     2fa:	91 05       	cpc	r25, r1
     2fc:	31 f0       	breq	.+12     	; 0x30a <EXTI_enuInit+0x21a>
     2fe:	2e 81       	ldd	r18, Y+6	; 0x06
     300:	3f 81       	ldd	r19, Y+7	; 0x07
     302:	22 30       	cpi	r18, 0x02	; 2
     304:	31 05       	cpc	r19, r1
     306:	71 f0       	breq	.+28     	; 0x324 <EXTI_enuInit+0x234>
     308:	08 c0       	rjmp	.+16     	; 0x31a <EXTI_enuInit+0x22a>
    		   	{
                 case FALLING_EDGE:
                	 break;

                 case RISING_EDGE:
                	 MCUCSR |= (1<<6);
     30a:	a4 e5       	ldi	r26, 0x54	; 84
     30c:	b0 e0       	ldi	r27, 0x00	; 0
     30e:	e4 e5       	ldi	r30, 0x54	; 84
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	80 64       	ori	r24, 0x40	; 64
     316:	8c 93       	st	X, r24
     318:	05 c0       	rjmp	.+10     	; 0x324 <EXTI_enuInit+0x234>
                	 break;

                default:
  			    Local_enuErrorState = ES_OUT_OF_RANGE;
     31a:	83 e0       	ldi	r24, 0x03	; 3
     31c:	8b 83       	std	Y+3, r24	; 0x03
     31e:	02 c0       	rjmp	.+4      	; 0x324 <EXTI_enuInit+0x234>
  		        }
  		        break;

              default:
              Local_enuErrorState = ES_OUT_OF_RANGE;
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	8b 83       	std	Y+3, r24	; 0x03

ES_t EXTI_enuInit (EXTI_t * Copy_pstrEXTIConfig){
	ES_t Local_enuErrorState = ES_NOK;
	if(Copy_pstrEXTIConfig!=NULL){
		u8 Local_u8Iter=0;
    for (Local_u8Iter =0; Local_u8Iter < 3 ; Local_u8Iter++)
     324:	8a 81       	ldd	r24, Y+2	; 0x02
     326:	8f 5f       	subi	r24, 0xFF	; 255
     328:	8a 83       	std	Y+2, r24	; 0x02
     32a:	8a 81       	ldd	r24, Y+2	; 0x02
     32c:	83 30       	cpi	r24, 0x03	; 3
     32e:	08 f4       	brcc	.+2      	; 0x332 <EXTI_enuInit+0x242>
     330:	f4 ce       	rjmp	.-536    	; 0x11a <EXTI_enuInit+0x2a>
     332:	02 c0       	rjmp	.+4      	; 0x338 <EXTI_enuInit+0x248>

              default:
              Local_enuErrorState = ES_OUT_OF_RANGE;
    						}}}}
	else {
		ES_t Local_enuErrorState = ES_NULL_POINTER;
     334:	82 e0       	ldi	r24, 0x02	; 2
     336:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     338:	8b 81       	ldd	r24, Y+3	; 0x03
}
     33a:	2d 96       	adiw	r28, 0x0d	; 13
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	f8 94       	cli
     340:	de bf       	out	0x3e, r29	; 62
     342:	0f be       	out	0x3f, r0	; 63
     344:	cd bf       	out	0x3d, r28	; 61
     346:	cf 91       	pop	r28
     348:	df 91       	pop	r29
     34a:	08 95       	ret

0000034c <EXTI_enuSetSenseLevel>:


/*** fun to set sense level
     take id ,sense level                              ***/
ES_t EXTI_enuSetSenseLevel(u8 Copy_u8EXTI_ID , u8 Copy_u8SenseLevel){
     34c:	df 93       	push	r29
     34e:	cf 93       	push	r28
     350:	cd b7       	in	r28, 0x3d	; 61
     352:	de b7       	in	r29, 0x3e	; 62
     354:	2a 97       	sbiw	r28, 0x0a	; 10
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	8b 83       	std	Y+3, r24	; 0x03
     362:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     364:	1a 82       	std	Y+2, r1	; 0x02
 if(Copy_u8EXTI_ID < 3){
     366:	8b 81       	ldd	r24, Y+3	; 0x03
     368:	83 30       	cpi	r24, 0x03	; 3
     36a:	08 f0       	brcs	.+2      	; 0x36e <EXTI_enuSetSenseLevel+0x22>
     36c:	ba c0       	rjmp	.+372    	; 0x4e2 <EXTI_enuSetSenseLevel+0x196>
	 if(Copy_u8EXTI_ID ==INT0){
     36e:	8b 81       	ldd	r24, Y+3	; 0x03
     370:	88 23       	and	r24, r24
     372:	09 f0       	breq	.+2      	; 0x376 <EXTI_enuSetSenseLevel+0x2a>
     374:	43 c0       	rjmp	.+134    	; 0x3fc <EXTI_enuSetSenseLevel+0xb0>
		 MCUCR &=~ (3<<0);
     376:	a5 e5       	ldi	r26, 0x55	; 85
     378:	b0 e0       	ldi	r27, 0x00	; 0
     37a:	e5 e5       	ldi	r30, 0x55	; 85
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	80 81       	ld	r24, Z
     380:	8c 7f       	andi	r24, 0xFC	; 252
     382:	8c 93       	st	X, r24
			switch (Copy_u8SenseLevel)
     384:	8c 81       	ldd	r24, Y+4	; 0x04
     386:	28 2f       	mov	r18, r24
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	3a 87       	std	Y+10, r19	; 0x0a
     38c:	29 87       	std	Y+9, r18	; 0x09
     38e:	89 85       	ldd	r24, Y+9	; 0x09
     390:	9a 85       	ldd	r25, Y+10	; 0x0a
     392:	82 30       	cpi	r24, 0x02	; 2
     394:	91 05       	cpc	r25, r1
     396:	f9 f0       	breq	.+62     	; 0x3d6 <EXTI_enuSetSenseLevel+0x8a>
     398:	29 85       	ldd	r18, Y+9	; 0x09
     39a:	3a 85       	ldd	r19, Y+10	; 0x0a
     39c:	23 30       	cpi	r18, 0x03	; 3
     39e:	31 05       	cpc	r19, r1
     3a0:	34 f4       	brge	.+12     	; 0x3ae <EXTI_enuSetSenseLevel+0x62>
     3a2:	89 85       	ldd	r24, Y+9	; 0x09
     3a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3a6:	81 30       	cpi	r24, 0x01	; 1
     3a8:	91 05       	cpc	r25, r1
     3aa:	e9 f0       	breq	.+58     	; 0x3e6 <EXTI_enuSetSenseLevel+0x9a>
     3ac:	24 c0       	rjmp	.+72     	; 0x3f6 <EXTI_enuSetSenseLevel+0xaa>
     3ae:	29 85       	ldd	r18, Y+9	; 0x09
     3b0:	3a 85       	ldd	r19, Y+10	; 0x0a
     3b2:	23 30       	cpi	r18, 0x03	; 3
     3b4:	31 05       	cpc	r19, r1
     3b6:	39 f0       	breq	.+14     	; 0x3c6 <EXTI_enuSetSenseLevel+0x7a>
     3b8:	89 85       	ldd	r24, Y+9	; 0x09
     3ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     3bc:	84 30       	cpi	r24, 0x04	; 4
     3be:	91 05       	cpc	r25, r1
     3c0:	09 f4       	brne	.+2      	; 0x3c4 <EXTI_enuSetSenseLevel+0x78>
     3c2:	91 c0       	rjmp	.+290    	; 0x4e6 <EXTI_enuSetSenseLevel+0x19a>
     3c4:	18 c0       	rjmp	.+48     	; 0x3f6 <EXTI_enuSetSenseLevel+0xaa>
		    			{
		                     case LOW_LEVEL:
		                    	 break;
		                     case ANY_LOGIC:
		                    	 MCUCR |=(1<<0);
     3c6:	a5 e5       	ldi	r26, 0x55	; 85
     3c8:	b0 e0       	ldi	r27, 0x00	; 0
     3ca:	e5 e5       	ldi	r30, 0x55	; 85
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	81 60       	ori	r24, 0x01	; 1
     3d2:	8c 93       	st	X, r24
     3d4:	88 c0       	rjmp	.+272    	; 0x4e6 <EXTI_enuSetSenseLevel+0x19a>
		                    	 break;
		                     case FALLING_EDGE:
		                    	 MCUCR |=(1<<1);
     3d6:	a5 e5       	ldi	r26, 0x55	; 85
     3d8:	b0 e0       	ldi	r27, 0x00	; 0
     3da:	e5 e5       	ldi	r30, 0x55	; 85
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	80 81       	ld	r24, Z
     3e0:	82 60       	ori	r24, 0x02	; 2
     3e2:	8c 93       	st	X, r24
     3e4:	80 c0       	rjmp	.+256    	; 0x4e6 <EXTI_enuSetSenseLevel+0x19a>
		                    	 break;
		                     case RISING_EDGE:
		                    	 MCUCR |=(3<<0);
     3e6:	a5 e5       	ldi	r26, 0x55	; 85
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	e5 e5       	ldi	r30, 0x55	; 85
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 81       	ld	r24, Z
     3f0:	83 60       	ori	r24, 0x03	; 3
     3f2:	8c 93       	st	X, r24
     3f4:	78 c0       	rjmp	.+240    	; 0x4e6 <EXTI_enuSetSenseLevel+0x19a>
		                    	 break;
		                    default:
								Local_enuErrorState = ES_OUT_OF_RANGE;
     3f6:	83 e0       	ldi	r24, 0x03	; 3
     3f8:	8a 83       	std	Y+2, r24	; 0x02
     3fa:	75 c0       	rjmp	.+234    	; 0x4e6 <EXTI_enuSetSenseLevel+0x19a>
							}
	 }
	 else if(Copy_u8EXTI_ID ==INT1){
     3fc:	8b 81       	ldd	r24, Y+3	; 0x03
     3fe:	81 30       	cpi	r24, 0x01	; 1
     400:	09 f0       	breq	.+2      	; 0x404 <EXTI_enuSetSenseLevel+0xb8>
     402:	43 c0       	rjmp	.+134    	; 0x48a <EXTI_enuSetSenseLevel+0x13e>
		 MCUCR &=~ (3<<2);
     404:	a5 e5       	ldi	r26, 0x55	; 85
     406:	b0 e0       	ldi	r27, 0x00	; 0
     408:	e5 e5       	ldi	r30, 0x55	; 85
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	83 7f       	andi	r24, 0xF3	; 243
     410:	8c 93       	st	X, r24

		     			switch (Copy_u8SenseLevel)
     412:	8c 81       	ldd	r24, Y+4	; 0x04
     414:	28 2f       	mov	r18, r24
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	38 87       	std	Y+8, r19	; 0x08
     41a:	2f 83       	std	Y+7, r18	; 0x07
     41c:	8f 81       	ldd	r24, Y+7	; 0x07
     41e:	98 85       	ldd	r25, Y+8	; 0x08
     420:	82 30       	cpi	r24, 0x02	; 2
     422:	91 05       	cpc	r25, r1
     424:	f9 f0       	breq	.+62     	; 0x464 <EXTI_enuSetSenseLevel+0x118>
     426:	2f 81       	ldd	r18, Y+7	; 0x07
     428:	38 85       	ldd	r19, Y+8	; 0x08
     42a:	23 30       	cpi	r18, 0x03	; 3
     42c:	31 05       	cpc	r19, r1
     42e:	34 f4       	brge	.+12     	; 0x43c <EXTI_enuSetSenseLevel+0xf0>
     430:	8f 81       	ldd	r24, Y+7	; 0x07
     432:	98 85       	ldd	r25, Y+8	; 0x08
     434:	81 30       	cpi	r24, 0x01	; 1
     436:	91 05       	cpc	r25, r1
     438:	e9 f0       	breq	.+58     	; 0x474 <EXTI_enuSetSenseLevel+0x128>
     43a:	24 c0       	rjmp	.+72     	; 0x484 <EXTI_enuSetSenseLevel+0x138>
     43c:	2f 81       	ldd	r18, Y+7	; 0x07
     43e:	38 85       	ldd	r19, Y+8	; 0x08
     440:	23 30       	cpi	r18, 0x03	; 3
     442:	31 05       	cpc	r19, r1
     444:	39 f0       	breq	.+14     	; 0x454 <EXTI_enuSetSenseLevel+0x108>
     446:	8f 81       	ldd	r24, Y+7	; 0x07
     448:	98 85       	ldd	r25, Y+8	; 0x08
     44a:	84 30       	cpi	r24, 0x04	; 4
     44c:	91 05       	cpc	r25, r1
     44e:	09 f4       	brne	.+2      	; 0x452 <EXTI_enuSetSenseLevel+0x106>
     450:	4a c0       	rjmp	.+148    	; 0x4e6 <EXTI_enuSetSenseLevel+0x19a>
     452:	18 c0       	rjmp	.+48     	; 0x484 <EXTI_enuSetSenseLevel+0x138>
		     			{
		     	         case LOW_LEVEL:
		     	        	 break;
		     	         case ANY_LOGIC:
		     	        	 MCUCR |=(1<<2);
     454:	a5 e5       	ldi	r26, 0x55	; 85
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	e5 e5       	ldi	r30, 0x55	; 85
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	80 81       	ld	r24, Z
     45e:	84 60       	ori	r24, 0x04	; 4
     460:	8c 93       	st	X, r24
     462:	41 c0       	rjmp	.+130    	; 0x4e6 <EXTI_enuSetSenseLevel+0x19a>
		     	        	 break;

		     	         case FALLING_EDGE:
		     	        	 MCUCR |=(1<<3);
     464:	a5 e5       	ldi	r26, 0x55	; 85
     466:	b0 e0       	ldi	r27, 0x00	; 0
     468:	e5 e5       	ldi	r30, 0x55	; 85
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 81       	ld	r24, Z
     46e:	88 60       	ori	r24, 0x08	; 8
     470:	8c 93       	st	X, r24
     472:	39 c0       	rjmp	.+114    	; 0x4e6 <EXTI_enuSetSenseLevel+0x19a>
		     	        	 break;

		     	         case RISING_EDGE:
		     	        	 MCUCR |=(3<<2);
     474:	a5 e5       	ldi	r26, 0x55	; 85
     476:	b0 e0       	ldi	r27, 0x00	; 0
     478:	e5 e5       	ldi	r30, 0x55	; 85
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	80 81       	ld	r24, Z
     47e:	8c 60       	ori	r24, 0x0C	; 12
     480:	8c 93       	st	X, r24
     482:	31 c0       	rjmp	.+98     	; 0x4e6 <EXTI_enuSetSenseLevel+0x19a>
		     	        	 break;

		     	        default:
		     				Local_enuErrorState = ES_OUT_OF_RANGE;
     484:	83 e0       	ldi	r24, 0x03	; 3
     486:	8a 83       	std	Y+2, r24	; 0x02
     488:	2e c0       	rjmp	.+92     	; 0x4e6 <EXTI_enuSetSenseLevel+0x19a>
		     			}
	 }
	 else if(Copy_u8EXTI_ID ==INT2){
     48a:	8b 81       	ldd	r24, Y+3	; 0x03
     48c:	82 30       	cpi	r24, 0x02	; 2
     48e:	59 f5       	brne	.+86     	; 0x4e6 <EXTI_enuSetSenseLevel+0x19a>
		 MCUCSR &=~(1<<6);
     490:	a4 e5       	ldi	r26, 0x54	; 84
     492:	b0 e0       	ldi	r27, 0x00	; 0
     494:	e4 e5       	ldi	r30, 0x54	; 84
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	80 81       	ld	r24, Z
     49a:	8f 7b       	andi	r24, 0xBF	; 191
     49c:	8c 93       	st	X, r24
		     			GICR |= (1<<5);
     49e:	ab e5       	ldi	r26, 0x5B	; 91
     4a0:	b0 e0       	ldi	r27, 0x00	; 0
     4a2:	eb e5       	ldi	r30, 0x5B	; 91
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	80 81       	ld	r24, Z
     4a8:	80 62       	ori	r24, 0x20	; 32
     4aa:	8c 93       	st	X, r24

		     			switch (Copy_u8SenseLevel)
     4ac:	8c 81       	ldd	r24, Y+4	; 0x04
     4ae:	28 2f       	mov	r18, r24
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	3e 83       	std	Y+6, r19	; 0x06
     4b4:	2d 83       	std	Y+5, r18	; 0x05
     4b6:	8d 81       	ldd	r24, Y+5	; 0x05
     4b8:	9e 81       	ldd	r25, Y+6	; 0x06
     4ba:	81 30       	cpi	r24, 0x01	; 1
     4bc:	91 05       	cpc	r25, r1
     4be:	31 f0       	breq	.+12     	; 0x4cc <EXTI_enuSetSenseLevel+0x180>
     4c0:	2d 81       	ldd	r18, Y+5	; 0x05
     4c2:	3e 81       	ldd	r19, Y+6	; 0x06
     4c4:	22 30       	cpi	r18, 0x02	; 2
     4c6:	31 05       	cpc	r19, r1
     4c8:	71 f0       	breq	.+28     	; 0x4e6 <EXTI_enuSetSenseLevel+0x19a>
     4ca:	08 c0       	rjmp	.+16     	; 0x4dc <EXTI_enuSetSenseLevel+0x190>
		     		   	{
		                  case FALLING_EDGE:
		                 	 break;

		                  case RISING_EDGE:
		                 	 MCUCSR |= (1<<6);
     4cc:	a4 e5       	ldi	r26, 0x54	; 84
     4ce:	b0 e0       	ldi	r27, 0x00	; 0
     4d0:	e4 e5       	ldi	r30, 0x54	; 84
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	80 81       	ld	r24, Z
     4d6:	80 64       	ori	r24, 0x40	; 64
     4d8:	8c 93       	st	X, r24
     4da:	05 c0       	rjmp	.+10     	; 0x4e6 <EXTI_enuSetSenseLevel+0x19a>
		                 	 break;

		                 default:
		   			    Local_enuErrorState = ES_OUT_OF_RANGE;
     4dc:	83 e0       	ldi	r24, 0x03	; 3
     4de:	8a 83       	std	Y+2, r24	; 0x02
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <EXTI_enuSetSenseLevel+0x19a>
		   		        }
		 }
 }
 else{
	 ES_t Local_enuErrorState = ES_OUT_OF_RANGE;
     4e2:	83 e0       	ldi	r24, 0x03	; 3
     4e4:	89 83       	std	Y+1, r24	; 0x01
 }
	return Local_enuErrorState;
     4e6:	8a 81       	ldd	r24, Y+2	; 0x02
}
     4e8:	2a 96       	adiw	r28, 0x0a	; 10
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	cd bf       	out	0x3d, r28	; 61
     4f4:	cf 91       	pop	r28
     4f6:	df 91       	pop	r29
     4f8:	08 95       	ret

000004fa <EXTI_enuEnableINT>:

/*** fun to enable specific the interrupt
                      ***/
ES_t EXTI_enuEnableINT(u8 Copy_u8EXTI_ID){
     4fa:	df 93       	push	r29
     4fc:	cf 93       	push	r28
     4fe:	00 d0       	rcall	.+0      	; 0x500 <EXTI_enuEnableINT+0x6>
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     506:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8EXTI_ID < 3)
     508:	8a 81       	ldd	r24, Y+2	; 0x02
     50a:	83 30       	cpi	r24, 0x03	; 3
     50c:	00 f5       	brcc	.+64     	; 0x54e <EXTI_enuEnableINT+0x54>
		{
			if (Copy_u8EXTI_ID ==INT0)
     50e:	8a 81       	ldd	r24, Y+2	; 0x02
     510:	88 23       	and	r24, r24
     512:	41 f4       	brne	.+16     	; 0x524 <EXTI_enuEnableINT+0x2a>
			{
				GICR |= (1<<6);
     514:	ab e5       	ldi	r26, 0x5B	; 91
     516:	b0 e0       	ldi	r27, 0x00	; 0
     518:	eb e5       	ldi	r30, 0x5B	; 91
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	80 81       	ld	r24, Z
     51e:	80 64       	ori	r24, 0x40	; 64
     520:	8c 93       	st	X, r24
     522:	15 c0       	rjmp	.+42     	; 0x54e <EXTI_enuEnableINT+0x54>
			}
			else if (Copy_u8EXTI_ID ==INT1)
     524:	8a 81       	ldd	r24, Y+2	; 0x02
     526:	81 30       	cpi	r24, 0x01	; 1
     528:	41 f4       	brne	.+16     	; 0x53a <EXTI_enuEnableINT+0x40>
			{
				GICR |= (1<<7);
     52a:	ab e5       	ldi	r26, 0x5B	; 91
     52c:	b0 e0       	ldi	r27, 0x00	; 0
     52e:	eb e5       	ldi	r30, 0x5B	; 91
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	80 81       	ld	r24, Z
     534:	80 68       	ori	r24, 0x80	; 128
     536:	8c 93       	st	X, r24
     538:	0a c0       	rjmp	.+20     	; 0x54e <EXTI_enuEnableINT+0x54>
			}
			else if (Copy_u8EXTI_ID ==INT2)
     53a:	8a 81       	ldd	r24, Y+2	; 0x02
     53c:	82 30       	cpi	r24, 0x02	; 2
     53e:	39 f4       	brne	.+14     	; 0x54e <EXTI_enuEnableINT+0x54>
			{
				GICR |= (1<<5);
     540:	ab e5       	ldi	r26, 0x5B	; 91
     542:	b0 e0       	ldi	r27, 0x00	; 0
     544:	eb e5       	ldi	r30, 0x5B	; 91
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	80 81       	ld	r24, Z
     54a:	80 62       	ori	r24, 0x20	; 32
     54c:	8c 93       	st	X, r24
			}
		}

	return Local_enuErrorState;
     54e:	89 81       	ldd	r24, Y+1	; 0x01
}
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	cf 91       	pop	r28
     556:	df 91       	pop	r29
     558:	08 95       	ret

0000055a <EXTI_enuDisableINT>:

/***   fun to disable specific interrupt
                      ***/
ES_t EXTI_enuDisableINT(u8 Copy_u8EXTI_ID){
     55a:	df 93       	push	r29
     55c:	cf 93       	push	r28
     55e:	00 d0       	rcall	.+0      	; 0x560 <EXTI_enuDisableINT+0x6>
     560:	cd b7       	in	r28, 0x3d	; 61
     562:	de b7       	in	r29, 0x3e	; 62
     564:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     566:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8EXTI_ID < 3)
     568:	8a 81       	ldd	r24, Y+2	; 0x02
     56a:	83 30       	cpi	r24, 0x03	; 3
     56c:	00 f5       	brcc	.+64     	; 0x5ae <EXTI_enuDisableINT+0x54>
		{
			if (Copy_u8EXTI_ID ==INT0)
     56e:	8a 81       	ldd	r24, Y+2	; 0x02
     570:	88 23       	and	r24, r24
     572:	41 f4       	brne	.+16     	; 0x584 <EXTI_enuDisableINT+0x2a>
			{
				GICR &= ~(1<<6);
     574:	ab e5       	ldi	r26, 0x5B	; 91
     576:	b0 e0       	ldi	r27, 0x00	; 0
     578:	eb e5       	ldi	r30, 0x5B	; 91
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	80 81       	ld	r24, Z
     57e:	8f 7b       	andi	r24, 0xBF	; 191
     580:	8c 93       	st	X, r24
     582:	15 c0       	rjmp	.+42     	; 0x5ae <EXTI_enuDisableINT+0x54>
			}
			else if (Copy_u8EXTI_ID ==INT1)
     584:	8a 81       	ldd	r24, Y+2	; 0x02
     586:	81 30       	cpi	r24, 0x01	; 1
     588:	41 f4       	brne	.+16     	; 0x59a <EXTI_enuDisableINT+0x40>
			{
				GICR&= ~(1<<7);
     58a:	ab e5       	ldi	r26, 0x5B	; 91
     58c:	b0 e0       	ldi	r27, 0x00	; 0
     58e:	eb e5       	ldi	r30, 0x5B	; 91
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	80 81       	ld	r24, Z
     594:	8f 77       	andi	r24, 0x7F	; 127
     596:	8c 93       	st	X, r24
     598:	0a c0       	rjmp	.+20     	; 0x5ae <EXTI_enuDisableINT+0x54>
			}
			else if (Copy_u8EXTI_ID ==INT2)
     59a:	8a 81       	ldd	r24, Y+2	; 0x02
     59c:	82 30       	cpi	r24, 0x02	; 2
     59e:	39 f4       	brne	.+14     	; 0x5ae <EXTI_enuDisableINT+0x54>
			{
				GICR &= ~(1<<5);
     5a0:	ab e5       	ldi	r26, 0x5B	; 91
     5a2:	b0 e0       	ldi	r27, 0x00	; 0
     5a4:	eb e5       	ldi	r30, 0x5B	; 91
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	80 81       	ld	r24, Z
     5aa:	8f 7d       	andi	r24, 0xDF	; 223
     5ac:	8c 93       	st	X, r24
			}
		}

	return Local_enuErrorState;
     5ae:	89 81       	ldd	r24, Y+1	; 0x01
}
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	cf 91       	pop	r28
     5b6:	df 91       	pop	r29
     5b8:	08 95       	ret

000005ba <EXTI_enuCallBack>:

 /***  call back fun to use function that exist in application level
                          ***/

ES_t EXTI_enuCallBack(volatile void (*Copy_pfunAppFun)(void*) , volatile void * Copy_pvidParameter , u8 Copy_u8EXTI_ID)
{
     5ba:	df 93       	push	r29
     5bc:	cf 93       	push	r28
     5be:	00 d0       	rcall	.+0      	; 0x5c0 <EXTI_enuCallBack+0x6>
     5c0:	00 d0       	rcall	.+0      	; 0x5c2 <EXTI_enuCallBack+0x8>
     5c2:	00 d0       	rcall	.+0      	; 0x5c4 <EXTI_enuCallBack+0xa>
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
     5c8:	9b 83       	std	Y+3, r25	; 0x03
     5ca:	8a 83       	std	Y+2, r24	; 0x02
     5cc:	7d 83       	std	Y+5, r23	; 0x05
     5ce:	6c 83       	std	Y+4, r22	; 0x04
     5d0:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
     5d2:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pfunAppFun != NULL && Copy_u8EXTI_ID <3)
     5d4:	8a 81       	ldd	r24, Y+2	; 0x02
     5d6:	9b 81       	ldd	r25, Y+3	; 0x03
     5d8:	00 97       	sbiw	r24, 0x00	; 0
     5da:	d9 f0       	breq	.+54     	; 0x612 <EXTI_enuCallBack+0x58>
     5dc:	8e 81       	ldd	r24, Y+6	; 0x06
     5de:	83 30       	cpi	r24, 0x03	; 3
     5e0:	c0 f4       	brcc	.+48     	; 0x612 <EXTI_enuCallBack+0x58>
	{
		EXTI_ApfunINTFun[Copy_u8EXTI_ID]=Copy_pfunAppFun;
     5e2:	8e 81       	ldd	r24, Y+6	; 0x06
     5e4:	88 2f       	mov	r24, r24
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	88 0f       	add	r24, r24
     5ea:	99 1f       	adc	r25, r25
     5ec:	fc 01       	movw	r30, r24
     5ee:	ea 59       	subi	r30, 0x9A	; 154
     5f0:	ff 4f       	sbci	r31, 0xFF	; 255
     5f2:	8a 81       	ldd	r24, Y+2	; 0x02
     5f4:	9b 81       	ldd	r25, Y+3	; 0x03
     5f6:	91 83       	std	Z+1, r25	; 0x01
     5f8:	80 83       	st	Z, r24
		EXTI_ApvidGenericparameter[Copy_u8EXTI_ID] = Copy_pvidParameter;
     5fa:	8e 81       	ldd	r24, Y+6	; 0x06
     5fc:	88 2f       	mov	r24, r24
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	88 0f       	add	r24, r24
     602:	99 1f       	adc	r25, r25
     604:	fc 01       	movw	r30, r24
     606:	e4 59       	subi	r30, 0x94	; 148
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	8c 81       	ldd	r24, Y+4	; 0x04
     60c:	9d 81       	ldd	r25, Y+5	; 0x05
     60e:	91 83       	std	Z+1, r25	; 0x01
     610:	80 83       	st	Z, r24
	}

	return Local_enuErrorState;
     612:	89 81       	ldd	r24, Y+1	; 0x01
}
     614:	26 96       	adiw	r28, 0x06	; 6
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	f8 94       	cli
     61a:	de bf       	out	0x3e, r29	; 62
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	cd bf       	out	0x3d, r28	; 61
     620:	cf 91       	pop	r28
     622:	df 91       	pop	r29
     624:	08 95       	ret

00000626 <__vector_1>:



ISR(VECT_INT0)
{
     626:	1f 92       	push	r1
     628:	0f 92       	push	r0
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	0f 92       	push	r0
     62e:	11 24       	eor	r1, r1
     630:	2f 93       	push	r18
     632:	3f 93       	push	r19
     634:	4f 93       	push	r20
     636:	5f 93       	push	r21
     638:	6f 93       	push	r22
     63a:	7f 93       	push	r23
     63c:	8f 93       	push	r24
     63e:	9f 93       	push	r25
     640:	af 93       	push	r26
     642:	bf 93       	push	r27
     644:	ef 93       	push	r30
     646:	ff 93       	push	r31
     648:	df 93       	push	r29
     64a:	cf 93       	push	r28
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[0] != NULL)
     650:	80 91 66 00 	lds	r24, 0x0066
     654:	90 91 67 00 	lds	r25, 0x0067
     658:	00 97       	sbiw	r24, 0x00	; 0
     65a:	49 f0       	breq	.+18     	; 0x66e <__vector_1+0x48>
	{
		EXTI_ApfunINTFun[0] (EXTI_ApvidGenericparameter[0]);
     65c:	e0 91 66 00 	lds	r30, 0x0066
     660:	f0 91 67 00 	lds	r31, 0x0067
     664:	80 91 6c 00 	lds	r24, 0x006C
     668:	90 91 6d 00 	lds	r25, 0x006D
     66c:	09 95       	icall
	}
}
     66e:	cf 91       	pop	r28
     670:	df 91       	pop	r29
     672:	ff 91       	pop	r31
     674:	ef 91       	pop	r30
     676:	bf 91       	pop	r27
     678:	af 91       	pop	r26
     67a:	9f 91       	pop	r25
     67c:	8f 91       	pop	r24
     67e:	7f 91       	pop	r23
     680:	6f 91       	pop	r22
     682:	5f 91       	pop	r21
     684:	4f 91       	pop	r20
     686:	3f 91       	pop	r19
     688:	2f 91       	pop	r18
     68a:	0f 90       	pop	r0
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	0f 90       	pop	r0
     690:	1f 90       	pop	r1
     692:	18 95       	reti

00000694 <__vector_2>:

ISR(VECT_INT1)
{
     694:	1f 92       	push	r1
     696:	0f 92       	push	r0
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	0f 92       	push	r0
     69c:	11 24       	eor	r1, r1
     69e:	2f 93       	push	r18
     6a0:	3f 93       	push	r19
     6a2:	4f 93       	push	r20
     6a4:	5f 93       	push	r21
     6a6:	6f 93       	push	r22
     6a8:	7f 93       	push	r23
     6aa:	8f 93       	push	r24
     6ac:	9f 93       	push	r25
     6ae:	af 93       	push	r26
     6b0:	bf 93       	push	r27
     6b2:	ef 93       	push	r30
     6b4:	ff 93       	push	r31
     6b6:	df 93       	push	r29
     6b8:	cf 93       	push	r28
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[1] != NULL)
     6be:	80 91 68 00 	lds	r24, 0x0068
     6c2:	90 91 69 00 	lds	r25, 0x0069
     6c6:	00 97       	sbiw	r24, 0x00	; 0
     6c8:	49 f0       	breq	.+18     	; 0x6dc <__vector_2+0x48>
	{
		EXTI_ApfunINTFun[1] (EXTI_ApvidGenericparameter[1]);
     6ca:	e0 91 68 00 	lds	r30, 0x0068
     6ce:	f0 91 69 00 	lds	r31, 0x0069
     6d2:	80 91 6e 00 	lds	r24, 0x006E
     6d6:	90 91 6f 00 	lds	r25, 0x006F
     6da:	09 95       	icall
	}
}
     6dc:	cf 91       	pop	r28
     6de:	df 91       	pop	r29
     6e0:	ff 91       	pop	r31
     6e2:	ef 91       	pop	r30
     6e4:	bf 91       	pop	r27
     6e6:	af 91       	pop	r26
     6e8:	9f 91       	pop	r25
     6ea:	8f 91       	pop	r24
     6ec:	7f 91       	pop	r23
     6ee:	6f 91       	pop	r22
     6f0:	5f 91       	pop	r21
     6f2:	4f 91       	pop	r20
     6f4:	3f 91       	pop	r19
     6f6:	2f 91       	pop	r18
     6f8:	0f 90       	pop	r0
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	0f 90       	pop	r0
     6fe:	1f 90       	pop	r1
     700:	18 95       	reti

00000702 <__vector_3>:

ISR(VECT_INT2)
{
     702:	1f 92       	push	r1
     704:	0f 92       	push	r0
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	0f 92       	push	r0
     70a:	11 24       	eor	r1, r1
     70c:	2f 93       	push	r18
     70e:	3f 93       	push	r19
     710:	4f 93       	push	r20
     712:	5f 93       	push	r21
     714:	6f 93       	push	r22
     716:	7f 93       	push	r23
     718:	8f 93       	push	r24
     71a:	9f 93       	push	r25
     71c:	af 93       	push	r26
     71e:	bf 93       	push	r27
     720:	ef 93       	push	r30
     722:	ff 93       	push	r31
     724:	df 93       	push	r29
     726:	cf 93       	push	r28
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[2] != NULL)
     72c:	80 91 6a 00 	lds	r24, 0x006A
     730:	90 91 6b 00 	lds	r25, 0x006B
     734:	00 97       	sbiw	r24, 0x00	; 0
     736:	49 f0       	breq	.+18     	; 0x74a <__vector_3+0x48>
	{
		EXTI_ApfunINTFun[2] (EXTI_ApvidGenericparameter[2]);
     738:	e0 91 6a 00 	lds	r30, 0x006A
     73c:	f0 91 6b 00 	lds	r31, 0x006B
     740:	80 91 70 00 	lds	r24, 0x0070
     744:	90 91 71 00 	lds	r25, 0x0071
     748:	09 95       	icall
	}
}
     74a:	cf 91       	pop	r28
     74c:	df 91       	pop	r29
     74e:	ff 91       	pop	r31
     750:	ef 91       	pop	r30
     752:	bf 91       	pop	r27
     754:	af 91       	pop	r26
     756:	9f 91       	pop	r25
     758:	8f 91       	pop	r24
     75a:	7f 91       	pop	r23
     75c:	6f 91       	pop	r22
     75e:	5f 91       	pop	r21
     760:	4f 91       	pop	r20
     762:	3f 91       	pop	r19
     764:	2f 91       	pop	r18
     766:	0f 90       	pop	r0
     768:	0f be       	out	0x3f, r0	; 63
     76a:	0f 90       	pop	r0
     76c:	1f 90       	pop	r1
     76e:	18 95       	reti

00000770 <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"


ES_t DIO_enuInit(void){
     770:	df 93       	push	r29
     772:	cf 93       	push	r28
     774:	0f 92       	push	r0
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     77a:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
     77c:	ea e3       	ldi	r30, 0x3A	; 58
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	8f ef       	ldi	r24, 0xFF	; 255
     782:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
     784:	e7 e3       	ldi	r30, 0x37	; 55
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	8f ef       	ldi	r24, 0xFF	; 255
     78a:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
     78c:	e4 e3       	ldi	r30, 0x34	; 52
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	8d ec       	ldi	r24, 0xCD	; 205
     792:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
     794:	e1 e3       	ldi	r30, 0x31	; 49
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	8d ec       	ldi	r24, 0xCD	; 205
     79a:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
     79c:	eb e3       	ldi	r30, 0x3B	; 59
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	10 82       	st	Z, r1
    PORTB = CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
     7a2:	e8 e3       	ldi	r30, 0x38	; 56
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	89 e8       	ldi	r24, 0x89	; 137
     7a8:	80 83       	st	Z, r24
	PORTC = CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
     7aa:	e5 e3       	ldi	r30, 0x35	; 53
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	89 e2       	ldi	r24, 0x29	; 41
     7b0:	80 83       	st	Z, r24
	PORTD = CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
     7b2:	e2 e3       	ldi	r30, 0x32	; 50
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	89 e2       	ldi	r24, 0x29	; 41
     7b8:	80 83       	st	Z, r24
	 Local_enuErrorState = ES_OK;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     7be:	89 81       	ldd	r24, Y+1	; 0x01
}
     7c0:	0f 90       	pop	r0
     7c2:	cf 91       	pop	r28
     7c4:	df 91       	pop	r29
     7c6:	08 95       	ret

000007c8 <DIO_enuSetPortDirection>:


ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value){
     7c8:	df 93       	push	r29
     7ca:	cf 93       	push	r28
     7cc:	00 d0       	rcall	.+0      	; 0x7ce <DIO_enuSetPortDirection+0x6>
     7ce:	00 d0       	rcall	.+0      	; 0x7d0 <DIO_enuSetPortDirection+0x8>
     7d0:	0f 92       	push	r0
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
     7d6:	8a 83       	std	Y+2, r24	; 0x02
     7d8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     7da:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
     7dc:	8a 81       	ldd	r24, Y+2	; 0x02
     7de:	84 30       	cpi	r24, 0x04	; 4
     7e0:	a8 f5       	brcc	.+106    	; 0x84c <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
     7e2:	8a 81       	ldd	r24, Y+2	; 0x02
     7e4:	28 2f       	mov	r18, r24
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	3d 83       	std	Y+5, r19	; 0x05
     7ea:	2c 83       	std	Y+4, r18	; 0x04
     7ec:	8c 81       	ldd	r24, Y+4	; 0x04
     7ee:	9d 81       	ldd	r25, Y+5	; 0x05
     7f0:	81 30       	cpi	r24, 0x01	; 1
     7f2:	91 05       	cpc	r25, r1
     7f4:	d1 f0       	breq	.+52     	; 0x82a <DIO_enuSetPortDirection+0x62>
     7f6:	2c 81       	ldd	r18, Y+4	; 0x04
     7f8:	3d 81       	ldd	r19, Y+5	; 0x05
     7fa:	22 30       	cpi	r18, 0x02	; 2
     7fc:	31 05       	cpc	r19, r1
     7fe:	2c f4       	brge	.+10     	; 0x80a <DIO_enuSetPortDirection+0x42>
     800:	8c 81       	ldd	r24, Y+4	; 0x04
     802:	9d 81       	ldd	r25, Y+5	; 0x05
     804:	00 97       	sbiw	r24, 0x00	; 0
     806:	61 f0       	breq	.+24     	; 0x820 <DIO_enuSetPortDirection+0x58>
     808:	1e c0       	rjmp	.+60     	; 0x846 <DIO_enuSetPortDirection+0x7e>
     80a:	2c 81       	ldd	r18, Y+4	; 0x04
     80c:	3d 81       	ldd	r19, Y+5	; 0x05
     80e:	22 30       	cpi	r18, 0x02	; 2
     810:	31 05       	cpc	r19, r1
     812:	81 f0       	breq	.+32     	; 0x834 <DIO_enuSetPortDirection+0x6c>
     814:	8c 81       	ldd	r24, Y+4	; 0x04
     816:	9d 81       	ldd	r25, Y+5	; 0x05
     818:	83 30       	cpi	r24, 0x03	; 3
     81a:	91 05       	cpc	r25, r1
     81c:	81 f0       	breq	.+32     	; 0x83e <DIO_enuSetPortDirection+0x76>
     81e:	13 c0       	rjmp	.+38     	; 0x846 <DIO_enuSetPortDirection+0x7e>
		{
			case DIO_PORTA:
			DDRA = Copy_u8Value;
     820:	ea e3       	ldi	r30, 0x3A	; 58
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	8b 81       	ldd	r24, Y+3	; 0x03
     826:	80 83       	st	Z, r24
     828:	0e c0       	rjmp	.+28     	; 0x846 <DIO_enuSetPortDirection+0x7e>
			break;

			case DIO_PORTB:
			DDRB = Copy_u8Value;
     82a:	e7 e3       	ldi	r30, 0x37	; 55
     82c:	f0 e0       	ldi	r31, 0x00	; 0
     82e:	8b 81       	ldd	r24, Y+3	; 0x03
     830:	80 83       	st	Z, r24
     832:	09 c0       	rjmp	.+18     	; 0x846 <DIO_enuSetPortDirection+0x7e>
			break;

			case DIO_PORTC:
			DDRC = Copy_u8Value;
     834:	e4 e3       	ldi	r30, 0x34	; 52
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	8b 81       	ldd	r24, Y+3	; 0x03
     83a:	80 83       	st	Z, r24
     83c:	04 c0       	rjmp	.+8      	; 0x846 <DIO_enuSetPortDirection+0x7e>
			break;

			case DIO_PORTD:
			DDRD = Copy_u8Value;
     83e:	e1 e3       	ldi	r30, 0x31	; 49
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	8b 81       	ldd	r24, Y+3	; 0x03
     844:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	89 83       	std	Y+1, r24	; 0x01
     84a:	02 c0       	rjmp	.+4      	; 0x850 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     84c:	83 e0       	ldi	r24, 0x03	; 3
     84e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     850:	89 81       	ldd	r24, Y+1	; 0x01

}
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	cf 91       	pop	r28
     85e:	df 91       	pop	r29
     860:	08 95       	ret

00000862 <DIO_enuSetPortVal>:
ES_t DIO_enuSetPortVal(u8 Copy_u8PortID, u8 Copy_u8Value){
     862:	df 93       	push	r29
     864:	cf 93       	push	r28
     866:	00 d0       	rcall	.+0      	; 0x868 <DIO_enuSetPortVal+0x6>
     868:	00 d0       	rcall	.+0      	; 0x86a <DIO_enuSetPortVal+0x8>
     86a:	0f 92       	push	r0
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	8a 83       	std	Y+2, r24	; 0x02
     872:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     874:	19 82       	std	Y+1, r1	; 0x01

		if(Copy_u8PortID <= DIO_PORTD)
     876:	8a 81       	ldd	r24, Y+2	; 0x02
     878:	84 30       	cpi	r24, 0x04	; 4
     87a:	a8 f5       	brcc	.+106    	; 0x8e6 <DIO_enuSetPortVal+0x84>
		{
			switch(Copy_u8PortID)
     87c:	8a 81       	ldd	r24, Y+2	; 0x02
     87e:	28 2f       	mov	r18, r24
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	3d 83       	std	Y+5, r19	; 0x05
     884:	2c 83       	std	Y+4, r18	; 0x04
     886:	8c 81       	ldd	r24, Y+4	; 0x04
     888:	9d 81       	ldd	r25, Y+5	; 0x05
     88a:	81 30       	cpi	r24, 0x01	; 1
     88c:	91 05       	cpc	r25, r1
     88e:	d1 f0       	breq	.+52     	; 0x8c4 <DIO_enuSetPortVal+0x62>
     890:	2c 81       	ldd	r18, Y+4	; 0x04
     892:	3d 81       	ldd	r19, Y+5	; 0x05
     894:	22 30       	cpi	r18, 0x02	; 2
     896:	31 05       	cpc	r19, r1
     898:	2c f4       	brge	.+10     	; 0x8a4 <DIO_enuSetPortVal+0x42>
     89a:	8c 81       	ldd	r24, Y+4	; 0x04
     89c:	9d 81       	ldd	r25, Y+5	; 0x05
     89e:	00 97       	sbiw	r24, 0x00	; 0
     8a0:	61 f0       	breq	.+24     	; 0x8ba <DIO_enuSetPortVal+0x58>
     8a2:	1e c0       	rjmp	.+60     	; 0x8e0 <DIO_enuSetPortVal+0x7e>
     8a4:	2c 81       	ldd	r18, Y+4	; 0x04
     8a6:	3d 81       	ldd	r19, Y+5	; 0x05
     8a8:	22 30       	cpi	r18, 0x02	; 2
     8aa:	31 05       	cpc	r19, r1
     8ac:	81 f0       	breq	.+32     	; 0x8ce <DIO_enuSetPortVal+0x6c>
     8ae:	8c 81       	ldd	r24, Y+4	; 0x04
     8b0:	9d 81       	ldd	r25, Y+5	; 0x05
     8b2:	83 30       	cpi	r24, 0x03	; 3
     8b4:	91 05       	cpc	r25, r1
     8b6:	81 f0       	breq	.+32     	; 0x8d8 <DIO_enuSetPortVal+0x76>
     8b8:	13 c0       	rjmp	.+38     	; 0x8e0 <DIO_enuSetPortVal+0x7e>
			{
				case DIO_PORTA:
				PORTA = Copy_u8Value;
     8ba:	eb e3       	ldi	r30, 0x3B	; 59
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	8b 81       	ldd	r24, Y+3	; 0x03
     8c0:	80 83       	st	Z, r24
     8c2:	0e c0       	rjmp	.+28     	; 0x8e0 <DIO_enuSetPortVal+0x7e>
				break;

				case DIO_PORTB:
				PORTB = Copy_u8Value;
     8c4:	e8 e3       	ldi	r30, 0x38	; 56
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ca:	80 83       	st	Z, r24
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <DIO_enuSetPortVal+0x7e>
				break;

				case DIO_PORTC:
				PORTC = Copy_u8Value;
     8ce:	e5 e3       	ldi	r30, 0x35	; 53
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	8b 81       	ldd	r24, Y+3	; 0x03
     8d4:	80 83       	st	Z, r24
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <DIO_enuSetPortVal+0x7e>
				break;

				case DIO_PORTD:
				PORTD = Copy_u8Value;
     8d8:	e2 e3       	ldi	r30, 0x32	; 50
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	8b 81       	ldd	r24, Y+3	; 0x03
     8de:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	89 83       	std	Y+1, r24	; 0x01
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <DIO_enuSetPortVal+0x88>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
     8e6:	83 e0       	ldi	r24, 0x03	; 3
     8e8:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorState;
     8ea:	89 81       	ldd	r24, Y+1	; 0x01

}
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	0f 90       	pop	r0
     8f6:	cf 91       	pop	r28
     8f8:	df 91       	pop	r29
     8fa:	08 95       	ret

000008fc <DIO_enuGetPortVal>:
ES_t DIO_enuGetPortVal(u8 Copy_u8PortID, u8 *Copy_pu8Value){
     8fc:	df 93       	push	r29
     8fe:	cf 93       	push	r28
     900:	00 d0       	rcall	.+0      	; 0x902 <DIO_enuGetPortVal+0x6>
     902:	00 d0       	rcall	.+0      	; 0x904 <DIO_enuGetPortVal+0x8>
     904:	00 d0       	rcall	.+0      	; 0x906 <DIO_enuGetPortVal+0xa>
     906:	cd b7       	in	r28, 0x3d	; 61
     908:	de b7       	in	r29, 0x3e	; 62
     90a:	8a 83       	std	Y+2, r24	; 0x02
     90c:	7c 83       	std	Y+4, r23	; 0x04
     90e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     910:	19 82       	std	Y+1, r1	; 0x01
 if(Copy_pu8Value!=NULL){
     912:	8b 81       	ldd	r24, Y+3	; 0x03
     914:	9c 81       	ldd	r25, Y+4	; 0x04
     916:	00 97       	sbiw	r24, 0x00	; 0
     918:	09 f4       	brne	.+2      	; 0x91c <DIO_enuGetPortVal+0x20>
     91a:	43 c0       	rjmp	.+134    	; 0x9a2 <DIO_enuGetPortVal+0xa6>
		if(Copy_u8PortID <= DIO_PORTD)
     91c:	8a 81       	ldd	r24, Y+2	; 0x02
     91e:	84 30       	cpi	r24, 0x04	; 4
     920:	e8 f5       	brcc	.+122    	; 0x99c <DIO_enuGetPortVal+0xa0>
		{
			switch(Copy_u8PortID)
     922:	8a 81       	ldd	r24, Y+2	; 0x02
     924:	28 2f       	mov	r18, r24
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	3e 83       	std	Y+6, r19	; 0x06
     92a:	2d 83       	std	Y+5, r18	; 0x05
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	9e 81       	ldd	r25, Y+6	; 0x06
     930:	81 30       	cpi	r24, 0x01	; 1
     932:	91 05       	cpc	r25, r1
     934:	e1 f0       	breq	.+56     	; 0x96e <DIO_enuGetPortVal+0x72>
     936:	2d 81       	ldd	r18, Y+5	; 0x05
     938:	3e 81       	ldd	r19, Y+6	; 0x06
     93a:	22 30       	cpi	r18, 0x02	; 2
     93c:	31 05       	cpc	r19, r1
     93e:	2c f4       	brge	.+10     	; 0x94a <DIO_enuGetPortVal+0x4e>
     940:	8d 81       	ldd	r24, Y+5	; 0x05
     942:	9e 81       	ldd	r25, Y+6	; 0x06
     944:	00 97       	sbiw	r24, 0x00	; 0
     946:	61 f0       	breq	.+24     	; 0x960 <DIO_enuGetPortVal+0x64>
     948:	26 c0       	rjmp	.+76     	; 0x996 <DIO_enuGetPortVal+0x9a>
     94a:	2d 81       	ldd	r18, Y+5	; 0x05
     94c:	3e 81       	ldd	r19, Y+6	; 0x06
     94e:	22 30       	cpi	r18, 0x02	; 2
     950:	31 05       	cpc	r19, r1
     952:	a1 f0       	breq	.+40     	; 0x97c <DIO_enuGetPortVal+0x80>
     954:	8d 81       	ldd	r24, Y+5	; 0x05
     956:	9e 81       	ldd	r25, Y+6	; 0x06
     958:	83 30       	cpi	r24, 0x03	; 3
     95a:	91 05       	cpc	r25, r1
     95c:	b1 f0       	breq	.+44     	; 0x98a <DIO_enuGetPortVal+0x8e>
     95e:	1b c0       	rjmp	.+54     	; 0x996 <DIO_enuGetPortVal+0x9a>
			{
				case DIO_PORTA:
				 *Copy_pu8Value=PINA; //PINA is a reg not pin
     960:	e9 e3       	ldi	r30, 0x39	; 57
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	80 81       	ld	r24, Z
     966:	eb 81       	ldd	r30, Y+3	; 0x03
     968:	fc 81       	ldd	r31, Y+4	; 0x04
     96a:	80 83       	st	Z, r24
     96c:	14 c0       	rjmp	.+40     	; 0x996 <DIO_enuGetPortVal+0x9a>
				break;

				case DIO_PORTB:
				 *Copy_pu8Value=PINB;
     96e:	e6 e3       	ldi	r30, 0x36	; 54
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 81       	ld	r24, Z
     974:	eb 81       	ldd	r30, Y+3	; 0x03
     976:	fc 81       	ldd	r31, Y+4	; 0x04
     978:	80 83       	st	Z, r24
     97a:	0d c0       	rjmp	.+26     	; 0x996 <DIO_enuGetPortVal+0x9a>
				break;

				case DIO_PORTC:
				 *Copy_pu8Value=PINC;
     97c:	e3 e3       	ldi	r30, 0x33	; 51
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	80 81       	ld	r24, Z
     982:	eb 81       	ldd	r30, Y+3	; 0x03
     984:	fc 81       	ldd	r31, Y+4	; 0x04
     986:	80 83       	st	Z, r24
     988:	06 c0       	rjmp	.+12     	; 0x996 <DIO_enuGetPortVal+0x9a>
				break;

				case DIO_PORTD:
			    *Copy_pu8Value=PIND;
     98a:	e0 e3       	ldi	r30, 0x30	; 48
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	80 81       	ld	r24, Z
     990:	eb 81       	ldd	r30, Y+3	; 0x03
     992:	fc 81       	ldd	r31, Y+4	; 0x04
     994:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	89 83       	std	Y+1, r24	; 0x01
     99a:	05 c0       	rjmp	.+10     	; 0x9a6 <DIO_enuGetPortVal+0xaa>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
     99c:	83 e0       	ldi	r24, 0x03	; 3
     99e:	89 83       	std	Y+1, r24	; 0x01
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <DIO_enuGetPortVal+0xaa>
		}
 }
 else{
	 Local_enuErrorState = ES_NULL_POINTER;
     9a2:	82 e0       	ldi	r24, 0x02	; 2
     9a4:	89 83       	std	Y+1, r24	; 0x01
 }
		return Local_enuErrorState;
     9a6:	89 81       	ldd	r24, Y+1	; 0x01


}
     9a8:	26 96       	adiw	r28, 0x06	; 6
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
     9b4:	cf 91       	pop	r28
     9b6:	df 91       	pop	r29
     9b8:	08 95       	ret

000009ba <DIO_enuTogPortVal>:
ES_t DIO_enuTogPortVal(u8 Copy_u8PortID){
     9ba:	df 93       	push	r29
     9bc:	cf 93       	push	r28
     9be:	00 d0       	rcall	.+0      	; 0x9c0 <DIO_enuTogPortVal+0x6>
     9c0:	00 d0       	rcall	.+0      	; 0x9c2 <DIO_enuTogPortVal+0x8>
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
     9c6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     9c8:	19 82       	std	Y+1, r1	; 0x01

			if(Copy_u8PortID <= DIO_PORTD)
     9ca:	8a 81       	ldd	r24, Y+2	; 0x02
     9cc:	84 30       	cpi	r24, 0x04	; 4
     9ce:	08 f0       	brcs	.+2      	; 0x9d2 <DIO_enuTogPortVal+0x18>
     9d0:	41 c0       	rjmp	.+130    	; 0xa54 <DIO_enuTogPortVal+0x9a>
			{
				switch(Copy_u8PortID)
     9d2:	8a 81       	ldd	r24, Y+2	; 0x02
     9d4:	28 2f       	mov	r18, r24
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	3c 83       	std	Y+4, r19	; 0x04
     9da:	2b 83       	std	Y+3, r18	; 0x03
     9dc:	8b 81       	ldd	r24, Y+3	; 0x03
     9de:	9c 81       	ldd	r25, Y+4	; 0x04
     9e0:	81 30       	cpi	r24, 0x01	; 1
     9e2:	91 05       	cpc	r25, r1
     9e4:	e9 f0       	breq	.+58     	; 0xa20 <DIO_enuTogPortVal+0x66>
     9e6:	2b 81       	ldd	r18, Y+3	; 0x03
     9e8:	3c 81       	ldd	r19, Y+4	; 0x04
     9ea:	22 30       	cpi	r18, 0x02	; 2
     9ec:	31 05       	cpc	r19, r1
     9ee:	2c f4       	brge	.+10     	; 0x9fa <DIO_enuTogPortVal+0x40>
     9f0:	8b 81       	ldd	r24, Y+3	; 0x03
     9f2:	9c 81       	ldd	r25, Y+4	; 0x04
     9f4:	00 97       	sbiw	r24, 0x00	; 0
     9f6:	61 f0       	breq	.+24     	; 0xa10 <DIO_enuTogPortVal+0x56>
     9f8:	2a c0       	rjmp	.+84     	; 0xa4e <DIO_enuTogPortVal+0x94>
     9fa:	2b 81       	ldd	r18, Y+3	; 0x03
     9fc:	3c 81       	ldd	r19, Y+4	; 0x04
     9fe:	22 30       	cpi	r18, 0x02	; 2
     a00:	31 05       	cpc	r19, r1
     a02:	b1 f0       	breq	.+44     	; 0xa30 <DIO_enuTogPortVal+0x76>
     a04:	8b 81       	ldd	r24, Y+3	; 0x03
     a06:	9c 81       	ldd	r25, Y+4	; 0x04
     a08:	83 30       	cpi	r24, 0x03	; 3
     a0a:	91 05       	cpc	r25, r1
     a0c:	c9 f0       	breq	.+50     	; 0xa40 <DIO_enuTogPortVal+0x86>
     a0e:	1f c0       	rjmp	.+62     	; 0xa4e <DIO_enuTogPortVal+0x94>
				{
					case DIO_PORTA:
					 PORTA=~PORTA;
     a10:	ab e3       	ldi	r26, 0x3B	; 59
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	eb e3       	ldi	r30, 0x3B	; 59
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	80 95       	com	r24
     a1c:	8c 93       	st	X, r24
     a1e:	17 c0       	rjmp	.+46     	; 0xa4e <DIO_enuTogPortVal+0x94>
					break;

					case DIO_PORTB:
					 PORTB=~PORTB;
     a20:	a8 e3       	ldi	r26, 0x38	; 56
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	e8 e3       	ldi	r30, 0x38	; 56
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	80 81       	ld	r24, Z
     a2a:	80 95       	com	r24
     a2c:	8c 93       	st	X, r24
     a2e:	0f c0       	rjmp	.+30     	; 0xa4e <DIO_enuTogPortVal+0x94>
					break;

					case DIO_PORTC:
					 PORTC=~PORTC;
     a30:	a5 e3       	ldi	r26, 0x35	; 53
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	e5 e3       	ldi	r30, 0x35	; 53
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	80 81       	ld	r24, Z
     a3a:	80 95       	com	r24
     a3c:	8c 93       	st	X, r24
     a3e:	07 c0       	rjmp	.+14     	; 0xa4e <DIO_enuTogPortVal+0x94>
					break;

					case DIO_PORTD:
					 PORTD=~PORTD;
     a40:	a2 e3       	ldi	r26, 0x32	; 50
     a42:	b0 e0       	ldi	r27, 0x00	; 0
     a44:	e2 e3       	ldi	r30, 0x32	; 50
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	80 81       	ld	r24, Z
     a4a:	80 95       	com	r24
     a4c:	8c 93       	st	X, r24
					break;
				}
				Local_enuErrorState = ES_OK;
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	89 83       	std	Y+1, r24	; 0x01
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <DIO_enuTogPortVal+0x9e>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
     a54:	83 e0       	ldi	r24, 0x03	; 3
     a56:	89 83       	std	Y+1, r24	; 0x01
			}

			return Local_enuErrorState;
     a58:	89 81       	ldd	r24, Y+1	; 0x01

}
     a5a:	0f 90       	pop	r0
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	cf 91       	pop	r28
     a64:	df 91       	pop	r29
     a66:	08 95       	ret

00000a68 <DIO_enuSetPinDirection>:


ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID, u8  Copy_u8Value){
     a68:	df 93       	push	r29
     a6a:	cf 93       	push	r28
     a6c:	00 d0       	rcall	.+0      	; 0xa6e <DIO_enuSetPinDirection+0x6>
     a6e:	00 d0       	rcall	.+0      	; 0xa70 <DIO_enuSetPinDirection+0x8>
     a70:	00 d0       	rcall	.+0      	; 0xa72 <DIO_enuSetPinDirection+0xa>
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	8a 83       	std	Y+2, r24	; 0x02
     a78:	6b 83       	std	Y+3, r22	; 0x03
     a7a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     a7c:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8PortID <= DIO_PORTD	&& Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT){
     a7e:	8a 81       	ldd	r24, Y+2	; 0x02
     a80:	84 30       	cpi	r24, 0x04	; 4
     a82:	08 f0       	brcs	.+2      	; 0xa86 <DIO_enuSetPinDirection+0x1e>
     a84:	d1 c0       	rjmp	.+418    	; 0xc28 <DIO_enuSetPinDirection+0x1c0>
     a86:	8b 81       	ldd	r24, Y+3	; 0x03
     a88:	88 30       	cpi	r24, 0x08	; 8
     a8a:	08 f0       	brcs	.+2      	; 0xa8e <DIO_enuSetPinDirection+0x26>
     a8c:	cd c0       	rjmp	.+410    	; 0xc28 <DIO_enuSetPinDirection+0x1c0>
     a8e:	8c 81       	ldd	r24, Y+4	; 0x04
     a90:	82 30       	cpi	r24, 0x02	; 2
     a92:	08 f0       	brcs	.+2      	; 0xa96 <DIO_enuSetPinDirection+0x2e>
     a94:	c9 c0       	rjmp	.+402    	; 0xc28 <DIO_enuSetPinDirection+0x1c0>
	switch(Copy_u8PortID)
     a96:	8a 81       	ldd	r24, Y+2	; 0x02
     a98:	28 2f       	mov	r18, r24
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	3e 83       	std	Y+6, r19	; 0x06
     a9e:	2d 83       	std	Y+5, r18	; 0x05
     aa0:	6d 81       	ldd	r22, Y+5	; 0x05
     aa2:	7e 81       	ldd	r23, Y+6	; 0x06
     aa4:	61 30       	cpi	r22, 0x01	; 1
     aa6:	71 05       	cpc	r23, r1
     aa8:	09 f4       	brne	.+2      	; 0xaac <DIO_enuSetPinDirection+0x44>
     aaa:	41 c0       	rjmp	.+130    	; 0xb2e <DIO_enuSetPinDirection+0xc6>
     aac:	8d 81       	ldd	r24, Y+5	; 0x05
     aae:	9e 81       	ldd	r25, Y+6	; 0x06
     ab0:	82 30       	cpi	r24, 0x02	; 2
     ab2:	91 05       	cpc	r25, r1
     ab4:	34 f4       	brge	.+12     	; 0xac2 <DIO_enuSetPinDirection+0x5a>
     ab6:	2d 81       	ldd	r18, Y+5	; 0x05
     ab8:	3e 81       	ldd	r19, Y+6	; 0x06
     aba:	21 15       	cp	r18, r1
     abc:	31 05       	cpc	r19, r1
     abe:	71 f0       	breq	.+28     	; 0xadc <DIO_enuSetPinDirection+0x74>
     ac0:	b0 c0       	rjmp	.+352    	; 0xc22 <DIO_enuSetPinDirection+0x1ba>
     ac2:	6d 81       	ldd	r22, Y+5	; 0x05
     ac4:	7e 81       	ldd	r23, Y+6	; 0x06
     ac6:	62 30       	cpi	r22, 0x02	; 2
     ac8:	71 05       	cpc	r23, r1
     aca:	09 f4       	brne	.+2      	; 0xace <DIO_enuSetPinDirection+0x66>
     acc:	59 c0       	rjmp	.+178    	; 0xb80 <DIO_enuSetPinDirection+0x118>
     ace:	8d 81       	ldd	r24, Y+5	; 0x05
     ad0:	9e 81       	ldd	r25, Y+6	; 0x06
     ad2:	83 30       	cpi	r24, 0x03	; 3
     ad4:	91 05       	cpc	r25, r1
     ad6:	09 f4       	brne	.+2      	; 0xada <DIO_enuSetPinDirection+0x72>
     ad8:	7c c0       	rjmp	.+248    	; 0xbd2 <DIO_enuSetPinDirection+0x16a>
     ada:	a3 c0       	rjmp	.+326    	; 0xc22 <DIO_enuSetPinDirection+0x1ba>
				{
					case DIO_PORTA:
						DDRA &=~(1 << Copy_u8PinID);
     adc:	aa e3       	ldi	r26, 0x3A	; 58
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	ea e3       	ldi	r30, 0x3A	; 58
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	80 81       	ld	r24, Z
     ae6:	48 2f       	mov	r20, r24
     ae8:	8b 81       	ldd	r24, Y+3	; 0x03
     aea:	28 2f       	mov	r18, r24
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	02 c0       	rjmp	.+4      	; 0xaf8 <DIO_enuSetPinDirection+0x90>
     af4:	88 0f       	add	r24, r24
     af6:	99 1f       	adc	r25, r25
     af8:	2a 95       	dec	r18
     afa:	e2 f7       	brpl	.-8      	; 0xaf4 <DIO_enuSetPinDirection+0x8c>
     afc:	80 95       	com	r24
     afe:	84 23       	and	r24, r20
     b00:	8c 93       	st	X, r24
						DDRA |= (Copy_u8Value << Copy_u8PinID);
     b02:	aa e3       	ldi	r26, 0x3A	; 58
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	ea e3       	ldi	r30, 0x3A	; 58
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	48 2f       	mov	r20, r24
     b0e:	8c 81       	ldd	r24, Y+4	; 0x04
     b10:	28 2f       	mov	r18, r24
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	8b 81       	ldd	r24, Y+3	; 0x03
     b16:	88 2f       	mov	r24, r24
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	b9 01       	movw	r22, r18
     b1c:	02 c0       	rjmp	.+4      	; 0xb22 <DIO_enuSetPinDirection+0xba>
     b1e:	66 0f       	add	r22, r22
     b20:	77 1f       	adc	r23, r23
     b22:	8a 95       	dec	r24
     b24:	e2 f7       	brpl	.-8      	; 0xb1e <DIO_enuSetPinDirection+0xb6>
     b26:	cb 01       	movw	r24, r22
     b28:	84 2b       	or	r24, r20
     b2a:	8c 93       	st	X, r24
     b2c:	7a c0       	rjmp	.+244    	; 0xc22 <DIO_enuSetPinDirection+0x1ba>
					break;

					case DIO_PORTB:
						DDRB &=~(1 << Copy_u8PinID);
     b2e:	a7 e3       	ldi	r26, 0x37	; 55
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	e7 e3       	ldi	r30, 0x37	; 55
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	48 2f       	mov	r20, r24
     b3a:	8b 81       	ldd	r24, Y+3	; 0x03
     b3c:	28 2f       	mov	r18, r24
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <DIO_enuSetPinDirection+0xe2>
     b46:	88 0f       	add	r24, r24
     b48:	99 1f       	adc	r25, r25
     b4a:	2a 95       	dec	r18
     b4c:	e2 f7       	brpl	.-8      	; 0xb46 <DIO_enuSetPinDirection+0xde>
     b4e:	80 95       	com	r24
     b50:	84 23       	and	r24, r20
     b52:	8c 93       	st	X, r24
					    DDRB |= (Copy_u8Value << Copy_u8PinID);
     b54:	a7 e3       	ldi	r26, 0x37	; 55
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	e7 e3       	ldi	r30, 0x37	; 55
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	48 2f       	mov	r20, r24
     b60:	8c 81       	ldd	r24, Y+4	; 0x04
     b62:	28 2f       	mov	r18, r24
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	8b 81       	ldd	r24, Y+3	; 0x03
     b68:	88 2f       	mov	r24, r24
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	b9 01       	movw	r22, r18
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <DIO_enuSetPinDirection+0x10c>
     b70:	66 0f       	add	r22, r22
     b72:	77 1f       	adc	r23, r23
     b74:	8a 95       	dec	r24
     b76:	e2 f7       	brpl	.-8      	; 0xb70 <DIO_enuSetPinDirection+0x108>
     b78:	cb 01       	movw	r24, r22
     b7a:	84 2b       	or	r24, r20
     b7c:	8c 93       	st	X, r24
     b7e:	51 c0       	rjmp	.+162    	; 0xc22 <DIO_enuSetPinDirection+0x1ba>
					break;

					case DIO_PORTC:
						DDRC &=~(1 << Copy_u8PinID);
     b80:	a4 e3       	ldi	r26, 0x34	; 52
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e4 e3       	ldi	r30, 0x34	; 52
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	48 2f       	mov	r20, r24
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	28 2f       	mov	r18, r24
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <DIO_enuSetPinDirection+0x134>
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	2a 95       	dec	r18
     b9e:	e2 f7       	brpl	.-8      	; 0xb98 <DIO_enuSetPinDirection+0x130>
     ba0:	80 95       	com	r24
     ba2:	84 23       	and	r24, r20
     ba4:	8c 93       	st	X, r24
						DDRC|= (Copy_u8Value << Copy_u8PinID);
     ba6:	a4 e3       	ldi	r26, 0x34	; 52
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	e4 e3       	ldi	r30, 0x34	; 52
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8c 81       	ldd	r24, Y+4	; 0x04
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	8b 81       	ldd	r24, Y+3	; 0x03
     bba:	88 2f       	mov	r24, r24
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	b9 01       	movw	r22, r18
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <DIO_enuSetPinDirection+0x15e>
     bc2:	66 0f       	add	r22, r22
     bc4:	77 1f       	adc	r23, r23
     bc6:	8a 95       	dec	r24
     bc8:	e2 f7       	brpl	.-8      	; 0xbc2 <DIO_enuSetPinDirection+0x15a>
     bca:	cb 01       	movw	r24, r22
     bcc:	84 2b       	or	r24, r20
     bce:	8c 93       	st	X, r24
     bd0:	28 c0       	rjmp	.+80     	; 0xc22 <DIO_enuSetPinDirection+0x1ba>
					break;

					case DIO_PORTD:
						DDRD &=~(1 << Copy_u8PinID);
     bd2:	a1 e3       	ldi	r26, 0x31	; 49
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e1 e3       	ldi	r30, 0x31	; 49
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	48 2f       	mov	r20, r24
     bde:	8b 81       	ldd	r24, Y+3	; 0x03
     be0:	28 2f       	mov	r18, r24
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	02 c0       	rjmp	.+4      	; 0xbee <DIO_enuSetPinDirection+0x186>
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	2a 95       	dec	r18
     bf0:	e2 f7       	brpl	.-8      	; 0xbea <DIO_enuSetPinDirection+0x182>
     bf2:	80 95       	com	r24
     bf4:	84 23       	and	r24, r20
     bf6:	8c 93       	st	X, r24
						DDRD |= (Copy_u8Value << Copy_u8PinID);
     bf8:	a1 e3       	ldi	r26, 0x31	; 49
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e1 e3       	ldi	r30, 0x31	; 49
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	48 2f       	mov	r20, r24
     c04:	8c 81       	ldd	r24, Y+4	; 0x04
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	8b 81       	ldd	r24, Y+3	; 0x03
     c0c:	88 2f       	mov	r24, r24
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	b9 01       	movw	r22, r18
     c12:	02 c0       	rjmp	.+4      	; 0xc18 <DIO_enuSetPinDirection+0x1b0>
     c14:	66 0f       	add	r22, r22
     c16:	77 1f       	adc	r23, r23
     c18:	8a 95       	dec	r24
     c1a:	e2 f7       	brpl	.-8      	; 0xc14 <DIO_enuSetPinDirection+0x1ac>
     c1c:	cb 01       	movw	r24, r22
     c1e:	84 2b       	or	r24, r20
     c20:	8c 93       	st	X, r24
					break;
				}
				Local_enuErrorState = ES_OK;
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	89 83       	std	Y+1, r24	; 0x01
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <DIO_enuSetPinDirection+0x1c4>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
     c28:	83 e0       	ldi	r24, 0x03	; 3
     c2a:	89 83       	std	Y+1, r24	; 0x01
			}

			return Local_enuErrorState;
     c2c:	89 81       	ldd	r24, Y+1	; 0x01

}
     c2e:	26 96       	adiw	r28, 0x06	; 6
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	f8 94       	cli
     c34:	de bf       	out	0x3e, r29	; 62
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	cd bf       	out	0x3d, r28	; 61
     c3a:	cf 91       	pop	r28
     c3c:	df 91       	pop	r29
     c3e:	08 95       	ret

00000c40 <DIO_enuSetPinVal>:

ES_t DIO_enuSetPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID, u8 Copy_u8Value){
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	00 d0       	rcall	.+0      	; 0xc46 <DIO_enuSetPinVal+0x6>
     c46:	00 d0       	rcall	.+0      	; 0xc48 <DIO_enuSetPinVal+0x8>
     c48:	00 d0       	rcall	.+0      	; 0xc4a <DIO_enuSetPinVal+0xa>
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	8a 83       	std	Y+2, r24	; 0x02
     c50:	6b 83       	std	Y+3, r22	; 0x03
     c52:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     c54:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_PORTD	&& Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= HIGH){
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	84 30       	cpi	r24, 0x04	; 4
     c5a:	08 f0       	brcs	.+2      	; 0xc5e <DIO_enuSetPinVal+0x1e>
     c5c:	d1 c0       	rjmp	.+418    	; 0xe00 <DIO_enuSetPinVal+0x1c0>
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	88 30       	cpi	r24, 0x08	; 8
     c62:	08 f0       	brcs	.+2      	; 0xc66 <DIO_enuSetPinVal+0x26>
     c64:	cd c0       	rjmp	.+410    	; 0xe00 <DIO_enuSetPinVal+0x1c0>
     c66:	8c 81       	ldd	r24, Y+4	; 0x04
     c68:	82 30       	cpi	r24, 0x02	; 2
     c6a:	08 f0       	brcs	.+2      	; 0xc6e <DIO_enuSetPinVal+0x2e>
     c6c:	c9 c0       	rjmp	.+402    	; 0xe00 <DIO_enuSetPinVal+0x1c0>
		switch(Copy_u8PortID)
     c6e:	8a 81       	ldd	r24, Y+2	; 0x02
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	3e 83       	std	Y+6, r19	; 0x06
     c76:	2d 83       	std	Y+5, r18	; 0x05
     c78:	6d 81       	ldd	r22, Y+5	; 0x05
     c7a:	7e 81       	ldd	r23, Y+6	; 0x06
     c7c:	61 30       	cpi	r22, 0x01	; 1
     c7e:	71 05       	cpc	r23, r1
     c80:	09 f4       	brne	.+2      	; 0xc84 <DIO_enuSetPinVal+0x44>
     c82:	41 c0       	rjmp	.+130    	; 0xd06 <DIO_enuSetPinVal+0xc6>
     c84:	8d 81       	ldd	r24, Y+5	; 0x05
     c86:	9e 81       	ldd	r25, Y+6	; 0x06
     c88:	82 30       	cpi	r24, 0x02	; 2
     c8a:	91 05       	cpc	r25, r1
     c8c:	34 f4       	brge	.+12     	; 0xc9a <DIO_enuSetPinVal+0x5a>
     c8e:	2d 81       	ldd	r18, Y+5	; 0x05
     c90:	3e 81       	ldd	r19, Y+6	; 0x06
     c92:	21 15       	cp	r18, r1
     c94:	31 05       	cpc	r19, r1
     c96:	71 f0       	breq	.+28     	; 0xcb4 <DIO_enuSetPinVal+0x74>
     c98:	b0 c0       	rjmp	.+352    	; 0xdfa <DIO_enuSetPinVal+0x1ba>
     c9a:	6d 81       	ldd	r22, Y+5	; 0x05
     c9c:	7e 81       	ldd	r23, Y+6	; 0x06
     c9e:	62 30       	cpi	r22, 0x02	; 2
     ca0:	71 05       	cpc	r23, r1
     ca2:	09 f4       	brne	.+2      	; 0xca6 <DIO_enuSetPinVal+0x66>
     ca4:	59 c0       	rjmp	.+178    	; 0xd58 <DIO_enuSetPinVal+0x118>
     ca6:	8d 81       	ldd	r24, Y+5	; 0x05
     ca8:	9e 81       	ldd	r25, Y+6	; 0x06
     caa:	83 30       	cpi	r24, 0x03	; 3
     cac:	91 05       	cpc	r25, r1
     cae:	09 f4       	brne	.+2      	; 0xcb2 <DIO_enuSetPinVal+0x72>
     cb0:	7c c0       	rjmp	.+248    	; 0xdaa <DIO_enuSetPinVal+0x16a>
     cb2:	a3 c0       	rjmp	.+326    	; 0xdfa <DIO_enuSetPinVal+0x1ba>
					{
						case DIO_PORTA:
							PORTA &=~(1 << Copy_u8PinID);
     cb4:	ab e3       	ldi	r26, 0x3B	; 59
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	eb e3       	ldi	r30, 0x3B	; 59
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	48 2f       	mov	r20, r24
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <DIO_enuSetPinVal+0x90>
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	2a 95       	dec	r18
     cd2:	e2 f7       	brpl	.-8      	; 0xccc <DIO_enuSetPinVal+0x8c>
     cd4:	80 95       	com	r24
     cd6:	84 23       	and	r24, r20
     cd8:	8c 93       	st	X, r24
							PORTA |= (Copy_u8Value << Copy_u8PinID);
     cda:	ab e3       	ldi	r26, 0x3B	; 59
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	eb e3       	ldi	r30, 0x3B	; 59
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	48 2f       	mov	r20, r24
     ce6:	8c 81       	ldd	r24, Y+4	; 0x04
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	88 2f       	mov	r24, r24
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	b9 01       	movw	r22, r18
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <DIO_enuSetPinVal+0xba>
     cf6:	66 0f       	add	r22, r22
     cf8:	77 1f       	adc	r23, r23
     cfa:	8a 95       	dec	r24
     cfc:	e2 f7       	brpl	.-8      	; 0xcf6 <DIO_enuSetPinVal+0xb6>
     cfe:	cb 01       	movw	r24, r22
     d00:	84 2b       	or	r24, r20
     d02:	8c 93       	st	X, r24
     d04:	7a c0       	rjmp	.+244    	; 0xdfa <DIO_enuSetPinVal+0x1ba>
						break;

						case DIO_PORTB:
							PORTB &=~(1 << Copy_u8PinID);
     d06:	a8 e3       	ldi	r26, 0x38	; 56
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e8 e3       	ldi	r30, 0x38	; 56
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	48 2f       	mov	r20, r24
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <DIO_enuSetPinVal+0xe2>
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	2a 95       	dec	r18
     d24:	e2 f7       	brpl	.-8      	; 0xd1e <DIO_enuSetPinVal+0xde>
     d26:	80 95       	com	r24
     d28:	84 23       	and	r24, r20
     d2a:	8c 93       	st	X, r24
							PORTB |= (Copy_u8Value << Copy_u8PinID);
     d2c:	a8 e3       	ldi	r26, 0x38	; 56
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e8 e3       	ldi	r30, 0x38	; 56
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	48 2f       	mov	r20, r24
     d38:	8c 81       	ldd	r24, Y+4	; 0x04
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	88 2f       	mov	r24, r24
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	b9 01       	movw	r22, r18
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <DIO_enuSetPinVal+0x10c>
     d48:	66 0f       	add	r22, r22
     d4a:	77 1f       	adc	r23, r23
     d4c:	8a 95       	dec	r24
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <DIO_enuSetPinVal+0x108>
     d50:	cb 01       	movw	r24, r22
     d52:	84 2b       	or	r24, r20
     d54:	8c 93       	st	X, r24
     d56:	51 c0       	rjmp	.+162    	; 0xdfa <DIO_enuSetPinVal+0x1ba>
						break;

						case DIO_PORTC:
							PORTC &=~(1 << Copy_u8PinID);
     d58:	a5 e3       	ldi	r26, 0x35	; 53
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e5 e3       	ldi	r30, 0x35	; 53
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	48 2f       	mov	r20, r24
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_enuSetPinVal+0x134>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	2a 95       	dec	r18
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_enuSetPinVal+0x130>
     d78:	80 95       	com	r24
     d7a:	84 23       	and	r24, r20
     d7c:	8c 93       	st	X, r24
							PORTC|= (Copy_u8Value << Copy_u8PinID);
     d7e:	a5 e3       	ldi	r26, 0x35	; 53
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e5 e3       	ldi	r30, 0x35	; 53
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	48 2f       	mov	r20, r24
     d8a:	8c 81       	ldd	r24, Y+4	; 0x04
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	88 2f       	mov	r24, r24
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	b9 01       	movw	r22, r18
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <DIO_enuSetPinVal+0x15e>
     d9a:	66 0f       	add	r22, r22
     d9c:	77 1f       	adc	r23, r23
     d9e:	8a 95       	dec	r24
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <DIO_enuSetPinVal+0x15a>
     da2:	cb 01       	movw	r24, r22
     da4:	84 2b       	or	r24, r20
     da6:	8c 93       	st	X, r24
     da8:	28 c0       	rjmp	.+80     	; 0xdfa <DIO_enuSetPinVal+0x1ba>
						break;

						case DIO_PORTD:
							PORTD &=~(1 << Copy_u8PinID);
     daa:	a2 e3       	ldi	r26, 0x32	; 50
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e2 e3       	ldi	r30, 0x32	; 50
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	48 2f       	mov	r20, r24
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <DIO_enuSetPinVal+0x186>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	2a 95       	dec	r18
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <DIO_enuSetPinVal+0x182>
     dca:	80 95       	com	r24
     dcc:	84 23       	and	r24, r20
     dce:	8c 93       	st	X, r24
							PORTD |= (Copy_u8Value << Copy_u8PinID);
     dd0:	a2 e3       	ldi	r26, 0x32	; 50
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e2 e3       	ldi	r30, 0x32	; 50
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	48 2f       	mov	r20, r24
     ddc:	8c 81       	ldd	r24, Y+4	; 0x04
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	88 2f       	mov	r24, r24
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	b9 01       	movw	r22, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <DIO_enuSetPinVal+0x1b0>
     dec:	66 0f       	add	r22, r22
     dee:	77 1f       	adc	r23, r23
     df0:	8a 95       	dec	r24
     df2:	e2 f7       	brpl	.-8      	; 0xdec <DIO_enuSetPinVal+0x1ac>
     df4:	cb 01       	movw	r24, r22
     df6:	84 2b       	or	r24, r20
     df8:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorState = ES_OK;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_enuSetPinVal+0x1c4>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
     e00:	83 e0       	ldi	r24, 0x03	; 3
     e02:	89 83       	std	Y+1, r24	; 0x01
				}

				return Local_enuErrorState;
     e04:	89 81       	ldd	r24, Y+1	; 0x01
}
     e06:	26 96       	adiw	r28, 0x06	; 6
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret

00000e18 <DIO_enuGetPinVal>:

ES_t DIO_enuGetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID,u8 *Copy_pu8Value){
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	27 97       	sbiw	r28, 0x07	; 7
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	8a 83       	std	Y+2, r24	; 0x02
     e2e:	6b 83       	std	Y+3, r22	; 0x03
     e30:	5d 83       	std	Y+5, r21	; 0x05
     e32:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     e34:	19 82       	std	Y+1, r1	; 0x01

	 if(Copy_pu8Value!=NULL){
     e36:	8c 81       	ldd	r24, Y+4	; 0x04
     e38:	9d 81       	ldd	r25, Y+5	; 0x05
     e3a:	00 97       	sbiw	r24, 0x00	; 0
     e3c:	09 f4       	brne	.+2      	; 0xe40 <DIO_enuGetPinVal+0x28>
     e3e:	7a c0       	rjmp	.+244    	; 0xf34 <DIO_enuGetPinVal+0x11c>
			if(Copy_u8PortID <= DIO_PORTD)
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	84 30       	cpi	r24, 0x04	; 4
     e44:	08 f0       	brcs	.+2      	; 0xe48 <DIO_enuGetPinVal+0x30>
     e46:	73 c0       	rjmp	.+230    	; 0xf2e <DIO_enuGetPinVal+0x116>
			{
				switch(Copy_u8PortID)
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	3f 83       	std	Y+7, r19	; 0x07
     e50:	2e 83       	std	Y+6, r18	; 0x06
     e52:	4e 81       	ldd	r20, Y+6	; 0x06
     e54:	5f 81       	ldd	r21, Y+7	; 0x07
     e56:	41 30       	cpi	r20, 0x01	; 1
     e58:	51 05       	cpc	r21, r1
     e5a:	59 f1       	breq	.+86     	; 0xeb2 <DIO_enuGetPinVal+0x9a>
     e5c:	8e 81       	ldd	r24, Y+6	; 0x06
     e5e:	9f 81       	ldd	r25, Y+7	; 0x07
     e60:	82 30       	cpi	r24, 0x02	; 2
     e62:	91 05       	cpc	r25, r1
     e64:	34 f4       	brge	.+12     	; 0xe72 <DIO_enuGetPinVal+0x5a>
     e66:	2e 81       	ldd	r18, Y+6	; 0x06
     e68:	3f 81       	ldd	r19, Y+7	; 0x07
     e6a:	21 15       	cp	r18, r1
     e6c:	31 05       	cpc	r19, r1
     e6e:	69 f0       	breq	.+26     	; 0xe8a <DIO_enuGetPinVal+0x72>
     e70:	5b c0       	rjmp	.+182    	; 0xf28 <DIO_enuGetPinVal+0x110>
     e72:	4e 81       	ldd	r20, Y+6	; 0x06
     e74:	5f 81       	ldd	r21, Y+7	; 0x07
     e76:	42 30       	cpi	r20, 0x02	; 2
     e78:	51 05       	cpc	r21, r1
     e7a:	79 f1       	breq	.+94     	; 0xeda <DIO_enuGetPinVal+0xc2>
     e7c:	8e 81       	ldd	r24, Y+6	; 0x06
     e7e:	9f 81       	ldd	r25, Y+7	; 0x07
     e80:	83 30       	cpi	r24, 0x03	; 3
     e82:	91 05       	cpc	r25, r1
     e84:	09 f4       	brne	.+2      	; 0xe88 <DIO_enuGetPinVal+0x70>
     e86:	3d c0       	rjmp	.+122    	; 0xf02 <DIO_enuGetPinVal+0xea>
     e88:	4f c0       	rjmp	.+158    	; 0xf28 <DIO_enuGetPinVal+0x110>
				{
					case DIO_PORTA:
					 *Copy_pu8Value=((PINA >> Copy_u8PinID) & 1);
     e8a:	e9 e3       	ldi	r30, 0x39	; 57
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	88 2f       	mov	r24, r24
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	a9 01       	movw	r20, r18
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <DIO_enuGetPinVal+0x8a>
     e9e:	55 95       	asr	r21
     ea0:	47 95       	ror	r20
     ea2:	8a 95       	dec	r24
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <DIO_enuGetPinVal+0x86>
     ea6:	ca 01       	movw	r24, r20
     ea8:	81 70       	andi	r24, 0x01	; 1
     eaa:	ec 81       	ldd	r30, Y+4	; 0x04
     eac:	fd 81       	ldd	r31, Y+5	; 0x05
     eae:	80 83       	st	Z, r24
     eb0:	3b c0       	rjmp	.+118    	; 0xf28 <DIO_enuGetPinVal+0x110>
					break;

					case DIO_PORTB:
					 *Copy_pu8Value=((PINB >> Copy_u8PinID) & 1);
     eb2:	e6 e3       	ldi	r30, 0x36	; 54
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	88 2f       	mov	r24, r24
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	a9 01       	movw	r20, r18
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <DIO_enuGetPinVal+0xb2>
     ec6:	55 95       	asr	r21
     ec8:	47 95       	ror	r20
     eca:	8a 95       	dec	r24
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <DIO_enuGetPinVal+0xae>
     ece:	ca 01       	movw	r24, r20
     ed0:	81 70       	andi	r24, 0x01	; 1
     ed2:	ec 81       	ldd	r30, Y+4	; 0x04
     ed4:	fd 81       	ldd	r31, Y+5	; 0x05
     ed6:	80 83       	st	Z, r24
     ed8:	27 c0       	rjmp	.+78     	; 0xf28 <DIO_enuGetPinVal+0x110>
					break;

					case DIO_PORTC:
					 *Copy_pu8Value=((PINC >> Copy_u8PinID) & 1);
     eda:	e3 e3       	ldi	r30, 0x33	; 51
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	88 2f       	mov	r24, r24
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	a9 01       	movw	r20, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <DIO_enuGetPinVal+0xda>
     eee:	55 95       	asr	r21
     ef0:	47 95       	ror	r20
     ef2:	8a 95       	dec	r24
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <DIO_enuGetPinVal+0xd6>
     ef6:	ca 01       	movw	r24, r20
     ef8:	81 70       	andi	r24, 0x01	; 1
     efa:	ec 81       	ldd	r30, Y+4	; 0x04
     efc:	fd 81       	ldd	r31, Y+5	; 0x05
     efe:	80 83       	st	Z, r24
     f00:	13 c0       	rjmp	.+38     	; 0xf28 <DIO_enuGetPinVal+0x110>
					break;

					case DIO_PORTD:
				    *Copy_pu8Value=((PIND >> Copy_u8PinID) & 1);
     f02:	e0 e3       	ldi	r30, 0x30	; 48
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	88 2f       	mov	r24, r24
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	a9 01       	movw	r20, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_enuGetPinVal+0x102>
     f16:	55 95       	asr	r21
     f18:	47 95       	ror	r20
     f1a:	8a 95       	dec	r24
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_enuGetPinVal+0xfe>
     f1e:	ca 01       	movw	r24, r20
     f20:	81 70       	andi	r24, 0x01	; 1
     f22:	ec 81       	ldd	r30, Y+4	; 0x04
     f24:	fd 81       	ldd	r31, Y+5	; 0x05
     f26:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorState = ES_OK;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	89 83       	std	Y+1, r24	; 0x01
     f2c:	05 c0       	rjmp	.+10     	; 0xf38 <DIO_enuGetPinVal+0x120>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
     f2e:	83 e0       	ldi	r24, 0x03	; 3
     f30:	89 83       	std	Y+1, r24	; 0x01
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <DIO_enuGetPinVal+0x120>
			}
	 }
	 else{
		 Local_enuErrorState = ES_NULL_POINTER;
     f34:	82 e0       	ldi	r24, 0x02	; 2
     f36:	89 83       	std	Y+1, r24	; 0x01
	 }
			return Local_enuErrorState;
     f38:	89 81       	ldd	r24, Y+1	; 0x01


}
     f3a:	27 96       	adiw	r28, 0x07	; 7
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <DIO_enuTogPinVal>:
ES_t DIO_enuTogPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID){
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	00 d0       	rcall	.+0      	; 0xf52 <DIO_enuTogPinVal+0x6>
     f52:	00 d0       	rcall	.+0      	; 0xf54 <DIO_enuTogPinVal+0x8>
     f54:	0f 92       	push	r0
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	8a 83       	std	Y+2, r24	; 0x02
     f5c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     f5e:	19 82       	std	Y+1, r1	; 0x01

				if(Copy_u8PortID <= DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	84 30       	cpi	r24, 0x04	; 4
     f64:	08 f0       	brcs	.+2      	; 0xf68 <DIO_enuTogPinVal+0x1c>
     f66:	75 c0       	rjmp	.+234    	; 0x1052 <DIO_enuTogPinVal+0x106>
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	88 30       	cpi	r24, 0x08	; 8
     f6c:	08 f0       	brcs	.+2      	; 0xf70 <DIO_enuTogPinVal+0x24>
     f6e:	71 c0       	rjmp	.+226    	; 0x1052 <DIO_enuTogPinVal+0x106>
				{
					switch(Copy_u8PortID)
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	3d 83       	std	Y+5, r19	; 0x05
     f78:	2c 83       	std	Y+4, r18	; 0x04
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	9d 81       	ldd	r25, Y+5	; 0x05
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	91 05       	cpc	r25, r1
     f82:	49 f1       	breq	.+82     	; 0xfd6 <DIO_enuTogPinVal+0x8a>
     f84:	2c 81       	ldd	r18, Y+4	; 0x04
     f86:	3d 81       	ldd	r19, Y+5	; 0x05
     f88:	22 30       	cpi	r18, 0x02	; 2
     f8a:	31 05       	cpc	r19, r1
     f8c:	2c f4       	brge	.+10     	; 0xf98 <DIO_enuTogPinVal+0x4c>
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	9d 81       	ldd	r25, Y+5	; 0x05
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	61 f0       	breq	.+24     	; 0xfae <DIO_enuTogPinVal+0x62>
     f96:	5a c0       	rjmp	.+180    	; 0x104c <DIO_enuTogPinVal+0x100>
     f98:	2c 81       	ldd	r18, Y+4	; 0x04
     f9a:	3d 81       	ldd	r19, Y+5	; 0x05
     f9c:	22 30       	cpi	r18, 0x02	; 2
     f9e:	31 05       	cpc	r19, r1
     fa0:	71 f1       	breq	.+92     	; 0xffe <DIO_enuTogPinVal+0xb2>
     fa2:	8c 81       	ldd	r24, Y+4	; 0x04
     fa4:	9d 81       	ldd	r25, Y+5	; 0x05
     fa6:	83 30       	cpi	r24, 0x03	; 3
     fa8:	91 05       	cpc	r25, r1
     faa:	e9 f1       	breq	.+122    	; 0x1026 <DIO_enuTogPinVal+0xda>
     fac:	4f c0       	rjmp	.+158    	; 0x104c <DIO_enuTogPinVal+0x100>
					{
						case DIO_PORTA:
						 PORTA^=(1 << Copy_u8PinID);
     fae:	ab e3       	ldi	r26, 0x3B	; 59
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	eb e3       	ldi	r30, 0x3B	; 59
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <DIO_enuTogPinVal+0x80>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <DIO_enuTogPinVal+0x7c>
     fd0:	84 27       	eor	r24, r20
     fd2:	8c 93       	st	X, r24
     fd4:	3b c0       	rjmp	.+118    	; 0x104c <DIO_enuTogPinVal+0x100>
						break;

						case DIO_PORTB:
						 PORTB^=(1 << Copy_u8PinID);
     fd6:	a8 e3       	ldi	r26, 0x38	; 56
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e8 e3       	ldi	r30, 0x38	; 56
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 2e       	mov	r0, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <DIO_enuTogPinVal+0xa8>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <DIO_enuTogPinVal+0xa4>
     ff8:	84 27       	eor	r24, r20
     ffa:	8c 93       	st	X, r24
     ffc:	27 c0       	rjmp	.+78     	; 0x104c <DIO_enuTogPinVal+0x100>
						break;

						case DIO_PORTC:
						 PORTC^=(1 << Copy_u8PinID);
     ffe:	a5 e3       	ldi	r26, 0x35	; 53
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e5 e3       	ldi	r30, 0x35	; 53
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	48 2f       	mov	r20, r24
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 2e       	mov	r0, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_enuTogPinVal+0xd0>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	0a 94       	dec	r0
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_enuTogPinVal+0xcc>
    1020:	84 27       	eor	r24, r20
    1022:	8c 93       	st	X, r24
    1024:	13 c0       	rjmp	.+38     	; 0x104c <DIO_enuTogPinVal+0x100>
						break;

						case DIO_PORTD:
						 PORTD^=(1 << Copy_u8PinID);
    1026:	a2 e3       	ldi	r26, 0x32	; 50
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e2 e3       	ldi	r30, 0x32	; 50
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_enuTogPinVal+0xf8>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_enuTogPinVal+0xf4>
    1048:	84 27       	eor	r24, r20
    104a:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorState = ES_OK;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	89 83       	std	Y+1, r24	; 0x01
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <DIO_enuTogPinVal+0x10a>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
    1052:	83 e0       	ldi	r24, 0x03	; 3
    1054:	89 83       	std	Y+1, r24	; 0x01
				}

				return Local_enuErrorState;
    1056:	89 81       	ldd	r24, Y+1	; 0x01

	}
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <main>:
extern EXTI_t EXTI_AstrEXTIConfig[3];

volatile void Toggle_Led(void *ptr);

int main(void)
{
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	0f 92       	push	r0
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62

	DIO_enuSetPinDirection(DIO_u8PORTD, DIO_u8PIN2, DIO_u8INPUT);
    1072:	83 e0       	ldi	r24, 0x03	; 3
    1074:	62 e0       	ldi	r22, 0x02	; 2
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_enuSetPinDirection>
	DIO_enuSetPinVal(DIO_u8PORTD, DIO_u8PIN2, DIO_u8PULLUP);
    107c:	83 e0       	ldi	r24, 0x03	; 3
    107e:	62 e0       	ldi	r22, 0x02	; 2
    1080:	41 e0       	ldi	r20, 0x01	; 1
    1082:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_enuSetPinVal>
	DIO_enuSetPinDirection(DIO_u8PORTB, DIO_u8PIN0, DIO_u8OUTPUT);
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	41 e0       	ldi	r20, 0x01	; 1
    108c:	0e 94 34 05 	call	0xa68	; 0xa68 <DIO_enuSetPinDirection>



	EXTI_enuInit(EXTI_AstrEXTIConfig);
    1090:	80 e6       	ldi	r24, 0x60	; 96
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 78 00 	call	0xf0	; 0xf0 <EXTI_enuInit>

	u8 X= 0;
    1098:	19 82       	std	Y+1, r1	; 0x01

	 EXTI_enuCallBack(&Toggle_Led, &X, 0);
    109a:	81 e6       	ldi	r24, 0x61	; 97
    109c:	98 e0       	ldi	r25, 0x08	; 8
    109e:	9e 01       	movw	r18, r28
    10a0:	2f 5f       	subi	r18, 0xFF	; 255
    10a2:	3f 4f       	sbci	r19, 0xFF	; 255
    10a4:	b9 01       	movw	r22, r18
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <EXTI_enuCallBack>

	/* Enable INT0 */
	EXTI_enuEnableINT(INT0);
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	0e 94 7d 02 	call	0x4fa	; 0x4fa <EXTI_enuEnableINT>

	/* enable global interrupt */
	GIE_enuGloable_Interrupt_Enable();
    10b2:	0e 94 49 00 	call	0x92	; 0x92 <GIE_enuGloable_Interrupt_Enable>

	DIO_enuSetPinVal(DIO_u8PORTB,DIO_u8PIN0, DIO_u8LOW);
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	0e 94 20 06 	call	0xc40	; 0xc40 <DIO_enuSetPinVal>
    10c0:	ff cf       	rjmp	.-2      	; 0x10c0 <main+0x58>

000010c2 <Toggle_Led>:
    {
    }
}

volatile void Toggle_Led(void *ptr)
{
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <Toggle_Led+0x6>
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	9a 83       	std	Y+2, r25	; 0x02
    10ce:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuTogPinVal(DIO_u8PORTB,DIO_u8PIN0);
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_enuTogPinVal>
}
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <_exit>:
    10e2:	f8 94       	cli

000010e4 <__stop_program>:
    10e4:	ff cf       	rjmp	.-2      	; 0x10e4 <__stop_program>
