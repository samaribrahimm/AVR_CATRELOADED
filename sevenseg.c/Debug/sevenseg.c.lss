
sevenseg.c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001f2  00000266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000002f4  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000034a  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
// 7seg and sw
#include "stdTypes.h"
#include "Registers.h"


int main(void){
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	64 97       	sbiw	r28, 0x14	; 20
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	 u8 segcthd[]= {0x3f,0x06,0x5b,
			        0x4f,0x66,0x6d,
				    0x7d,0x07,0x7f,
	                0x6f};
  96:	ce 01       	movw	r24, r28
  98:	06 96       	adiw	r24, 0x06	; 6
  9a:	99 8b       	std	Y+17, r25	; 0x11
  9c:	88 8b       	std	Y+16, r24	; 0x10
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	fb 8b       	std	Y+19, r31	; 0x13
  a4:	ea 8b       	std	Y+18, r30	; 0x12
  a6:	fa e0       	ldi	r31, 0x0A	; 10
  a8:	fc 8b       	std	Y+20, r31	; 0x14
  aa:	ea 89       	ldd	r30, Y+18	; 0x12
  ac:	fb 89       	ldd	r31, Y+19	; 0x13
  ae:	00 80       	ld	r0, Z
  b0:	8a 89       	ldd	r24, Y+18	; 0x12
  b2:	9b 89       	ldd	r25, Y+19	; 0x13
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	9b 8b       	std	Y+19, r25	; 0x13
  b8:	8a 8b       	std	Y+18, r24	; 0x12
  ba:	e8 89       	ldd	r30, Y+16	; 0x10
  bc:	f9 89       	ldd	r31, Y+17	; 0x11
  be:	00 82       	st	Z, r0
  c0:	88 89       	ldd	r24, Y+16	; 0x10
  c2:	99 89       	ldd	r25, Y+17	; 0x11
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	99 8b       	std	Y+17, r25	; 0x11
  c8:	88 8b       	std	Y+16, r24	; 0x10
  ca:	9c 89       	ldd	r25, Y+20	; 0x14
  cc:	91 50       	subi	r25, 0x01	; 1
  ce:	9c 8b       	std	Y+20, r25	; 0x14
  d0:	ec 89       	ldd	r30, Y+20	; 0x14
  d2:	ee 23       	and	r30, r30
  d4:	51 f7       	brne	.-44     	; 0xaa <main+0x28>
	s8 button1,button2,counter=0,one,deci;
  d6:	1b 82       	std	Y+3, r1	; 0x03

	// sw is input ,pullup
	DDRC=0x00;
  d8:	e4 e3       	ldi	r30, 0x34	; 52
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	10 82       	st	Z, r1
	PORTC=0xff;
  de:	e5 e3       	ldi	r30, 0x35	; 53
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	80 83       	st	Z, r24
	// output ,is off FIRST 7SEG
	DDRA=0xff;
  e6:	ea e3       	ldi	r30, 0x3A	; 58
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	80 83       	st	Z, r24
	PORTA=0x00;
  ee:	eb e3       	ldi	r30, 0x3B	; 59
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	10 82       	st	Z, r1
	// output ,is off second 7SEG
	DDRB=0xff;
  f4:	e7 e3       	ldi	r30, 0x37	; 55
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	80 83       	st	Z, r24


	while(1){

		button1 =((PINC>>0)&1);
  fc:	e3 e3       	ldi	r30, 0x33	; 51
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	81 70       	andi	r24, 0x01	; 1
 104:	8d 83       	std	Y+5, r24	; 0x05
		button2 =((PINC>>1)&1);
 106:	e3 e3       	ldi	r30, 0x33	; 51
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	86 95       	lsr	r24
 10e:	81 70       	andi	r24, 0x01	; 1
 110:	8c 83       	std	Y+4, r24	; 0x04
		if(button1==0){
 112:	8d 81       	ldd	r24, Y+5	; 0x05
 114:	88 23       	and	r24, r24
 116:	69 f4       	brne	.+26     	; 0x132 <main+0xb0>
			counter++;
 118:	8b 81       	ldd	r24, Y+3	; 0x03
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	8b 83       	std	Y+3, r24	; 0x03
			 while(((PINC>>0)&1)==0);
 11e:	e3 e3       	ldi	r30, 0x33	; 51
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 2f       	mov	r24, r24
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	81 70       	andi	r24, 0x01	; 1
 12a:	90 70       	andi	r25, 0x00	; 0
 12c:	00 97       	sbiw	r24, 0x00	; 0
 12e:	b9 f3       	breq	.-18     	; 0x11e <main+0x9c>
 130:	10 c0       	rjmp	.+32     	; 0x152 <main+0xd0>
		}
		else if (button2==0){
 132:	8c 81       	ldd	r24, Y+4	; 0x04
 134:	88 23       	and	r24, r24
 136:	69 f4       	brne	.+26     	; 0x152 <main+0xd0>
			counter--;
 138:	8b 81       	ldd	r24, Y+3	; 0x03
 13a:	81 50       	subi	r24, 0x01	; 1
 13c:	8b 83       	std	Y+3, r24	; 0x03
						 while(((PINC>>1)&1)==0);
 13e:	e3 e3       	ldi	r30, 0x33	; 51
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	86 95       	lsr	r24
 146:	88 2f       	mov	r24, r24
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	81 70       	andi	r24, 0x01	; 1
 14c:	90 70       	andi	r25, 0x00	; 0
 14e:	00 97       	sbiw	r24, 0x00	; 0
 150:	b1 f3       	breq	.-20     	; 0x13e <main+0xbc>
					}


		if(counter >99)
 152:	8b 81       	ldd	r24, Y+3	; 0x03
 154:	84 36       	cpi	r24, 0x64	; 100
 156:	14 f0       	brlt	.+4      	; 0x15c <main+0xda>
			counter =0;
 158:	1b 82       	std	Y+3, r1	; 0x03
 15a:	05 c0       	rjmp	.+10     	; 0x166 <main+0xe4>
		else if (counter<=0)
 15c:	8b 81       	ldd	r24, Y+3	; 0x03
 15e:	18 16       	cp	r1, r24
 160:	14 f0       	brlt	.+4      	; 0x166 <main+0xe4>
			counter =50;
 162:	82 e3       	ldi	r24, 0x32	; 50
 164:	8b 83       	std	Y+3, r24	; 0x03

		one=counter%10;
 166:	8b 81       	ldd	r24, Y+3	; 0x03
 168:	9a e0       	ldi	r25, 0x0A	; 10
 16a:	69 2f       	mov	r22, r25
 16c:	0e 94 de 00 	call	0x1bc	; 0x1bc <__divmodqi4>
 170:	89 2f       	mov	r24, r25
 172:	8a 83       	std	Y+2, r24	; 0x02
		deci=counter/10;
 174:	8b 81       	ldd	r24, Y+3	; 0x03
 176:	9a e0       	ldi	r25, 0x0A	; 10
 178:	69 2f       	mov	r22, r25
 17a:	0e 94 de 00 	call	0x1bc	; 0x1bc <__divmodqi4>
 17e:	89 83       	std	Y+1, r24	; 0x01
		PORTA =segcthd[one];
 180:	ab e3       	ldi	r26, 0x3B	; 59
 182:	b0 e0       	ldi	r27, 0x00	; 0
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	28 2f       	mov	r18, r24
 188:	33 27       	eor	r19, r19
 18a:	27 fd       	sbrc	r18, 7
 18c:	30 95       	com	r19
 18e:	ce 01       	movw	r24, r28
 190:	06 96       	adiw	r24, 0x06	; 6
 192:	fc 01       	movw	r30, r24
 194:	e2 0f       	add	r30, r18
 196:	f3 1f       	adc	r31, r19
 198:	80 81       	ld	r24, Z
 19a:	8c 93       	st	X, r24
		PORTB =~segcthd[deci];
 19c:	a8 e3       	ldi	r26, 0x38	; 56
 19e:	b0 e0       	ldi	r27, 0x00	; 0
 1a0:	89 81       	ldd	r24, Y+1	; 0x01
 1a2:	28 2f       	mov	r18, r24
 1a4:	33 27       	eor	r19, r19
 1a6:	27 fd       	sbrc	r18, 7
 1a8:	30 95       	com	r19
 1aa:	ce 01       	movw	r24, r28
 1ac:	06 96       	adiw	r24, 0x06	; 6
 1ae:	fc 01       	movw	r30, r24
 1b0:	e2 0f       	add	r30, r18
 1b2:	f3 1f       	adc	r31, r19
 1b4:	80 81       	ld	r24, Z
 1b6:	80 95       	com	r24
 1b8:	8c 93       	st	X, r24
 1ba:	a0 cf       	rjmp	.-192    	; 0xfc <main+0x7a>

000001bc <__divmodqi4>:
 1bc:	87 fb       	bst	r24, 7
 1be:	08 2e       	mov	r0, r24
 1c0:	06 26       	eor	r0, r22
 1c2:	87 fd       	sbrc	r24, 7
 1c4:	81 95       	neg	r24
 1c6:	67 fd       	sbrc	r22, 7
 1c8:	61 95       	neg	r22
 1ca:	05 d0       	rcall	.+10     	; 0x1d6 <__udivmodqi4>
 1cc:	0e f4       	brtc	.+2      	; 0x1d0 <__divmodqi4_1>
 1ce:	91 95       	neg	r25

000001d0 <__divmodqi4_1>:
 1d0:	07 fc       	sbrc	r0, 7
 1d2:	81 95       	neg	r24

000001d4 <__divmodqi4_exit>:
 1d4:	08 95       	ret

000001d6 <__udivmodqi4>:
 1d6:	99 1b       	sub	r25, r25
 1d8:	79 e0       	ldi	r23, 0x09	; 9
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <__udivmodqi4_ep>

000001dc <__udivmodqi4_loop>:
 1dc:	99 1f       	adc	r25, r25
 1de:	96 17       	cp	r25, r22
 1e0:	08 f0       	brcs	.+2      	; 0x1e4 <__udivmodqi4_ep>
 1e2:	96 1b       	sub	r25, r22

000001e4 <__udivmodqi4_ep>:
 1e4:	88 1f       	adc	r24, r24
 1e6:	7a 95       	dec	r23
 1e8:	c9 f7       	brne	.-14     	; 0x1dc <__udivmodqi4_loop>
 1ea:	80 95       	com	r24
 1ec:	08 95       	ret

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
