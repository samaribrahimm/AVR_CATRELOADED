
Ping_Pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003236  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  00003236  000032ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008000c8  008000c8  00003332  2**0
                  ALLOC
  3 .stab         0000315c  00000000  00000000  00003334  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000117b  00000000  00000000  00006490  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000760b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000774b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000078bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009504  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a3ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b19c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b2fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b589  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bd57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__vector_1>
       8:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__vector_2>
       c:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3c       	cpi	r26, 0xC8	; 200
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ec       	ldi	r26, 0xC8	; 200
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3d       	cpi	r26, 0xDE	; 222
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <main>
      8a:	0c 94 19 19 	jmp	0x3232	; 0x3232 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e2 18 	jmp	0x31c4	; 0x31c4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 eb       	ldi	r26, 0xB8	; 184
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e2 18 	jmp	0x31c4	; 0x31c4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 eb       	ldi	r24, 0xB8	; 184
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f2 18 	jmp	0x31e4	; 0x31e4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0e 19 	jmp	0x321c	; 0x321c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GIE_enuGloable_Interrupt_Enable>:
#include "../../LIB/errorStates.h"

#include "GIE_priv.h"

ES_t GIE_enuGloable_Interrupt_Enable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     b50:	19 82       	std	Y+1, r1	; 0x01

	SREG &= ~(1 << GIE_I);
     b52:	af e5       	ldi	r26, 0x5F	; 95
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	ef e5       	ldi	r30, 0x5F	; 95
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	8f 77       	andi	r24, 0x7F	; 127
     b5e:	8c 93       	st	X, r24
	SREG |= (1 << GIE_I);
     b60:	af e5       	ldi	r26, 0x5F	; 95
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	ef e5       	ldi	r30, 0x5F	; 95
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	80 68       	ori	r24, 0x80	; 128
     b6c:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     b72:	89 81       	ldd	r24, Y+1	; 0x01
}
     b74:	0f 90       	pop	r0
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <GIE_enuGloable_Interrupt_Disable>:

ES_t GIE_enuGloable_Interrupt_Disable(void)
{
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	0f 92       	push	r0
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     b86:	19 82       	std	Y+1, r1	; 0x01

	SREG &= ~(1<< GIE_I);
     b88:	af e5       	ldi	r26, 0x5F	; 95
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	ef e5       	ldi	r30, 0x5F	; 95
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	8f 77       	andi	r24, 0x7F	; 127
     b94:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
}
     b9c:	0f 90       	pop	r0
     b9e:	cf 91       	pop	r28
     ba0:	df 91       	pop	r29
     ba2:	08 95       	ret

00000ba4 <EXTI_enuInit>:
static volatile void (*EXTI_ApfunINTFun[3])(void*) = {NULL,NULL,NULL};
void * EXTI_ApvidGenericparameter[3] = {NULL,NULL,NULL};

// fun to initialize the external interrupt take pointer to  id of interrupt

ES_t EXTI_enuInit (EXTI_t * Copy_pstrEXTIConfig){
     ba4:	df 93       	push	r29
     ba6:	cf 93       	push	r28
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	2d 97       	sbiw	r28, 0x0d	; 13
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	de bf       	out	0x3e, r29	; 62
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	9d 83       	std	Y+5, r25	; 0x05
     bba:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     bbc:	1b 82       	std	Y+3, r1	; 0x03
	if(Copy_pstrEXTIConfig!=NULL){
     bbe:	8c 81       	ldd	r24, Y+4	; 0x04
     bc0:	9d 81       	ldd	r25, Y+5	; 0x05
     bc2:	00 97       	sbiw	r24, 0x00	; 0
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <EXTI_enuInit+0x24>
     bc6:	10 c1       	rjmp	.+544    	; 0xde8 <EXTI_enuInit+0x244>
		u8 Local_u8Iter=0;
     bc8:	1a 82       	std	Y+2, r1	; 0x02
    for (Local_u8Iter =0; Local_u8Iter < 3 ; Local_u8Iter++)
     bca:	1a 82       	std	Y+2, r1	; 0x02
     bcc:	08 c1       	rjmp	.+528    	; 0xdde <EXTI_enuInit+0x23a>
    {
    	if (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8State == ENABLE)
     bce:	8a 81       	ldd	r24, Y+2	; 0x02
     bd0:	88 2f       	mov	r24, r24
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	9c 01       	movw	r18, r24
     bd6:	22 0f       	add	r18, r18
     bd8:	33 1f       	adc	r19, r19
     bda:	8c 81       	ldd	r24, Y+4	; 0x04
     bdc:	9d 81       	ldd	r25, Y+5	; 0x05
     bde:	fc 01       	movw	r30, r24
     be0:	e2 0f       	add	r30, r18
     be2:	f3 1f       	adc	r31, r19
     be4:	80 81       	ld	r24, Z
     be6:	81 30       	cpi	r24, 0x01	; 1
     be8:	09 f0       	breq	.+2      	; 0xbec <EXTI_enuInit+0x48>
     bea:	f6 c0       	rjmp	.+492    	; 0xdd8 <EXTI_enuInit+0x234>
    	{
    		switch (Local_u8Iter)
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	28 2f       	mov	r18, r24
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	3d 87       	std	Y+13, r19	; 0x0d
     bf4:	2c 87       	std	Y+12, r18	; 0x0c
     bf6:	8c 85       	ldd	r24, Y+12	; 0x0c
     bf8:	9d 85       	ldd	r25, Y+13	; 0x0d
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	91 05       	cpc	r25, r1
     bfe:	09 f4       	brne	.+2      	; 0xc02 <EXTI_enuInit+0x5e>
     c00:	60 c0       	rjmp	.+192    	; 0xcc2 <EXTI_enuInit+0x11e>
     c02:	2c 85       	ldd	r18, Y+12	; 0x0c
     c04:	3d 85       	ldd	r19, Y+13	; 0x0d
     c06:	22 30       	cpi	r18, 0x02	; 2
     c08:	31 05       	cpc	r19, r1
     c0a:	09 f4       	brne	.+2      	; 0xc0e <EXTI_enuInit+0x6a>
     c0c:	af c0       	rjmp	.+350    	; 0xd6c <EXTI_enuInit+0x1c8>
     c0e:	8c 85       	ldd	r24, Y+12	; 0x0c
     c10:	9d 85       	ldd	r25, Y+13	; 0x0d
     c12:	00 97       	sbiw	r24, 0x00	; 0
     c14:	09 f0       	breq	.+2      	; 0xc18 <EXTI_enuInit+0x74>
     c16:	de c0       	rjmp	.+444    	; 0xdd4 <EXTI_enuInit+0x230>
    						{
    		case INT0:
    			 MCUCR &=~ (3<<0);
     c18:	a5 e5       	ldi	r26, 0x55	; 85
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e5 e5       	ldi	r30, 0x55	; 85
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	8c 7f       	andi	r24, 0xFC	; 252
     c24:	8c 93       	st	X, r24
    			 GICR|=(1<<6);
     c26:	ab e5       	ldi	r26, 0x5B	; 91
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	eb e5       	ldi	r30, 0x5B	; 91
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	80 64       	ori	r24, 0x40	; 64
     c32:	8c 93       	st	X, r24

    			switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenseLevel)
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	88 2f       	mov	r24, r24
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	9c 01       	movw	r18, r24
     c3c:	22 0f       	add	r18, r18
     c3e:	33 1f       	adc	r19, r19
     c40:	8c 81       	ldd	r24, Y+4	; 0x04
     c42:	9d 81       	ldd	r25, Y+5	; 0x05
     c44:	fc 01       	movw	r30, r24
     c46:	e2 0f       	add	r30, r18
     c48:	f3 1f       	adc	r31, r19
     c4a:	81 81       	ldd	r24, Z+1	; 0x01
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	3b 87       	std	Y+11, r19	; 0x0b
     c52:	2a 87       	std	Y+10, r18	; 0x0a
     c54:	8a 85       	ldd	r24, Y+10	; 0x0a
     c56:	9b 85       	ldd	r25, Y+11	; 0x0b
     c58:	82 30       	cpi	r24, 0x02	; 2
     c5a:	91 05       	cpc	r25, r1
     c5c:	f9 f0       	breq	.+62     	; 0xc9c <EXTI_enuInit+0xf8>
     c5e:	2a 85       	ldd	r18, Y+10	; 0x0a
     c60:	3b 85       	ldd	r19, Y+11	; 0x0b
     c62:	23 30       	cpi	r18, 0x03	; 3
     c64:	31 05       	cpc	r19, r1
     c66:	34 f4       	brge	.+12     	; 0xc74 <EXTI_enuInit+0xd0>
     c68:	8a 85       	ldd	r24, Y+10	; 0x0a
     c6a:	9b 85       	ldd	r25, Y+11	; 0x0b
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	91 05       	cpc	r25, r1
     c70:	e9 f0       	breq	.+58     	; 0xcac <EXTI_enuInit+0x108>
     c72:	24 c0       	rjmp	.+72     	; 0xcbc <EXTI_enuInit+0x118>
     c74:	2a 85       	ldd	r18, Y+10	; 0x0a
     c76:	3b 85       	ldd	r19, Y+11	; 0x0b
     c78:	23 30       	cpi	r18, 0x03	; 3
     c7a:	31 05       	cpc	r19, r1
     c7c:	39 f0       	breq	.+14     	; 0xc8c <EXTI_enuInit+0xe8>
     c7e:	8a 85       	ldd	r24, Y+10	; 0x0a
     c80:	9b 85       	ldd	r25, Y+11	; 0x0b
     c82:	84 30       	cpi	r24, 0x04	; 4
     c84:	91 05       	cpc	r25, r1
     c86:	09 f4       	brne	.+2      	; 0xc8a <EXTI_enuInit+0xe6>
     c88:	a7 c0       	rjmp	.+334    	; 0xdd8 <EXTI_enuInit+0x234>
     c8a:	18 c0       	rjmp	.+48     	; 0xcbc <EXTI_enuInit+0x118>
    			{
                     case LOW_LEVEL:
                    	 break;
                     case ANY_LOGIC:
                    	 MCUCR |=(1<<0);
     c8c:	a5 e5       	ldi	r26, 0x55	; 85
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e5 e5       	ldi	r30, 0x55	; 85
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	81 60       	ori	r24, 0x01	; 1
     c98:	8c 93       	st	X, r24
     c9a:	9e c0       	rjmp	.+316    	; 0xdd8 <EXTI_enuInit+0x234>
                    	 break;
                     case FALLING_EDGE:
                    	 MCUCR |=(1<<1);
     c9c:	a5 e5       	ldi	r26, 0x55	; 85
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e5 e5       	ldi	r30, 0x55	; 85
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	82 60       	ori	r24, 0x02	; 2
     ca8:	8c 93       	st	X, r24
     caa:	96 c0       	rjmp	.+300    	; 0xdd8 <EXTI_enuInit+0x234>
                    	 break;
                     case RISING_EDGE:
                    	 MCUCR |=(3<<0);
     cac:	a5 e5       	ldi	r26, 0x55	; 85
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e5 e5       	ldi	r30, 0x55	; 85
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	83 60       	ori	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	8e c0       	rjmp	.+284    	; 0xdd8 <EXTI_enuInit+0x234>
                    	 break;
                    default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
     cbc:	83 e0       	ldi	r24, 0x03	; 3
     cbe:	8b 83       	std	Y+3, r24	; 0x03
     cc0:	8b c0       	rjmp	.+278    	; 0xdd8 <EXTI_enuInit+0x234>
					}
					break;

    		case INT1:
    			MCUCR &=~ (3<<2);
     cc2:	a5 e5       	ldi	r26, 0x55	; 85
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e5 e5       	ldi	r30, 0x55	; 85
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	83 7f       	andi	r24, 0xF3	; 243
     cce:	8c 93       	st	X, r24
    			GICR |= (1<<7);
     cd0:	ab e5       	ldi	r26, 0x5B	; 91
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	eb e5       	ldi	r30, 0x5B	; 91
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	80 68       	ori	r24, 0x80	; 128
     cdc:	8c 93       	st	X, r24

    			switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenseLevel)
     cde:	8a 81       	ldd	r24, Y+2	; 0x02
     ce0:	88 2f       	mov	r24, r24
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	9c 01       	movw	r18, r24
     ce6:	22 0f       	add	r18, r18
     ce8:	33 1f       	adc	r19, r19
     cea:	8c 81       	ldd	r24, Y+4	; 0x04
     cec:	9d 81       	ldd	r25, Y+5	; 0x05
     cee:	fc 01       	movw	r30, r24
     cf0:	e2 0f       	add	r30, r18
     cf2:	f3 1f       	adc	r31, r19
     cf4:	81 81       	ldd	r24, Z+1	; 0x01
     cf6:	28 2f       	mov	r18, r24
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	39 87       	std	Y+9, r19	; 0x09
     cfc:	28 87       	std	Y+8, r18	; 0x08
     cfe:	88 85       	ldd	r24, Y+8	; 0x08
     d00:	99 85       	ldd	r25, Y+9	; 0x09
     d02:	82 30       	cpi	r24, 0x02	; 2
     d04:	91 05       	cpc	r25, r1
     d06:	f9 f0       	breq	.+62     	; 0xd46 <EXTI_enuInit+0x1a2>
     d08:	28 85       	ldd	r18, Y+8	; 0x08
     d0a:	39 85       	ldd	r19, Y+9	; 0x09
     d0c:	23 30       	cpi	r18, 0x03	; 3
     d0e:	31 05       	cpc	r19, r1
     d10:	34 f4       	brge	.+12     	; 0xd1e <EXTI_enuInit+0x17a>
     d12:	88 85       	ldd	r24, Y+8	; 0x08
     d14:	99 85       	ldd	r25, Y+9	; 0x09
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	91 05       	cpc	r25, r1
     d1a:	e9 f0       	breq	.+58     	; 0xd56 <EXTI_enuInit+0x1b2>
     d1c:	24 c0       	rjmp	.+72     	; 0xd66 <EXTI_enuInit+0x1c2>
     d1e:	28 85       	ldd	r18, Y+8	; 0x08
     d20:	39 85       	ldd	r19, Y+9	; 0x09
     d22:	23 30       	cpi	r18, 0x03	; 3
     d24:	31 05       	cpc	r19, r1
     d26:	39 f0       	breq	.+14     	; 0xd36 <EXTI_enuInit+0x192>
     d28:	88 85       	ldd	r24, Y+8	; 0x08
     d2a:	99 85       	ldd	r25, Y+9	; 0x09
     d2c:	84 30       	cpi	r24, 0x04	; 4
     d2e:	91 05       	cpc	r25, r1
     d30:	09 f4       	brne	.+2      	; 0xd34 <EXTI_enuInit+0x190>
     d32:	52 c0       	rjmp	.+164    	; 0xdd8 <EXTI_enuInit+0x234>
     d34:	18 c0       	rjmp	.+48     	; 0xd66 <EXTI_enuInit+0x1c2>
    			{
    	         case LOW_LEVEL:
    	        	 break;
    	         case ANY_LOGIC:
    	        	 MCUCR |=(1<<2);
     d36:	a5 e5       	ldi	r26, 0x55	; 85
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e5 e5       	ldi	r30, 0x55	; 85
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	84 60       	ori	r24, 0x04	; 4
     d42:	8c 93       	st	X, r24
     d44:	49 c0       	rjmp	.+146    	; 0xdd8 <EXTI_enuInit+0x234>
    	        	 break;

    	         case FALLING_EDGE:
    	        	 MCUCR |=(1<<3);
     d46:	a5 e5       	ldi	r26, 0x55	; 85
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e5 e5       	ldi	r30, 0x55	; 85
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	88 60       	ori	r24, 0x08	; 8
     d52:	8c 93       	st	X, r24
     d54:	41 c0       	rjmp	.+130    	; 0xdd8 <EXTI_enuInit+0x234>
    	        	 break;

    	         case RISING_EDGE:
    	        	 MCUCR |=(3<<2);
     d56:	a5 e5       	ldi	r26, 0x55	; 85
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e5 e5       	ldi	r30, 0x55	; 85
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	8c 60       	ori	r24, 0x0C	; 12
     d62:	8c 93       	st	X, r24
     d64:	39 c0       	rjmp	.+114    	; 0xdd8 <EXTI_enuInit+0x234>
    	        	 break;

    	        default:
    				Local_enuErrorState = ES_OUT_OF_RANGE;
     d66:	83 e0       	ldi	r24, 0x03	; 3
     d68:	8b 83       	std	Y+3, r24	; 0x03
     d6a:	36 c0       	rjmp	.+108    	; 0xdd8 <EXTI_enuInit+0x234>
    			}
    			break;

    		case INT2:
    			MCUCSR &=~(1<<6);
     d6c:	a4 e5       	ldi	r26, 0x54	; 84
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e4 e5       	ldi	r30, 0x54	; 84
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	8f 7b       	andi	r24, 0xBF	; 191
     d78:	8c 93       	st	X, r24
    			GICR |= (1<<5);
     d7a:	ab e5       	ldi	r26, 0x5B	; 91
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	eb e5       	ldi	r30, 0x5B	; 91
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	80 62       	ori	r24, 0x20	; 32
     d86:	8c 93       	st	X, r24

    			switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenseLevel)
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	88 2f       	mov	r24, r24
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9c 01       	movw	r18, r24
     d90:	22 0f       	add	r18, r18
     d92:	33 1f       	adc	r19, r19
     d94:	8c 81       	ldd	r24, Y+4	; 0x04
     d96:	9d 81       	ldd	r25, Y+5	; 0x05
     d98:	fc 01       	movw	r30, r24
     d9a:	e2 0f       	add	r30, r18
     d9c:	f3 1f       	adc	r31, r19
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	3f 83       	std	Y+7, r19	; 0x07
     da6:	2e 83       	std	Y+6, r18	; 0x06
     da8:	8e 81       	ldd	r24, Y+6	; 0x06
     daa:	9f 81       	ldd	r25, Y+7	; 0x07
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	91 05       	cpc	r25, r1
     db0:	31 f0       	breq	.+12     	; 0xdbe <EXTI_enuInit+0x21a>
     db2:	2e 81       	ldd	r18, Y+6	; 0x06
     db4:	3f 81       	ldd	r19, Y+7	; 0x07
     db6:	22 30       	cpi	r18, 0x02	; 2
     db8:	31 05       	cpc	r19, r1
     dba:	71 f0       	breq	.+28     	; 0xdd8 <EXTI_enuInit+0x234>
     dbc:	08 c0       	rjmp	.+16     	; 0xdce <EXTI_enuInit+0x22a>
    		   	{
                 case FALLING_EDGE:
                	 break;

                 case RISING_EDGE:
                	 MCUCSR |= (1<<6);
     dbe:	a4 e5       	ldi	r26, 0x54	; 84
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e4 e5       	ldi	r30, 0x54	; 84
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	80 64       	ori	r24, 0x40	; 64
     dca:	8c 93       	st	X, r24
     dcc:	05 c0       	rjmp	.+10     	; 0xdd8 <EXTI_enuInit+0x234>
                	 break;

                default:
  			    Local_enuErrorState = ES_OUT_OF_RANGE;
     dce:	83 e0       	ldi	r24, 0x03	; 3
     dd0:	8b 83       	std	Y+3, r24	; 0x03
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <EXTI_enuInit+0x234>
  		        }
  		        break;

              default:
              Local_enuErrorState = ES_OUT_OF_RANGE;
     dd4:	83 e0       	ldi	r24, 0x03	; 3
     dd6:	8b 83       	std	Y+3, r24	; 0x03

ES_t EXTI_enuInit (EXTI_t * Copy_pstrEXTIConfig){
	ES_t Local_enuErrorState = ES_NOK;
	if(Copy_pstrEXTIConfig!=NULL){
		u8 Local_u8Iter=0;
    for (Local_u8Iter =0; Local_u8Iter < 3 ; Local_u8Iter++)
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	8f 5f       	subi	r24, 0xFF	; 255
     ddc:	8a 83       	std	Y+2, r24	; 0x02
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	83 30       	cpi	r24, 0x03	; 3
     de2:	08 f4       	brcc	.+2      	; 0xde6 <EXTI_enuInit+0x242>
     de4:	f4 ce       	rjmp	.-536    	; 0xbce <EXTI_enuInit+0x2a>
     de6:	02 c0       	rjmp	.+4      	; 0xdec <EXTI_enuInit+0x248>

              default:
              Local_enuErrorState = ES_OUT_OF_RANGE;
    						}}}}
	else {
		ES_t Local_enuErrorState = ES_NULL_POINTER;
     de8:	82 e0       	ldi	r24, 0x02	; 2
     dea:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
}
     dee:	2d 96       	adiw	r28, 0x0d	; 13
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <EXTI_enuSetSenseLevel>:


/*** fun to set sense level
     take id ,sense level                              ***/
ES_t EXTI_enuSetSenseLevel(u8 Copy_u8EXTI_ID , u8 Copy_u8SenseLevel){
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	2a 97       	sbiw	r28, 0x0a	; 10
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	8b 83       	std	Y+3, r24	; 0x03
     e16:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     e18:	1a 82       	std	Y+2, r1	; 0x02
 if(Copy_u8EXTI_ID < 3){
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	83 30       	cpi	r24, 0x03	; 3
     e1e:	08 f0       	brcs	.+2      	; 0xe22 <EXTI_enuSetSenseLevel+0x22>
     e20:	ba c0       	rjmp	.+372    	; 0xf96 <EXTI_enuSetSenseLevel+0x196>
	 if(Copy_u8EXTI_ID ==INT0){
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	88 23       	and	r24, r24
     e26:	09 f0       	breq	.+2      	; 0xe2a <EXTI_enuSetSenseLevel+0x2a>
     e28:	43 c0       	rjmp	.+134    	; 0xeb0 <EXTI_enuSetSenseLevel+0xb0>
		 MCUCR &=~ (3<<0);
     e2a:	a5 e5       	ldi	r26, 0x55	; 85
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e5 e5       	ldi	r30, 0x55	; 85
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8c 7f       	andi	r24, 0xFC	; 252
     e36:	8c 93       	st	X, r24
			switch (Copy_u8SenseLevel)
     e38:	8c 81       	ldd	r24, Y+4	; 0x04
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	3a 87       	std	Y+10, r19	; 0x0a
     e40:	29 87       	std	Y+9, r18	; 0x09
     e42:	89 85       	ldd	r24, Y+9	; 0x09
     e44:	9a 85       	ldd	r25, Y+10	; 0x0a
     e46:	82 30       	cpi	r24, 0x02	; 2
     e48:	91 05       	cpc	r25, r1
     e4a:	f9 f0       	breq	.+62     	; 0xe8a <EXTI_enuSetSenseLevel+0x8a>
     e4c:	29 85       	ldd	r18, Y+9	; 0x09
     e4e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e50:	23 30       	cpi	r18, 0x03	; 3
     e52:	31 05       	cpc	r19, r1
     e54:	34 f4       	brge	.+12     	; 0xe62 <EXTI_enuSetSenseLevel+0x62>
     e56:	89 85       	ldd	r24, Y+9	; 0x09
     e58:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	91 05       	cpc	r25, r1
     e5e:	e9 f0       	breq	.+58     	; 0xe9a <EXTI_enuSetSenseLevel+0x9a>
     e60:	24 c0       	rjmp	.+72     	; 0xeaa <EXTI_enuSetSenseLevel+0xaa>
     e62:	29 85       	ldd	r18, Y+9	; 0x09
     e64:	3a 85       	ldd	r19, Y+10	; 0x0a
     e66:	23 30       	cpi	r18, 0x03	; 3
     e68:	31 05       	cpc	r19, r1
     e6a:	39 f0       	breq	.+14     	; 0xe7a <EXTI_enuSetSenseLevel+0x7a>
     e6c:	89 85       	ldd	r24, Y+9	; 0x09
     e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e70:	84 30       	cpi	r24, 0x04	; 4
     e72:	91 05       	cpc	r25, r1
     e74:	09 f4       	brne	.+2      	; 0xe78 <EXTI_enuSetSenseLevel+0x78>
     e76:	91 c0       	rjmp	.+290    	; 0xf9a <EXTI_enuSetSenseLevel+0x19a>
     e78:	18 c0       	rjmp	.+48     	; 0xeaa <EXTI_enuSetSenseLevel+0xaa>
		    			{
		                     case LOW_LEVEL:
		                    	 break;
		                     case ANY_LOGIC:
		                    	 MCUCR |=(1<<0);
     e7a:	a5 e5       	ldi	r26, 0x55	; 85
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e5 e5       	ldi	r30, 0x55	; 85
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	81 60       	ori	r24, 0x01	; 1
     e86:	8c 93       	st	X, r24
     e88:	88 c0       	rjmp	.+272    	; 0xf9a <EXTI_enuSetSenseLevel+0x19a>
		                    	 break;
		                     case FALLING_EDGE:
		                    	 MCUCR |=(1<<1);
     e8a:	a5 e5       	ldi	r26, 0x55	; 85
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e5 e5       	ldi	r30, 0x55	; 85
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	82 60       	ori	r24, 0x02	; 2
     e96:	8c 93       	st	X, r24
     e98:	80 c0       	rjmp	.+256    	; 0xf9a <EXTI_enuSetSenseLevel+0x19a>
		                    	 break;
		                     case RISING_EDGE:
		                    	 MCUCR |=(3<<0);
     e9a:	a5 e5       	ldi	r26, 0x55	; 85
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e5 e5       	ldi	r30, 0x55	; 85
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	83 60       	ori	r24, 0x03	; 3
     ea6:	8c 93       	st	X, r24
     ea8:	78 c0       	rjmp	.+240    	; 0xf9a <EXTI_enuSetSenseLevel+0x19a>
		                    	 break;
		                    default:
								Local_enuErrorState = ES_OUT_OF_RANGE;
     eaa:	83 e0       	ldi	r24, 0x03	; 3
     eac:	8a 83       	std	Y+2, r24	; 0x02
     eae:	75 c0       	rjmp	.+234    	; 0xf9a <EXTI_enuSetSenseLevel+0x19a>
							}
	 }
	 else if(Copy_u8EXTI_ID ==INT1){
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <EXTI_enuSetSenseLevel+0xb8>
     eb6:	43 c0       	rjmp	.+134    	; 0xf3e <EXTI_enuSetSenseLevel+0x13e>
		 MCUCR &=~ (3<<2);
     eb8:	a5 e5       	ldi	r26, 0x55	; 85
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e5 e5       	ldi	r30, 0x55	; 85
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	83 7f       	andi	r24, 0xF3	; 243
     ec4:	8c 93       	st	X, r24

		     			switch (Copy_u8SenseLevel)
     ec6:	8c 81       	ldd	r24, Y+4	; 0x04
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	38 87       	std	Y+8, r19	; 0x08
     ece:	2f 83       	std	Y+7, r18	; 0x07
     ed0:	8f 81       	ldd	r24, Y+7	; 0x07
     ed2:	98 85       	ldd	r25, Y+8	; 0x08
     ed4:	82 30       	cpi	r24, 0x02	; 2
     ed6:	91 05       	cpc	r25, r1
     ed8:	f9 f0       	breq	.+62     	; 0xf18 <EXTI_enuSetSenseLevel+0x118>
     eda:	2f 81       	ldd	r18, Y+7	; 0x07
     edc:	38 85       	ldd	r19, Y+8	; 0x08
     ede:	23 30       	cpi	r18, 0x03	; 3
     ee0:	31 05       	cpc	r19, r1
     ee2:	34 f4       	brge	.+12     	; 0xef0 <EXTI_enuSetSenseLevel+0xf0>
     ee4:	8f 81       	ldd	r24, Y+7	; 0x07
     ee6:	98 85       	ldd	r25, Y+8	; 0x08
     ee8:	81 30       	cpi	r24, 0x01	; 1
     eea:	91 05       	cpc	r25, r1
     eec:	e9 f0       	breq	.+58     	; 0xf28 <EXTI_enuSetSenseLevel+0x128>
     eee:	24 c0       	rjmp	.+72     	; 0xf38 <EXTI_enuSetSenseLevel+0x138>
     ef0:	2f 81       	ldd	r18, Y+7	; 0x07
     ef2:	38 85       	ldd	r19, Y+8	; 0x08
     ef4:	23 30       	cpi	r18, 0x03	; 3
     ef6:	31 05       	cpc	r19, r1
     ef8:	39 f0       	breq	.+14     	; 0xf08 <EXTI_enuSetSenseLevel+0x108>
     efa:	8f 81       	ldd	r24, Y+7	; 0x07
     efc:	98 85       	ldd	r25, Y+8	; 0x08
     efe:	84 30       	cpi	r24, 0x04	; 4
     f00:	91 05       	cpc	r25, r1
     f02:	09 f4       	brne	.+2      	; 0xf06 <EXTI_enuSetSenseLevel+0x106>
     f04:	4a c0       	rjmp	.+148    	; 0xf9a <EXTI_enuSetSenseLevel+0x19a>
     f06:	18 c0       	rjmp	.+48     	; 0xf38 <EXTI_enuSetSenseLevel+0x138>
		     			{
		     	         case LOW_LEVEL:
		     	        	 break;
		     	         case ANY_LOGIC:
		     	        	 MCUCR |=(1<<2);
     f08:	a5 e5       	ldi	r26, 0x55	; 85
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e5 e5       	ldi	r30, 0x55	; 85
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	84 60       	ori	r24, 0x04	; 4
     f14:	8c 93       	st	X, r24
     f16:	41 c0       	rjmp	.+130    	; 0xf9a <EXTI_enuSetSenseLevel+0x19a>
		     	        	 break;

		     	         case FALLING_EDGE:
		     	        	 MCUCR |=(1<<3);
     f18:	a5 e5       	ldi	r26, 0x55	; 85
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e5 e5       	ldi	r30, 0x55	; 85
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	88 60       	ori	r24, 0x08	; 8
     f24:	8c 93       	st	X, r24
     f26:	39 c0       	rjmp	.+114    	; 0xf9a <EXTI_enuSetSenseLevel+0x19a>
		     	        	 break;

		     	         case RISING_EDGE:
		     	        	 MCUCR |=(3<<2);
     f28:	a5 e5       	ldi	r26, 0x55	; 85
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e5 e5       	ldi	r30, 0x55	; 85
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	8c 60       	ori	r24, 0x0C	; 12
     f34:	8c 93       	st	X, r24
     f36:	31 c0       	rjmp	.+98     	; 0xf9a <EXTI_enuSetSenseLevel+0x19a>
		     	        	 break;

		     	        default:
		     				Local_enuErrorState = ES_OUT_OF_RANGE;
     f38:	83 e0       	ldi	r24, 0x03	; 3
     f3a:	8a 83       	std	Y+2, r24	; 0x02
     f3c:	2e c0       	rjmp	.+92     	; 0xf9a <EXTI_enuSetSenseLevel+0x19a>
		     			}
	 }
	 else if(Copy_u8EXTI_ID ==INT2){
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	59 f5       	brne	.+86     	; 0xf9a <EXTI_enuSetSenseLevel+0x19a>
		 MCUCSR &=~(1<<6);
     f44:	a4 e5       	ldi	r26, 0x54	; 84
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e4 e5       	ldi	r30, 0x54	; 84
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	8f 7b       	andi	r24, 0xBF	; 191
     f50:	8c 93       	st	X, r24
		     			GICR |= (1<<5);
     f52:	ab e5       	ldi	r26, 0x5B	; 91
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	eb e5       	ldi	r30, 0x5B	; 91
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	80 62       	ori	r24, 0x20	; 32
     f5e:	8c 93       	st	X, r24

		     			switch (Copy_u8SenseLevel)
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	3e 83       	std	Y+6, r19	; 0x06
     f68:	2d 83       	std	Y+5, r18	; 0x05
     f6a:	8d 81       	ldd	r24, Y+5	; 0x05
     f6c:	9e 81       	ldd	r25, Y+6	; 0x06
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	91 05       	cpc	r25, r1
     f72:	31 f0       	breq	.+12     	; 0xf80 <EXTI_enuSetSenseLevel+0x180>
     f74:	2d 81       	ldd	r18, Y+5	; 0x05
     f76:	3e 81       	ldd	r19, Y+6	; 0x06
     f78:	22 30       	cpi	r18, 0x02	; 2
     f7a:	31 05       	cpc	r19, r1
     f7c:	71 f0       	breq	.+28     	; 0xf9a <EXTI_enuSetSenseLevel+0x19a>
     f7e:	08 c0       	rjmp	.+16     	; 0xf90 <EXTI_enuSetSenseLevel+0x190>
		     		   	{
		                  case FALLING_EDGE:
		                 	 break;

		                  case RISING_EDGE:
		                 	 MCUCSR |= (1<<6);
     f80:	a4 e5       	ldi	r26, 0x54	; 84
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e4 e5       	ldi	r30, 0x54	; 84
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	80 64       	ori	r24, 0x40	; 64
     f8c:	8c 93       	st	X, r24
     f8e:	05 c0       	rjmp	.+10     	; 0xf9a <EXTI_enuSetSenseLevel+0x19a>
		                 	 break;

		                 default:
		   			    Local_enuErrorState = ES_OUT_OF_RANGE;
     f90:	83 e0       	ldi	r24, 0x03	; 3
     f92:	8a 83       	std	Y+2, r24	; 0x02
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <EXTI_enuSetSenseLevel+0x19a>
		   		        }
		 }
 }
 else{
	 ES_t Local_enuErrorState = ES_OUT_OF_RANGE;
     f96:	83 e0       	ldi	r24, 0x03	; 3
     f98:	89 83       	std	Y+1, r24	; 0x01
 }
	return Local_enuErrorState;
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f9c:	2a 96       	adiw	r28, 0x0a	; 10
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <EXTI_enuEnableINT>:

/*** fun to enable specific the interrupt
                      ***/
ES_t EXTI_enuEnableINT(u8 Copy_u8EXTI_ID){
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <EXTI_enuEnableINT+0x6>
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     fba:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8EXTI_ID < 3)
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	83 30       	cpi	r24, 0x03	; 3
     fc0:	00 f5       	brcc	.+64     	; 0x1002 <EXTI_enuEnableINT+0x54>
		{
			if (Copy_u8EXTI_ID ==INT0)
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	88 23       	and	r24, r24
     fc6:	41 f4       	brne	.+16     	; 0xfd8 <EXTI_enuEnableINT+0x2a>
			{
				GICR |= (1<<6);
     fc8:	ab e5       	ldi	r26, 0x5B	; 91
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	eb e5       	ldi	r30, 0x5B	; 91
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	80 64       	ori	r24, 0x40	; 64
     fd4:	8c 93       	st	X, r24
     fd6:	15 c0       	rjmp	.+42     	; 0x1002 <EXTI_enuEnableINT+0x54>
			}
			else if (Copy_u8EXTI_ID ==INT1)
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	41 f4       	brne	.+16     	; 0xfee <EXTI_enuEnableINT+0x40>
			{
				GICR |= (1<<7);
     fde:	ab e5       	ldi	r26, 0x5B	; 91
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	eb e5       	ldi	r30, 0x5B	; 91
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	80 68       	ori	r24, 0x80	; 128
     fea:	8c 93       	st	X, r24
     fec:	0a c0       	rjmp	.+20     	; 0x1002 <EXTI_enuEnableINT+0x54>
			}
			else if (Copy_u8EXTI_ID ==INT2)
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	82 30       	cpi	r24, 0x02	; 2
     ff2:	39 f4       	brne	.+14     	; 0x1002 <EXTI_enuEnableINT+0x54>
			{
				GICR |= (1<<5);
     ff4:	ab e5       	ldi	r26, 0x5B	; 91
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	eb e5       	ldi	r30, 0x5B	; 91
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	80 62       	ori	r24, 0x20	; 32
    1000:	8c 93       	st	X, r24
			}
		}

	return Local_enuErrorState;
    1002:	89 81       	ldd	r24, Y+1	; 0x01
}
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <EXTI_enuDisableINT>:

/***   fun to disable specific interrupt
                      ***/
ES_t EXTI_enuDisableINT(u8 Copy_u8EXTI_ID){
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	00 d0       	rcall	.+0      	; 0x1014 <EXTI_enuDisableINT+0x6>
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    101a:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8EXTI_ID < 3)
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	83 30       	cpi	r24, 0x03	; 3
    1020:	00 f5       	brcc	.+64     	; 0x1062 <EXTI_enuDisableINT+0x54>
		{
			if (Copy_u8EXTI_ID ==INT0)
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	88 23       	and	r24, r24
    1026:	41 f4       	brne	.+16     	; 0x1038 <EXTI_enuDisableINT+0x2a>
			{
				GICR &= ~(1<<6);
    1028:	ab e5       	ldi	r26, 0x5B	; 91
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	eb e5       	ldi	r30, 0x5B	; 91
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	8f 7b       	andi	r24, 0xBF	; 191
    1034:	8c 93       	st	X, r24
    1036:	15 c0       	rjmp	.+42     	; 0x1062 <EXTI_enuDisableINT+0x54>
			}
			else if (Copy_u8EXTI_ID ==INT1)
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	81 30       	cpi	r24, 0x01	; 1
    103c:	41 f4       	brne	.+16     	; 0x104e <EXTI_enuDisableINT+0x40>
			{
				GICR&= ~(1<<7);
    103e:	ab e5       	ldi	r26, 0x5B	; 91
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	eb e5       	ldi	r30, 0x5B	; 91
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	8f 77       	andi	r24, 0x7F	; 127
    104a:	8c 93       	st	X, r24
    104c:	0a c0       	rjmp	.+20     	; 0x1062 <EXTI_enuDisableINT+0x54>
			}
			else if (Copy_u8EXTI_ID ==INT2)
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	82 30       	cpi	r24, 0x02	; 2
    1052:	39 f4       	brne	.+14     	; 0x1062 <EXTI_enuDisableINT+0x54>
			{
				GICR &= ~(1<<5);
    1054:	ab e5       	ldi	r26, 0x5B	; 91
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	eb e5       	ldi	r30, 0x5B	; 91
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	8f 7d       	andi	r24, 0xDF	; 223
    1060:	8c 93       	st	X, r24
			}
		}

	return Local_enuErrorState;
    1062:	89 81       	ldd	r24, Y+1	; 0x01
}
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	08 95       	ret

0000106e <EXTI_enuCallBack>:

 /***  call back fun to use function that exist in application level
                          ***/

ES_t EXTI_enuCallBack(volatile void (*Copy_pfunAppFun)(void*) , volatile void * Copy_pvidParameter , u8 Copy_u8EXTI_ID)
{
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	00 d0       	rcall	.+0      	; 0x1074 <EXTI_enuCallBack+0x6>
    1074:	00 d0       	rcall	.+0      	; 0x1076 <EXTI_enuCallBack+0x8>
    1076:	00 d0       	rcall	.+0      	; 0x1078 <EXTI_enuCallBack+0xa>
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	9b 83       	std	Y+3, r25	; 0x03
    107e:	8a 83       	std	Y+2, r24	; 0x02
    1080:	7d 83       	std	Y+5, r23	; 0x05
    1082:	6c 83       	std	Y+4, r22	; 0x04
    1084:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    1086:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pfunAppFun != NULL && Copy_u8EXTI_ID <3)
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	9b 81       	ldd	r25, Y+3	; 0x03
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	d9 f0       	breq	.+54     	; 0x10c6 <EXTI_enuCallBack+0x58>
    1090:	8e 81       	ldd	r24, Y+6	; 0x06
    1092:	83 30       	cpi	r24, 0x03	; 3
    1094:	c0 f4       	brcc	.+48     	; 0x10c6 <EXTI_enuCallBack+0x58>
	{
		EXTI_ApfunINTFun[Copy_u8EXTI_ID]=Copy_pfunAppFun;
    1096:	8e 81       	ldd	r24, Y+6	; 0x06
    1098:	88 2f       	mov	r24, r24
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	fc 01       	movw	r30, r24
    10a2:	e8 53       	subi	r30, 0x38	; 56
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	9b 81       	ldd	r25, Y+3	; 0x03
    10aa:	91 83       	std	Z+1, r25	; 0x01
    10ac:	80 83       	st	Z, r24
		EXTI_ApvidGenericparameter[Copy_u8EXTI_ID] = Copy_pvidParameter;
    10ae:	8e 81       	ldd	r24, Y+6	; 0x06
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	fc 01       	movw	r30, r24
    10ba:	e2 53       	subi	r30, 0x32	; 50
    10bc:	ff 4f       	sbci	r31, 0xFF	; 255
    10be:	8c 81       	ldd	r24, Y+4	; 0x04
    10c0:	9d 81       	ldd	r25, Y+5	; 0x05
    10c2:	91 83       	std	Z+1, r25	; 0x01
    10c4:	80 83       	st	Z, r24
	}

	return Local_enuErrorState;
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c8:	26 96       	adiw	r28, 0x06	; 6
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <__vector_1>:



ISR(VECT_INT0)
{
    10da:	1f 92       	push	r1
    10dc:	0f 92       	push	r0
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	0f 92       	push	r0
    10e2:	11 24       	eor	r1, r1
    10e4:	2f 93       	push	r18
    10e6:	3f 93       	push	r19
    10e8:	4f 93       	push	r20
    10ea:	5f 93       	push	r21
    10ec:	6f 93       	push	r22
    10ee:	7f 93       	push	r23
    10f0:	8f 93       	push	r24
    10f2:	9f 93       	push	r25
    10f4:	af 93       	push	r26
    10f6:	bf 93       	push	r27
    10f8:	ef 93       	push	r30
    10fa:	ff 93       	push	r31
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[0] != NULL)
    1104:	80 91 c8 00 	lds	r24, 0x00C8
    1108:	90 91 c9 00 	lds	r25, 0x00C9
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	49 f0       	breq	.+18     	; 0x1122 <__vector_1+0x48>
	{
		EXTI_ApfunINTFun[0] (EXTI_ApvidGenericparameter[0]);
    1110:	e0 91 c8 00 	lds	r30, 0x00C8
    1114:	f0 91 c9 00 	lds	r31, 0x00C9
    1118:	80 91 ce 00 	lds	r24, 0x00CE
    111c:	90 91 cf 00 	lds	r25, 0x00CF
    1120:	09 95       	icall
	}
}
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	ff 91       	pop	r31
    1128:	ef 91       	pop	r30
    112a:	bf 91       	pop	r27
    112c:	af 91       	pop	r26
    112e:	9f 91       	pop	r25
    1130:	8f 91       	pop	r24
    1132:	7f 91       	pop	r23
    1134:	6f 91       	pop	r22
    1136:	5f 91       	pop	r21
    1138:	4f 91       	pop	r20
    113a:	3f 91       	pop	r19
    113c:	2f 91       	pop	r18
    113e:	0f 90       	pop	r0
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	0f 90       	pop	r0
    1144:	1f 90       	pop	r1
    1146:	18 95       	reti

00001148 <__vector_2>:

ISR(VECT_INT1)
{
    1148:	1f 92       	push	r1
    114a:	0f 92       	push	r0
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	0f 92       	push	r0
    1150:	11 24       	eor	r1, r1
    1152:	2f 93       	push	r18
    1154:	3f 93       	push	r19
    1156:	4f 93       	push	r20
    1158:	5f 93       	push	r21
    115a:	6f 93       	push	r22
    115c:	7f 93       	push	r23
    115e:	8f 93       	push	r24
    1160:	9f 93       	push	r25
    1162:	af 93       	push	r26
    1164:	bf 93       	push	r27
    1166:	ef 93       	push	r30
    1168:	ff 93       	push	r31
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[1] != NULL)
    1172:	80 91 ca 00 	lds	r24, 0x00CA
    1176:	90 91 cb 00 	lds	r25, 0x00CB
    117a:	00 97       	sbiw	r24, 0x00	; 0
    117c:	49 f0       	breq	.+18     	; 0x1190 <__vector_2+0x48>
	{
		EXTI_ApfunINTFun[1] (EXTI_ApvidGenericparameter[1]);
    117e:	e0 91 ca 00 	lds	r30, 0x00CA
    1182:	f0 91 cb 00 	lds	r31, 0x00CB
    1186:	80 91 d0 00 	lds	r24, 0x00D0
    118a:	90 91 d1 00 	lds	r25, 0x00D1
    118e:	09 95       	icall
	}
}
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	ff 91       	pop	r31
    1196:	ef 91       	pop	r30
    1198:	bf 91       	pop	r27
    119a:	af 91       	pop	r26
    119c:	9f 91       	pop	r25
    119e:	8f 91       	pop	r24
    11a0:	7f 91       	pop	r23
    11a2:	6f 91       	pop	r22
    11a4:	5f 91       	pop	r21
    11a6:	4f 91       	pop	r20
    11a8:	3f 91       	pop	r19
    11aa:	2f 91       	pop	r18
    11ac:	0f 90       	pop	r0
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	0f 90       	pop	r0
    11b2:	1f 90       	pop	r1
    11b4:	18 95       	reti

000011b6 <__vector_3>:

ISR(VECT_INT2)
{
    11b6:	1f 92       	push	r1
    11b8:	0f 92       	push	r0
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	0f 92       	push	r0
    11be:	11 24       	eor	r1, r1
    11c0:	2f 93       	push	r18
    11c2:	3f 93       	push	r19
    11c4:	4f 93       	push	r20
    11c6:	5f 93       	push	r21
    11c8:	6f 93       	push	r22
    11ca:	7f 93       	push	r23
    11cc:	8f 93       	push	r24
    11ce:	9f 93       	push	r25
    11d0:	af 93       	push	r26
    11d2:	bf 93       	push	r27
    11d4:	ef 93       	push	r30
    11d6:	ff 93       	push	r31
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[2] != NULL)
    11e0:	80 91 cc 00 	lds	r24, 0x00CC
    11e4:	90 91 cd 00 	lds	r25, 0x00CD
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	49 f0       	breq	.+18     	; 0x11fe <__vector_3+0x48>
	{
		EXTI_ApfunINTFun[2] (EXTI_ApvidGenericparameter[2]);
    11ec:	e0 91 cc 00 	lds	r30, 0x00CC
    11f0:	f0 91 cd 00 	lds	r31, 0x00CD
    11f4:	80 91 d2 00 	lds	r24, 0x00D2
    11f8:	90 91 d3 00 	lds	r25, 0x00D3
    11fc:	09 95       	icall
	}
}
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	ff 91       	pop	r31
    1204:	ef 91       	pop	r30
    1206:	bf 91       	pop	r27
    1208:	af 91       	pop	r26
    120a:	9f 91       	pop	r25
    120c:	8f 91       	pop	r24
    120e:	7f 91       	pop	r23
    1210:	6f 91       	pop	r22
    1212:	5f 91       	pop	r21
    1214:	4f 91       	pop	r20
    1216:	3f 91       	pop	r19
    1218:	2f 91       	pop	r18
    121a:	0f 90       	pop	r0
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	0f 90       	pop	r0
    1220:	1f 90       	pop	r1
    1222:	18 95       	reti

00001224 <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"


ES_t DIO_enuInit(void){
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	0f 92       	push	r0
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    122e:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    1230:	ea e3       	ldi	r30, 0x3A	; 58
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	8f ef       	ldi	r24, 0xFF	; 255
    1236:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    1238:	e7 e3       	ldi	r30, 0x37	; 55
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	8f ef       	ldi	r24, 0xFF	; 255
    123e:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    1240:	e4 e3       	ldi	r30, 0x34	; 52
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	8d ec       	ldi	r24, 0xCD	; 205
    1246:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    1248:	e1 e3       	ldi	r30, 0x31	; 49
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	8d ec       	ldi	r24, 0xCD	; 205
    124e:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    1250:	eb e3       	ldi	r30, 0x3B	; 59
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	10 82       	st	Z, r1
    PORTB = CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
    1256:	e8 e3       	ldi	r30, 0x38	; 56
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	89 e8       	ldi	r24, 0x89	; 137
    125c:	80 83       	st	Z, r24
	PORTC = CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
    125e:	e5 e3       	ldi	r30, 0x35	; 53
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	89 e2       	ldi	r24, 0x29	; 41
    1264:	80 83       	st	Z, r24
	PORTD = CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
    1266:	e2 e3       	ldi	r30, 0x32	; 50
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	89 e2       	ldi	r24, 0x29	; 41
    126c:	80 83       	st	Z, r24
	 Local_enuErrorState = ES_OK;
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1272:	89 81       	ldd	r24, Y+1	; 0x01
}
    1274:	0f 90       	pop	r0
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <DIO_enuSetPortDirection>:


ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value){
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	00 d0       	rcall	.+0      	; 0x1282 <DIO_enuSetPortDirection+0x6>
    1282:	00 d0       	rcall	.+0      	; 0x1284 <DIO_enuSetPortDirection+0x8>
    1284:	0f 92       	push	r0
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	8a 83       	std	Y+2, r24	; 0x02
    128c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    128e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	84 30       	cpi	r24, 0x04	; 4
    1294:	a8 f5       	brcc	.+106    	; 0x1300 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	3d 83       	std	Y+5, r19	; 0x05
    129e:	2c 83       	std	Y+4, r18	; 0x04
    12a0:	8c 81       	ldd	r24, Y+4	; 0x04
    12a2:	9d 81       	ldd	r25, Y+5	; 0x05
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	91 05       	cpc	r25, r1
    12a8:	d1 f0       	breq	.+52     	; 0x12de <DIO_enuSetPortDirection+0x62>
    12aa:	2c 81       	ldd	r18, Y+4	; 0x04
    12ac:	3d 81       	ldd	r19, Y+5	; 0x05
    12ae:	22 30       	cpi	r18, 0x02	; 2
    12b0:	31 05       	cpc	r19, r1
    12b2:	2c f4       	brge	.+10     	; 0x12be <DIO_enuSetPortDirection+0x42>
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	9d 81       	ldd	r25, Y+5	; 0x05
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	61 f0       	breq	.+24     	; 0x12d4 <DIO_enuSetPortDirection+0x58>
    12bc:	1e c0       	rjmp	.+60     	; 0x12fa <DIO_enuSetPortDirection+0x7e>
    12be:	2c 81       	ldd	r18, Y+4	; 0x04
    12c0:	3d 81       	ldd	r19, Y+5	; 0x05
    12c2:	22 30       	cpi	r18, 0x02	; 2
    12c4:	31 05       	cpc	r19, r1
    12c6:	81 f0       	breq	.+32     	; 0x12e8 <DIO_enuSetPortDirection+0x6c>
    12c8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ca:	9d 81       	ldd	r25, Y+5	; 0x05
    12cc:	83 30       	cpi	r24, 0x03	; 3
    12ce:	91 05       	cpc	r25, r1
    12d0:	81 f0       	breq	.+32     	; 0x12f2 <DIO_enuSetPortDirection+0x76>
    12d2:	13 c0       	rjmp	.+38     	; 0x12fa <DIO_enuSetPortDirection+0x7e>
		{
			case DIO_PORTA:
			DDRA = Copy_u8Value;
    12d4:	ea e3       	ldi	r30, 0x3A	; 58
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	80 83       	st	Z, r24
    12dc:	0e c0       	rjmp	.+28     	; 0x12fa <DIO_enuSetPortDirection+0x7e>
			break;

			case DIO_PORTB:
			DDRB = Copy_u8Value;
    12de:	e7 e3       	ldi	r30, 0x37	; 55
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	80 83       	st	Z, r24
    12e6:	09 c0       	rjmp	.+18     	; 0x12fa <DIO_enuSetPortDirection+0x7e>
			break;

			case DIO_PORTC:
			DDRC = Copy_u8Value;
    12e8:	e4 e3       	ldi	r30, 0x34	; 52
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	80 83       	st	Z, r24
    12f0:	04 c0       	rjmp	.+8      	; 0x12fa <DIO_enuSetPortDirection+0x7e>
			break;

			case DIO_PORTD:
			DDRD = Copy_u8Value;
    12f2:	e1 e3       	ldi	r30, 0x31	; 49
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	89 83       	std	Y+1, r24	; 0x01
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1300:	83 e0       	ldi	r24, 0x03	; 3
    1302:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1304:	89 81       	ldd	r24, Y+1	; 0x01

}
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <DIO_enuSetPortVal>:
ES_t DIO_enuSetPortVal(u8 Copy_u8PortID, u8 Copy_u8Value){
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	00 d0       	rcall	.+0      	; 0x131c <DIO_enuSetPortVal+0x6>
    131c:	00 d0       	rcall	.+0      	; 0x131e <DIO_enuSetPortVal+0x8>
    131e:	0f 92       	push	r0
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	8a 83       	std	Y+2, r24	; 0x02
    1326:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1328:	19 82       	std	Y+1, r1	; 0x01

		if(Copy_u8PortID <= DIO_PORTD)
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	84 30       	cpi	r24, 0x04	; 4
    132e:	a8 f5       	brcc	.+106    	; 0x139a <DIO_enuSetPortVal+0x84>
		{
			switch(Copy_u8PortID)
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	3d 83       	std	Y+5, r19	; 0x05
    1338:	2c 83       	std	Y+4, r18	; 0x04
    133a:	8c 81       	ldd	r24, Y+4	; 0x04
    133c:	9d 81       	ldd	r25, Y+5	; 0x05
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	91 05       	cpc	r25, r1
    1342:	d1 f0       	breq	.+52     	; 0x1378 <DIO_enuSetPortVal+0x62>
    1344:	2c 81       	ldd	r18, Y+4	; 0x04
    1346:	3d 81       	ldd	r19, Y+5	; 0x05
    1348:	22 30       	cpi	r18, 0x02	; 2
    134a:	31 05       	cpc	r19, r1
    134c:	2c f4       	brge	.+10     	; 0x1358 <DIO_enuSetPortVal+0x42>
    134e:	8c 81       	ldd	r24, Y+4	; 0x04
    1350:	9d 81       	ldd	r25, Y+5	; 0x05
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	61 f0       	breq	.+24     	; 0x136e <DIO_enuSetPortVal+0x58>
    1356:	1e c0       	rjmp	.+60     	; 0x1394 <DIO_enuSetPortVal+0x7e>
    1358:	2c 81       	ldd	r18, Y+4	; 0x04
    135a:	3d 81       	ldd	r19, Y+5	; 0x05
    135c:	22 30       	cpi	r18, 0x02	; 2
    135e:	31 05       	cpc	r19, r1
    1360:	81 f0       	breq	.+32     	; 0x1382 <DIO_enuSetPortVal+0x6c>
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	9d 81       	ldd	r25, Y+5	; 0x05
    1366:	83 30       	cpi	r24, 0x03	; 3
    1368:	91 05       	cpc	r25, r1
    136a:	81 f0       	breq	.+32     	; 0x138c <DIO_enuSetPortVal+0x76>
    136c:	13 c0       	rjmp	.+38     	; 0x1394 <DIO_enuSetPortVal+0x7e>
			{
				case DIO_PORTA:
				PORTA = Copy_u8Value;
    136e:	eb e3       	ldi	r30, 0x3B	; 59
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	80 83       	st	Z, r24
    1376:	0e c0       	rjmp	.+28     	; 0x1394 <DIO_enuSetPortVal+0x7e>
				break;

				case DIO_PORTB:
				PORTB = Copy_u8Value;
    1378:	e8 e3       	ldi	r30, 0x38	; 56
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	80 83       	st	Z, r24
    1380:	09 c0       	rjmp	.+18     	; 0x1394 <DIO_enuSetPortVal+0x7e>
				break;

				case DIO_PORTC:
				PORTC = Copy_u8Value;
    1382:	e5 e3       	ldi	r30, 0x35	; 53
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	80 83       	st	Z, r24
    138a:	04 c0       	rjmp	.+8      	; 0x1394 <DIO_enuSetPortVal+0x7e>
				break;

				case DIO_PORTD:
				PORTD = Copy_u8Value;
    138c:	e2 e3       	ldi	r30, 0x32	; 50
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_enuSetPortVal+0x88>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    139a:	83 e0       	ldi	r24, 0x03	; 3
    139c:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorState;
    139e:	89 81       	ldd	r24, Y+1	; 0x01

}
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <DIO_enuGetPortVal>:
ES_t DIO_enuGetPortVal(u8 Copy_u8PortID, u8 *Copy_pu8Value){
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <DIO_enuGetPortVal+0x6>
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <DIO_enuGetPortVal+0x8>
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <DIO_enuGetPortVal+0xa>
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	8a 83       	std	Y+2, r24	; 0x02
    13c0:	7c 83       	std	Y+4, r23	; 0x04
    13c2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    13c4:	19 82       	std	Y+1, r1	; 0x01
 if(Copy_pu8Value!=NULL){
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <DIO_enuGetPortVal+0x20>
    13ce:	43 c0       	rjmp	.+134    	; 0x1456 <DIO_enuGetPortVal+0xa6>
		if(Copy_u8PortID <= DIO_PORTD)
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	84 30       	cpi	r24, 0x04	; 4
    13d4:	e8 f5       	brcc	.+122    	; 0x1450 <DIO_enuGetPortVal+0xa0>
		{
			switch(Copy_u8PortID)
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	3e 83       	std	Y+6, r19	; 0x06
    13de:	2d 83       	std	Y+5, r18	; 0x05
    13e0:	8d 81       	ldd	r24, Y+5	; 0x05
    13e2:	9e 81       	ldd	r25, Y+6	; 0x06
    13e4:	81 30       	cpi	r24, 0x01	; 1
    13e6:	91 05       	cpc	r25, r1
    13e8:	e1 f0       	breq	.+56     	; 0x1422 <DIO_enuGetPortVal+0x72>
    13ea:	2d 81       	ldd	r18, Y+5	; 0x05
    13ec:	3e 81       	ldd	r19, Y+6	; 0x06
    13ee:	22 30       	cpi	r18, 0x02	; 2
    13f0:	31 05       	cpc	r19, r1
    13f2:	2c f4       	brge	.+10     	; 0x13fe <DIO_enuGetPortVal+0x4e>
    13f4:	8d 81       	ldd	r24, Y+5	; 0x05
    13f6:	9e 81       	ldd	r25, Y+6	; 0x06
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	61 f0       	breq	.+24     	; 0x1414 <DIO_enuGetPortVal+0x64>
    13fc:	26 c0       	rjmp	.+76     	; 0x144a <DIO_enuGetPortVal+0x9a>
    13fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1400:	3e 81       	ldd	r19, Y+6	; 0x06
    1402:	22 30       	cpi	r18, 0x02	; 2
    1404:	31 05       	cpc	r19, r1
    1406:	a1 f0       	breq	.+40     	; 0x1430 <DIO_enuGetPortVal+0x80>
    1408:	8d 81       	ldd	r24, Y+5	; 0x05
    140a:	9e 81       	ldd	r25, Y+6	; 0x06
    140c:	83 30       	cpi	r24, 0x03	; 3
    140e:	91 05       	cpc	r25, r1
    1410:	b1 f0       	breq	.+44     	; 0x143e <DIO_enuGetPortVal+0x8e>
    1412:	1b c0       	rjmp	.+54     	; 0x144a <DIO_enuGetPortVal+0x9a>
			{
				case DIO_PORTA:
				 *Copy_pu8Value=PINA; //PINA is a reg not pin
    1414:	e9 e3       	ldi	r30, 0x39	; 57
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	eb 81       	ldd	r30, Y+3	; 0x03
    141c:	fc 81       	ldd	r31, Y+4	; 0x04
    141e:	80 83       	st	Z, r24
    1420:	14 c0       	rjmp	.+40     	; 0x144a <DIO_enuGetPortVal+0x9a>
				break;

				case DIO_PORTB:
				 *Copy_pu8Value=PINB;
    1422:	e6 e3       	ldi	r30, 0x36	; 54
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	eb 81       	ldd	r30, Y+3	; 0x03
    142a:	fc 81       	ldd	r31, Y+4	; 0x04
    142c:	80 83       	st	Z, r24
    142e:	0d c0       	rjmp	.+26     	; 0x144a <DIO_enuGetPortVal+0x9a>
				break;

				case DIO_PORTC:
				 *Copy_pu8Value=PINC;
    1430:	e3 e3       	ldi	r30, 0x33	; 51
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	eb 81       	ldd	r30, Y+3	; 0x03
    1438:	fc 81       	ldd	r31, Y+4	; 0x04
    143a:	80 83       	st	Z, r24
    143c:	06 c0       	rjmp	.+12     	; 0x144a <DIO_enuGetPortVal+0x9a>
				break;

				case DIO_PORTD:
			    *Copy_pu8Value=PIND;
    143e:	e0 e3       	ldi	r30, 0x30	; 48
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	eb 81       	ldd	r30, Y+3	; 0x03
    1446:	fc 81       	ldd	r31, Y+4	; 0x04
    1448:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	89 83       	std	Y+1, r24	; 0x01
    144e:	05 c0       	rjmp	.+10     	; 0x145a <DIO_enuGetPortVal+0xaa>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1450:	83 e0       	ldi	r24, 0x03	; 3
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	02 c0       	rjmp	.+4      	; 0x145a <DIO_enuGetPortVal+0xaa>
		}
 }
 else{
	 Local_enuErrorState = ES_NULL_POINTER;
    1456:	82 e0       	ldi	r24, 0x02	; 2
    1458:	89 83       	std	Y+1, r24	; 0x01
 }
		return Local_enuErrorState;
    145a:	89 81       	ldd	r24, Y+1	; 0x01


}
    145c:	26 96       	adiw	r28, 0x06	; 6
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	de bf       	out	0x3e, r29	; 62
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	cd bf       	out	0x3d, r28	; 61
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <DIO_enuTogPortVal>:
ES_t DIO_enuTogPortVal(u8 Copy_u8PortID){
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	00 d0       	rcall	.+0      	; 0x1474 <DIO_enuTogPortVal+0x6>
    1474:	00 d0       	rcall	.+0      	; 0x1476 <DIO_enuTogPortVal+0x8>
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    147c:	19 82       	std	Y+1, r1	; 0x01

			if(Copy_u8PortID <= DIO_PORTD)
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	84 30       	cpi	r24, 0x04	; 4
    1482:	08 f0       	brcs	.+2      	; 0x1486 <DIO_enuTogPortVal+0x18>
    1484:	41 c0       	rjmp	.+130    	; 0x1508 <DIO_enuTogPortVal+0x9a>
			{
				switch(Copy_u8PortID)
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	3c 83       	std	Y+4, r19	; 0x04
    148e:	2b 83       	std	Y+3, r18	; 0x03
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	9c 81       	ldd	r25, Y+4	; 0x04
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	91 05       	cpc	r25, r1
    1498:	e9 f0       	breq	.+58     	; 0x14d4 <DIO_enuTogPortVal+0x66>
    149a:	2b 81       	ldd	r18, Y+3	; 0x03
    149c:	3c 81       	ldd	r19, Y+4	; 0x04
    149e:	22 30       	cpi	r18, 0x02	; 2
    14a0:	31 05       	cpc	r19, r1
    14a2:	2c f4       	brge	.+10     	; 0x14ae <DIO_enuTogPortVal+0x40>
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	9c 81       	ldd	r25, Y+4	; 0x04
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	61 f0       	breq	.+24     	; 0x14c4 <DIO_enuTogPortVal+0x56>
    14ac:	2a c0       	rjmp	.+84     	; 0x1502 <DIO_enuTogPortVal+0x94>
    14ae:	2b 81       	ldd	r18, Y+3	; 0x03
    14b0:	3c 81       	ldd	r19, Y+4	; 0x04
    14b2:	22 30       	cpi	r18, 0x02	; 2
    14b4:	31 05       	cpc	r19, r1
    14b6:	b1 f0       	breq	.+44     	; 0x14e4 <DIO_enuTogPortVal+0x76>
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	9c 81       	ldd	r25, Y+4	; 0x04
    14bc:	83 30       	cpi	r24, 0x03	; 3
    14be:	91 05       	cpc	r25, r1
    14c0:	c9 f0       	breq	.+50     	; 0x14f4 <DIO_enuTogPortVal+0x86>
    14c2:	1f c0       	rjmp	.+62     	; 0x1502 <DIO_enuTogPortVal+0x94>
				{
					case DIO_PORTA:
					 PORTA=~PORTA;
    14c4:	ab e3       	ldi	r26, 0x3B	; 59
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	eb e3       	ldi	r30, 0x3B	; 59
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	80 95       	com	r24
    14d0:	8c 93       	st	X, r24
    14d2:	17 c0       	rjmp	.+46     	; 0x1502 <DIO_enuTogPortVal+0x94>
					break;

					case DIO_PORTB:
					 PORTB=~PORTB;
    14d4:	a8 e3       	ldi	r26, 0x38	; 56
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e8 e3       	ldi	r30, 0x38	; 56
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	80 95       	com	r24
    14e0:	8c 93       	st	X, r24
    14e2:	0f c0       	rjmp	.+30     	; 0x1502 <DIO_enuTogPortVal+0x94>
					break;

					case DIO_PORTC:
					 PORTC=~PORTC;
    14e4:	a5 e3       	ldi	r26, 0x35	; 53
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e5 e3       	ldi	r30, 0x35	; 53
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	80 95       	com	r24
    14f0:	8c 93       	st	X, r24
    14f2:	07 c0       	rjmp	.+14     	; 0x1502 <DIO_enuTogPortVal+0x94>
					break;

					case DIO_PORTD:
					 PORTD=~PORTD;
    14f4:	a2 e3       	ldi	r26, 0x32	; 50
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e2 e3       	ldi	r30, 0x32	; 50
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 95       	com	r24
    1500:	8c 93       	st	X, r24
					break;
				}
				Local_enuErrorState = ES_OK;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	02 c0       	rjmp	.+4      	; 0x150c <DIO_enuTogPortVal+0x9e>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    1508:	83 e0       	ldi	r24, 0x03	; 3
    150a:	89 83       	std	Y+1, r24	; 0x01
			}

			return Local_enuErrorState;
    150c:	89 81       	ldd	r24, Y+1	; 0x01

}
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <DIO_enuSetPinDirection>:


ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID, u8  Copy_u8Value){
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	00 d0       	rcall	.+0      	; 0x1522 <DIO_enuSetPinDirection+0x6>
    1522:	00 d0       	rcall	.+0      	; 0x1524 <DIO_enuSetPinDirection+0x8>
    1524:	00 d0       	rcall	.+0      	; 0x1526 <DIO_enuSetPinDirection+0xa>
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	8a 83       	std	Y+2, r24	; 0x02
    152c:	6b 83       	std	Y+3, r22	; 0x03
    152e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1530:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8PortID <= DIO_PORTD	&& Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT){
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	84 30       	cpi	r24, 0x04	; 4
    1536:	08 f0       	brcs	.+2      	; 0x153a <DIO_enuSetPinDirection+0x1e>
    1538:	d1 c0       	rjmp	.+418    	; 0x16dc <DIO_enuSetPinDirection+0x1c0>
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	88 30       	cpi	r24, 0x08	; 8
    153e:	08 f0       	brcs	.+2      	; 0x1542 <DIO_enuSetPinDirection+0x26>
    1540:	cd c0       	rjmp	.+410    	; 0x16dc <DIO_enuSetPinDirection+0x1c0>
    1542:	8c 81       	ldd	r24, Y+4	; 0x04
    1544:	82 30       	cpi	r24, 0x02	; 2
    1546:	08 f0       	brcs	.+2      	; 0x154a <DIO_enuSetPinDirection+0x2e>
    1548:	c9 c0       	rjmp	.+402    	; 0x16dc <DIO_enuSetPinDirection+0x1c0>
	switch(Copy_u8PortID)
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	3e 83       	std	Y+6, r19	; 0x06
    1552:	2d 83       	std	Y+5, r18	; 0x05
    1554:	6d 81       	ldd	r22, Y+5	; 0x05
    1556:	7e 81       	ldd	r23, Y+6	; 0x06
    1558:	61 30       	cpi	r22, 0x01	; 1
    155a:	71 05       	cpc	r23, r1
    155c:	09 f4       	brne	.+2      	; 0x1560 <DIO_enuSetPinDirection+0x44>
    155e:	41 c0       	rjmp	.+130    	; 0x15e2 <DIO_enuSetPinDirection+0xc6>
    1560:	8d 81       	ldd	r24, Y+5	; 0x05
    1562:	9e 81       	ldd	r25, Y+6	; 0x06
    1564:	82 30       	cpi	r24, 0x02	; 2
    1566:	91 05       	cpc	r25, r1
    1568:	34 f4       	brge	.+12     	; 0x1576 <DIO_enuSetPinDirection+0x5a>
    156a:	2d 81       	ldd	r18, Y+5	; 0x05
    156c:	3e 81       	ldd	r19, Y+6	; 0x06
    156e:	21 15       	cp	r18, r1
    1570:	31 05       	cpc	r19, r1
    1572:	71 f0       	breq	.+28     	; 0x1590 <DIO_enuSetPinDirection+0x74>
    1574:	b0 c0       	rjmp	.+352    	; 0x16d6 <DIO_enuSetPinDirection+0x1ba>
    1576:	6d 81       	ldd	r22, Y+5	; 0x05
    1578:	7e 81       	ldd	r23, Y+6	; 0x06
    157a:	62 30       	cpi	r22, 0x02	; 2
    157c:	71 05       	cpc	r23, r1
    157e:	09 f4       	brne	.+2      	; 0x1582 <DIO_enuSetPinDirection+0x66>
    1580:	59 c0       	rjmp	.+178    	; 0x1634 <DIO_enuSetPinDirection+0x118>
    1582:	8d 81       	ldd	r24, Y+5	; 0x05
    1584:	9e 81       	ldd	r25, Y+6	; 0x06
    1586:	83 30       	cpi	r24, 0x03	; 3
    1588:	91 05       	cpc	r25, r1
    158a:	09 f4       	brne	.+2      	; 0x158e <DIO_enuSetPinDirection+0x72>
    158c:	7c c0       	rjmp	.+248    	; 0x1686 <DIO_enuSetPinDirection+0x16a>
    158e:	a3 c0       	rjmp	.+326    	; 0x16d6 <DIO_enuSetPinDirection+0x1ba>
				{
					case DIO_PORTA:
						DDRA &=~(1 << Copy_u8PinID);
    1590:	aa e3       	ldi	r26, 0x3A	; 58
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	ea e3       	ldi	r30, 0x3A	; 58
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	48 2f       	mov	r20, r24
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <DIO_enuSetPinDirection+0x90>
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	2a 95       	dec	r18
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <DIO_enuSetPinDirection+0x8c>
    15b0:	80 95       	com	r24
    15b2:	84 23       	and	r24, r20
    15b4:	8c 93       	st	X, r24
						DDRA |= (Copy_u8Value << Copy_u8PinID);
    15b6:	aa e3       	ldi	r26, 0x3A	; 58
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	ea e3       	ldi	r30, 0x3A	; 58
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	8c 81       	ldd	r24, Y+4	; 0x04
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	88 2f       	mov	r24, r24
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	b9 01       	movw	r22, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <DIO_enuSetPinDirection+0xba>
    15d2:	66 0f       	add	r22, r22
    15d4:	77 1f       	adc	r23, r23
    15d6:	8a 95       	dec	r24
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <DIO_enuSetPinDirection+0xb6>
    15da:	cb 01       	movw	r24, r22
    15dc:	84 2b       	or	r24, r20
    15de:	8c 93       	st	X, r24
    15e0:	7a c0       	rjmp	.+244    	; 0x16d6 <DIO_enuSetPinDirection+0x1ba>
					break;

					case DIO_PORTB:
						DDRB &=~(1 << Copy_u8PinID);
    15e2:	a7 e3       	ldi	r26, 0x37	; 55
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e7 e3       	ldi	r30, 0x37	; 55
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <DIO_enuSetPinDirection+0xe2>
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	2a 95       	dec	r18
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <DIO_enuSetPinDirection+0xde>
    1602:	80 95       	com	r24
    1604:	84 23       	and	r24, r20
    1606:	8c 93       	st	X, r24
					    DDRB |= (Copy_u8Value << Copy_u8PinID);
    1608:	a7 e3       	ldi	r26, 0x37	; 55
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e7 e3       	ldi	r30, 0x37	; 55
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	48 2f       	mov	r20, r24
    1614:	8c 81       	ldd	r24, Y+4	; 0x04
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	b9 01       	movw	r22, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <DIO_enuSetPinDirection+0x10c>
    1624:	66 0f       	add	r22, r22
    1626:	77 1f       	adc	r23, r23
    1628:	8a 95       	dec	r24
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <DIO_enuSetPinDirection+0x108>
    162c:	cb 01       	movw	r24, r22
    162e:	84 2b       	or	r24, r20
    1630:	8c 93       	st	X, r24
    1632:	51 c0       	rjmp	.+162    	; 0x16d6 <DIO_enuSetPinDirection+0x1ba>
					break;

					case DIO_PORTC:
						DDRC &=~(1 << Copy_u8PinID);
    1634:	a4 e3       	ldi	r26, 0x34	; 52
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e4 e3       	ldi	r30, 0x34	; 52
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	48 2f       	mov	r20, r24
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <DIO_enuSetPinDirection+0x134>
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	2a 95       	dec	r18
    1652:	e2 f7       	brpl	.-8      	; 0x164c <DIO_enuSetPinDirection+0x130>
    1654:	80 95       	com	r24
    1656:	84 23       	and	r24, r20
    1658:	8c 93       	st	X, r24
						DDRC|= (Copy_u8Value << Copy_u8PinID);
    165a:	a4 e3       	ldi	r26, 0x34	; 52
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e4 e3       	ldi	r30, 0x34	; 52
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	48 2f       	mov	r20, r24
    1666:	8c 81       	ldd	r24, Y+4	; 0x04
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	88 2f       	mov	r24, r24
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	b9 01       	movw	r22, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <DIO_enuSetPinDirection+0x15e>
    1676:	66 0f       	add	r22, r22
    1678:	77 1f       	adc	r23, r23
    167a:	8a 95       	dec	r24
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <DIO_enuSetPinDirection+0x15a>
    167e:	cb 01       	movw	r24, r22
    1680:	84 2b       	or	r24, r20
    1682:	8c 93       	st	X, r24
    1684:	28 c0       	rjmp	.+80     	; 0x16d6 <DIO_enuSetPinDirection+0x1ba>
					break;

					case DIO_PORTD:
						DDRD &=~(1 << Copy_u8PinID);
    1686:	a1 e3       	ldi	r26, 0x31	; 49
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e1 e3       	ldi	r30, 0x31	; 49
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	48 2f       	mov	r20, r24
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <DIO_enuSetPinDirection+0x186>
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	2a 95       	dec	r18
    16a4:	e2 f7       	brpl	.-8      	; 0x169e <DIO_enuSetPinDirection+0x182>
    16a6:	80 95       	com	r24
    16a8:	84 23       	and	r24, r20
    16aa:	8c 93       	st	X, r24
						DDRD |= (Copy_u8Value << Copy_u8PinID);
    16ac:	a1 e3       	ldi	r26, 0x31	; 49
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e1 e3       	ldi	r30, 0x31	; 49
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	48 2f       	mov	r20, r24
    16b8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	88 2f       	mov	r24, r24
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	b9 01       	movw	r22, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <DIO_enuSetPinDirection+0x1b0>
    16c8:	66 0f       	add	r22, r22
    16ca:	77 1f       	adc	r23, r23
    16cc:	8a 95       	dec	r24
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <DIO_enuSetPinDirection+0x1ac>
    16d0:	cb 01       	movw	r24, r22
    16d2:	84 2b       	or	r24, r20
    16d4:	8c 93       	st	X, r24
					break;
				}
				Local_enuErrorState = ES_OK;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	89 83       	std	Y+1, r24	; 0x01
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <DIO_enuSetPinDirection+0x1c4>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    16dc:	83 e0       	ldi	r24, 0x03	; 3
    16de:	89 83       	std	Y+1, r24	; 0x01
			}

			return Local_enuErrorState;
    16e0:	89 81       	ldd	r24, Y+1	; 0x01

}
    16e2:	26 96       	adiw	r28, 0x06	; 6
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	f8 94       	cli
    16e8:	de bf       	out	0x3e, r29	; 62
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	cd bf       	out	0x3d, r28	; 61
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <DIO_enuSetPinVal>:

ES_t DIO_enuSetPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID, u8 Copy_u8Value){
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <DIO_enuSetPinVal+0x6>
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <DIO_enuSetPinVal+0x8>
    16fc:	00 d0       	rcall	.+0      	; 0x16fe <DIO_enuSetPinVal+0xa>
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	8a 83       	std	Y+2, r24	; 0x02
    1704:	6b 83       	std	Y+3, r22	; 0x03
    1706:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1708:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_PORTD	&& Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= HIGH){
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	84 30       	cpi	r24, 0x04	; 4
    170e:	08 f0       	brcs	.+2      	; 0x1712 <DIO_enuSetPinVal+0x1e>
    1710:	d1 c0       	rjmp	.+418    	; 0x18b4 <DIO_enuSetPinVal+0x1c0>
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	88 30       	cpi	r24, 0x08	; 8
    1716:	08 f0       	brcs	.+2      	; 0x171a <DIO_enuSetPinVal+0x26>
    1718:	cd c0       	rjmp	.+410    	; 0x18b4 <DIO_enuSetPinVal+0x1c0>
    171a:	8c 81       	ldd	r24, Y+4	; 0x04
    171c:	82 30       	cpi	r24, 0x02	; 2
    171e:	08 f0       	brcs	.+2      	; 0x1722 <DIO_enuSetPinVal+0x2e>
    1720:	c9 c0       	rjmp	.+402    	; 0x18b4 <DIO_enuSetPinVal+0x1c0>
		switch(Copy_u8PortID)
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	3e 83       	std	Y+6, r19	; 0x06
    172a:	2d 83       	std	Y+5, r18	; 0x05
    172c:	6d 81       	ldd	r22, Y+5	; 0x05
    172e:	7e 81       	ldd	r23, Y+6	; 0x06
    1730:	61 30       	cpi	r22, 0x01	; 1
    1732:	71 05       	cpc	r23, r1
    1734:	09 f4       	brne	.+2      	; 0x1738 <DIO_enuSetPinVal+0x44>
    1736:	41 c0       	rjmp	.+130    	; 0x17ba <DIO_enuSetPinVal+0xc6>
    1738:	8d 81       	ldd	r24, Y+5	; 0x05
    173a:	9e 81       	ldd	r25, Y+6	; 0x06
    173c:	82 30       	cpi	r24, 0x02	; 2
    173e:	91 05       	cpc	r25, r1
    1740:	34 f4       	brge	.+12     	; 0x174e <DIO_enuSetPinVal+0x5a>
    1742:	2d 81       	ldd	r18, Y+5	; 0x05
    1744:	3e 81       	ldd	r19, Y+6	; 0x06
    1746:	21 15       	cp	r18, r1
    1748:	31 05       	cpc	r19, r1
    174a:	71 f0       	breq	.+28     	; 0x1768 <DIO_enuSetPinVal+0x74>
    174c:	b0 c0       	rjmp	.+352    	; 0x18ae <DIO_enuSetPinVal+0x1ba>
    174e:	6d 81       	ldd	r22, Y+5	; 0x05
    1750:	7e 81       	ldd	r23, Y+6	; 0x06
    1752:	62 30       	cpi	r22, 0x02	; 2
    1754:	71 05       	cpc	r23, r1
    1756:	09 f4       	brne	.+2      	; 0x175a <DIO_enuSetPinVal+0x66>
    1758:	59 c0       	rjmp	.+178    	; 0x180c <DIO_enuSetPinVal+0x118>
    175a:	8d 81       	ldd	r24, Y+5	; 0x05
    175c:	9e 81       	ldd	r25, Y+6	; 0x06
    175e:	83 30       	cpi	r24, 0x03	; 3
    1760:	91 05       	cpc	r25, r1
    1762:	09 f4       	brne	.+2      	; 0x1766 <DIO_enuSetPinVal+0x72>
    1764:	7c c0       	rjmp	.+248    	; 0x185e <DIO_enuSetPinVal+0x16a>
    1766:	a3 c0       	rjmp	.+326    	; 0x18ae <DIO_enuSetPinVal+0x1ba>
					{
						case DIO_PORTA:
							PORTA &=~(1 << Copy_u8PinID);
    1768:	ab e3       	ldi	r26, 0x3B	; 59
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	eb e3       	ldi	r30, 0x3B	; 59
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	48 2f       	mov	r20, r24
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <DIO_enuSetPinVal+0x90>
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	2a 95       	dec	r18
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <DIO_enuSetPinVal+0x8c>
    1788:	80 95       	com	r24
    178a:	84 23       	and	r24, r20
    178c:	8c 93       	st	X, r24
							PORTA |= (Copy_u8Value << Copy_u8PinID);
    178e:	ab e3       	ldi	r26, 0x3B	; 59
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	eb e3       	ldi	r30, 0x3B	; 59
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	48 2f       	mov	r20, r24
    179a:	8c 81       	ldd	r24, Y+4	; 0x04
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	88 2f       	mov	r24, r24
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	b9 01       	movw	r22, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <DIO_enuSetPinVal+0xba>
    17aa:	66 0f       	add	r22, r22
    17ac:	77 1f       	adc	r23, r23
    17ae:	8a 95       	dec	r24
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <DIO_enuSetPinVal+0xb6>
    17b2:	cb 01       	movw	r24, r22
    17b4:	84 2b       	or	r24, r20
    17b6:	8c 93       	st	X, r24
    17b8:	7a c0       	rjmp	.+244    	; 0x18ae <DIO_enuSetPinVal+0x1ba>
						break;

						case DIO_PORTB:
							PORTB &=~(1 << Copy_u8PinID);
    17ba:	a8 e3       	ldi	r26, 0x38	; 56
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e8 e3       	ldi	r30, 0x38	; 56
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	48 2f       	mov	r20, r24
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <DIO_enuSetPinVal+0xe2>
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	2a 95       	dec	r18
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <DIO_enuSetPinVal+0xde>
    17da:	80 95       	com	r24
    17dc:	84 23       	and	r24, r20
    17de:	8c 93       	st	X, r24
							PORTB |= (Copy_u8Value << Copy_u8PinID);
    17e0:	a8 e3       	ldi	r26, 0x38	; 56
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e8 e3       	ldi	r30, 0x38	; 56
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	48 2f       	mov	r20, r24
    17ec:	8c 81       	ldd	r24, Y+4	; 0x04
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	88 2f       	mov	r24, r24
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	b9 01       	movw	r22, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <DIO_enuSetPinVal+0x10c>
    17fc:	66 0f       	add	r22, r22
    17fe:	77 1f       	adc	r23, r23
    1800:	8a 95       	dec	r24
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <DIO_enuSetPinVal+0x108>
    1804:	cb 01       	movw	r24, r22
    1806:	84 2b       	or	r24, r20
    1808:	8c 93       	st	X, r24
    180a:	51 c0       	rjmp	.+162    	; 0x18ae <DIO_enuSetPinVal+0x1ba>
						break;

						case DIO_PORTC:
							PORTC &=~(1 << Copy_u8PinID);
    180c:	a5 e3       	ldi	r26, 0x35	; 53
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	e5 e3       	ldi	r30, 0x35	; 53
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	48 2f       	mov	r20, r24
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <DIO_enuSetPinVal+0x134>
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	2a 95       	dec	r18
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <DIO_enuSetPinVal+0x130>
    182c:	80 95       	com	r24
    182e:	84 23       	and	r24, r20
    1830:	8c 93       	st	X, r24
							PORTC|= (Copy_u8Value << Copy_u8PinID);
    1832:	a5 e3       	ldi	r26, 0x35	; 53
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e5 e3       	ldi	r30, 0x35	; 53
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	48 2f       	mov	r20, r24
    183e:	8c 81       	ldd	r24, Y+4	; 0x04
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	88 2f       	mov	r24, r24
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	b9 01       	movw	r22, r18
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <DIO_enuSetPinVal+0x15e>
    184e:	66 0f       	add	r22, r22
    1850:	77 1f       	adc	r23, r23
    1852:	8a 95       	dec	r24
    1854:	e2 f7       	brpl	.-8      	; 0x184e <DIO_enuSetPinVal+0x15a>
    1856:	cb 01       	movw	r24, r22
    1858:	84 2b       	or	r24, r20
    185a:	8c 93       	st	X, r24
    185c:	28 c0       	rjmp	.+80     	; 0x18ae <DIO_enuSetPinVal+0x1ba>
						break;

						case DIO_PORTD:
							PORTD &=~(1 << Copy_u8PinID);
    185e:	a2 e3       	ldi	r26, 0x32	; 50
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e2 e3       	ldi	r30, 0x32	; 50
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	48 2f       	mov	r20, r24
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	02 c0       	rjmp	.+4      	; 0x187a <DIO_enuSetPinVal+0x186>
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	2a 95       	dec	r18
    187c:	e2 f7       	brpl	.-8      	; 0x1876 <DIO_enuSetPinVal+0x182>
    187e:	80 95       	com	r24
    1880:	84 23       	and	r24, r20
    1882:	8c 93       	st	X, r24
							PORTD |= (Copy_u8Value << Copy_u8PinID);
    1884:	a2 e3       	ldi	r26, 0x32	; 50
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e2 e3       	ldi	r30, 0x32	; 50
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	48 2f       	mov	r20, r24
    1890:	8c 81       	ldd	r24, Y+4	; 0x04
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	88 2f       	mov	r24, r24
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	b9 01       	movw	r22, r18
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <DIO_enuSetPinVal+0x1b0>
    18a0:	66 0f       	add	r22, r22
    18a2:	77 1f       	adc	r23, r23
    18a4:	8a 95       	dec	r24
    18a6:	e2 f7       	brpl	.-8      	; 0x18a0 <DIO_enuSetPinVal+0x1ac>
    18a8:	cb 01       	movw	r24, r22
    18aa:	84 2b       	or	r24, r20
    18ac:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorState = ES_OK;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <DIO_enuSetPinVal+0x1c4>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
    18b4:	83 e0       	ldi	r24, 0x03	; 3
    18b6:	89 83       	std	Y+1, r24	; 0x01
				}

				return Local_enuErrorState;
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ba:	26 96       	adiw	r28, 0x06	; 6
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	f8 94       	cli
    18c0:	de bf       	out	0x3e, r29	; 62
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	cd bf       	out	0x3d, r28	; 61
    18c6:	cf 91       	pop	r28
    18c8:	df 91       	pop	r29
    18ca:	08 95       	ret

000018cc <DIO_enuGetPinVal>:

ES_t DIO_enuGetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID,u8 *Copy_pu8Value){
    18cc:	df 93       	push	r29
    18ce:	cf 93       	push	r28
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
    18d4:	27 97       	sbiw	r28, 0x07	; 7
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	8a 83       	std	Y+2, r24	; 0x02
    18e2:	6b 83       	std	Y+3, r22	; 0x03
    18e4:	5d 83       	std	Y+5, r21	; 0x05
    18e6:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    18e8:	19 82       	std	Y+1, r1	; 0x01

	 if(Copy_pu8Value!=NULL){
    18ea:	8c 81       	ldd	r24, Y+4	; 0x04
    18ec:	9d 81       	ldd	r25, Y+5	; 0x05
    18ee:	00 97       	sbiw	r24, 0x00	; 0
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <DIO_enuGetPinVal+0x28>
    18f2:	7a c0       	rjmp	.+244    	; 0x19e8 <DIO_enuGetPinVal+0x11c>
			if(Copy_u8PortID <= DIO_PORTD)
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	84 30       	cpi	r24, 0x04	; 4
    18f8:	08 f0       	brcs	.+2      	; 0x18fc <DIO_enuGetPinVal+0x30>
    18fa:	73 c0       	rjmp	.+230    	; 0x19e2 <DIO_enuGetPinVal+0x116>
			{
				switch(Copy_u8PortID)
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	3f 83       	std	Y+7, r19	; 0x07
    1904:	2e 83       	std	Y+6, r18	; 0x06
    1906:	4e 81       	ldd	r20, Y+6	; 0x06
    1908:	5f 81       	ldd	r21, Y+7	; 0x07
    190a:	41 30       	cpi	r20, 0x01	; 1
    190c:	51 05       	cpc	r21, r1
    190e:	59 f1       	breq	.+86     	; 0x1966 <DIO_enuGetPinVal+0x9a>
    1910:	8e 81       	ldd	r24, Y+6	; 0x06
    1912:	9f 81       	ldd	r25, Y+7	; 0x07
    1914:	82 30       	cpi	r24, 0x02	; 2
    1916:	91 05       	cpc	r25, r1
    1918:	34 f4       	brge	.+12     	; 0x1926 <DIO_enuGetPinVal+0x5a>
    191a:	2e 81       	ldd	r18, Y+6	; 0x06
    191c:	3f 81       	ldd	r19, Y+7	; 0x07
    191e:	21 15       	cp	r18, r1
    1920:	31 05       	cpc	r19, r1
    1922:	69 f0       	breq	.+26     	; 0x193e <DIO_enuGetPinVal+0x72>
    1924:	5b c0       	rjmp	.+182    	; 0x19dc <DIO_enuGetPinVal+0x110>
    1926:	4e 81       	ldd	r20, Y+6	; 0x06
    1928:	5f 81       	ldd	r21, Y+7	; 0x07
    192a:	42 30       	cpi	r20, 0x02	; 2
    192c:	51 05       	cpc	r21, r1
    192e:	79 f1       	breq	.+94     	; 0x198e <DIO_enuGetPinVal+0xc2>
    1930:	8e 81       	ldd	r24, Y+6	; 0x06
    1932:	9f 81       	ldd	r25, Y+7	; 0x07
    1934:	83 30       	cpi	r24, 0x03	; 3
    1936:	91 05       	cpc	r25, r1
    1938:	09 f4       	brne	.+2      	; 0x193c <DIO_enuGetPinVal+0x70>
    193a:	3d c0       	rjmp	.+122    	; 0x19b6 <DIO_enuGetPinVal+0xea>
    193c:	4f c0       	rjmp	.+158    	; 0x19dc <DIO_enuGetPinVal+0x110>
				{
					case DIO_PORTA:
					 *Copy_pu8Value=((PINA >> Copy_u8PinID) & 1);
    193e:	e9 e3       	ldi	r30, 0x39	; 57
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	a9 01       	movw	r20, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <DIO_enuGetPinVal+0x8a>
    1952:	55 95       	asr	r21
    1954:	47 95       	ror	r20
    1956:	8a 95       	dec	r24
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <DIO_enuGetPinVal+0x86>
    195a:	ca 01       	movw	r24, r20
    195c:	81 70       	andi	r24, 0x01	; 1
    195e:	ec 81       	ldd	r30, Y+4	; 0x04
    1960:	fd 81       	ldd	r31, Y+5	; 0x05
    1962:	80 83       	st	Z, r24
    1964:	3b c0       	rjmp	.+118    	; 0x19dc <DIO_enuGetPinVal+0x110>
					break;

					case DIO_PORTB:
					 *Copy_pu8Value=((PINB >> Copy_u8PinID) & 1);
    1966:	e6 e3       	ldi	r30, 0x36	; 54
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	88 2f       	mov	r24, r24
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	a9 01       	movw	r20, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <DIO_enuGetPinVal+0xb2>
    197a:	55 95       	asr	r21
    197c:	47 95       	ror	r20
    197e:	8a 95       	dec	r24
    1980:	e2 f7       	brpl	.-8      	; 0x197a <DIO_enuGetPinVal+0xae>
    1982:	ca 01       	movw	r24, r20
    1984:	81 70       	andi	r24, 0x01	; 1
    1986:	ec 81       	ldd	r30, Y+4	; 0x04
    1988:	fd 81       	ldd	r31, Y+5	; 0x05
    198a:	80 83       	st	Z, r24
    198c:	27 c0       	rjmp	.+78     	; 0x19dc <DIO_enuGetPinVal+0x110>
					break;

					case DIO_PORTC:
					 *Copy_pu8Value=((PINC >> Copy_u8PinID) & 1);
    198e:	e3 e3       	ldi	r30, 0x33	; 51
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	88 2f       	mov	r24, r24
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	a9 01       	movw	r20, r18
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <DIO_enuGetPinVal+0xda>
    19a2:	55 95       	asr	r21
    19a4:	47 95       	ror	r20
    19a6:	8a 95       	dec	r24
    19a8:	e2 f7       	brpl	.-8      	; 0x19a2 <DIO_enuGetPinVal+0xd6>
    19aa:	ca 01       	movw	r24, r20
    19ac:	81 70       	andi	r24, 0x01	; 1
    19ae:	ec 81       	ldd	r30, Y+4	; 0x04
    19b0:	fd 81       	ldd	r31, Y+5	; 0x05
    19b2:	80 83       	st	Z, r24
    19b4:	13 c0       	rjmp	.+38     	; 0x19dc <DIO_enuGetPinVal+0x110>
					break;

					case DIO_PORTD:
				    *Copy_pu8Value=((PIND >> Copy_u8PinID) & 1);
    19b6:	e0 e3       	ldi	r30, 0x30	; 48
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	88 2f       	mov	r24, r24
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	a9 01       	movw	r20, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <DIO_enuGetPinVal+0x102>
    19ca:	55 95       	asr	r21
    19cc:	47 95       	ror	r20
    19ce:	8a 95       	dec	r24
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <DIO_enuGetPinVal+0xfe>
    19d2:	ca 01       	movw	r24, r20
    19d4:	81 70       	andi	r24, 0x01	; 1
    19d6:	ec 81       	ldd	r30, Y+4	; 0x04
    19d8:	fd 81       	ldd	r31, Y+5	; 0x05
    19da:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorState = ES_OK;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	05 c0       	rjmp	.+10     	; 0x19ec <DIO_enuGetPinVal+0x120>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    19e2:	83 e0       	ldi	r24, 0x03	; 3
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <DIO_enuGetPinVal+0x120>
			}
	 }
	 else{
		 Local_enuErrorState = ES_NULL_POINTER;
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	89 83       	std	Y+1, r24	; 0x01
	 }
			return Local_enuErrorState;
    19ec:	89 81       	ldd	r24, Y+1	; 0x01


}
    19ee:	27 96       	adiw	r28, 0x07	; 7
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <DIO_enuTogPinVal>:
ES_t DIO_enuTogPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID){
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <DIO_enuTogPinVal+0x6>
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <DIO_enuTogPinVal+0x8>
    1a08:	0f 92       	push	r0
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	8a 83       	std	Y+2, r24	; 0x02
    1a10:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1a12:	19 82       	std	Y+1, r1	; 0x01

				if(Copy_u8PortID <= DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	84 30       	cpi	r24, 0x04	; 4
    1a18:	08 f0       	brcs	.+2      	; 0x1a1c <DIO_enuTogPinVal+0x1c>
    1a1a:	75 c0       	rjmp	.+234    	; 0x1b06 <DIO_enuTogPinVal+0x106>
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	88 30       	cpi	r24, 0x08	; 8
    1a20:	08 f0       	brcs	.+2      	; 0x1a24 <DIO_enuTogPinVal+0x24>
    1a22:	71 c0       	rjmp	.+226    	; 0x1b06 <DIO_enuTogPinVal+0x106>
				{
					switch(Copy_u8PortID)
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	3d 83       	std	Y+5, r19	; 0x05
    1a2c:	2c 83       	std	Y+4, r18	; 0x04
    1a2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a30:	9d 81       	ldd	r25, Y+5	; 0x05
    1a32:	81 30       	cpi	r24, 0x01	; 1
    1a34:	91 05       	cpc	r25, r1
    1a36:	49 f1       	breq	.+82     	; 0x1a8a <DIO_enuTogPinVal+0x8a>
    1a38:	2c 81       	ldd	r18, Y+4	; 0x04
    1a3a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a3c:	22 30       	cpi	r18, 0x02	; 2
    1a3e:	31 05       	cpc	r19, r1
    1a40:	2c f4       	brge	.+10     	; 0x1a4c <DIO_enuTogPinVal+0x4c>
    1a42:	8c 81       	ldd	r24, Y+4	; 0x04
    1a44:	9d 81       	ldd	r25, Y+5	; 0x05
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	61 f0       	breq	.+24     	; 0x1a62 <DIO_enuTogPinVal+0x62>
    1a4a:	5a c0       	rjmp	.+180    	; 0x1b00 <DIO_enuTogPinVal+0x100>
    1a4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a50:	22 30       	cpi	r18, 0x02	; 2
    1a52:	31 05       	cpc	r19, r1
    1a54:	71 f1       	breq	.+92     	; 0x1ab2 <DIO_enuTogPinVal+0xb2>
    1a56:	8c 81       	ldd	r24, Y+4	; 0x04
    1a58:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5a:	83 30       	cpi	r24, 0x03	; 3
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	e9 f1       	breq	.+122    	; 0x1ada <DIO_enuTogPinVal+0xda>
    1a60:	4f c0       	rjmp	.+158    	; 0x1b00 <DIO_enuTogPinVal+0x100>
					{
						case DIO_PORTA:
						 PORTA^=(1 << Copy_u8PinID);
    1a62:	ab e3       	ldi	r26, 0x3B	; 59
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	eb e3       	ldi	r30, 0x3B	; 59
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	48 2f       	mov	r20, r24
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	02 2e       	mov	r0, r18
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <DIO_enuTogPinVal+0x80>
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	0a 94       	dec	r0
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <DIO_enuTogPinVal+0x7c>
    1a84:	84 27       	eor	r24, r20
    1a86:	8c 93       	st	X, r24
    1a88:	3b c0       	rjmp	.+118    	; 0x1b00 <DIO_enuTogPinVal+0x100>
						break;

						case DIO_PORTB:
						 PORTB^=(1 << Copy_u8PinID);
    1a8a:	a8 e3       	ldi	r26, 0x38	; 56
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e8 e3       	ldi	r30, 0x38	; 56
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	48 2f       	mov	r20, r24
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	02 2e       	mov	r0, r18
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <DIO_enuTogPinVal+0xa8>
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	0a 94       	dec	r0
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <DIO_enuTogPinVal+0xa4>
    1aac:	84 27       	eor	r24, r20
    1aae:	8c 93       	st	X, r24
    1ab0:	27 c0       	rjmp	.+78     	; 0x1b00 <DIO_enuTogPinVal+0x100>
						break;

						case DIO_PORTC:
						 PORTC^=(1 << Copy_u8PinID);
    1ab2:	a5 e3       	ldi	r26, 0x35	; 53
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e5 e3       	ldi	r30, 0x35	; 53
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	48 2f       	mov	r20, r24
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	02 2e       	mov	r0, r18
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <DIO_enuTogPinVal+0xd0>
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	0a 94       	dec	r0
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <DIO_enuTogPinVal+0xcc>
    1ad4:	84 27       	eor	r24, r20
    1ad6:	8c 93       	st	X, r24
    1ad8:	13 c0       	rjmp	.+38     	; 0x1b00 <DIO_enuTogPinVal+0x100>
						break;

						case DIO_PORTD:
						 PORTD^=(1 << Copy_u8PinID);
    1ada:	a2 e3       	ldi	r26, 0x32	; 50
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e2 e3       	ldi	r30, 0x32	; 50
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	48 2f       	mov	r20, r24
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	02 2e       	mov	r0, r18
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <DIO_enuTogPinVal+0xf8>
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	0a 94       	dec	r0
    1afa:	e2 f7       	brpl	.-8      	; 0x1af4 <DIO_enuTogPinVal+0xf4>
    1afc:	84 27       	eor	r24, r20
    1afe:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorState = ES_OK;
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <DIO_enuTogPinVal+0x10a>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
    1b06:	83 e0       	ldi	r24, 0x03	; 3
    1b08:	89 83       	std	Y+1, r24	; 0x01
				}

				return Local_enuErrorState;
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01

	}
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <LCD_enuInit>:
#include "LCD_config.h"
#include "LCD_priv.h"

#include "util/delay.h"
ES_t LCD_enuInit(void)
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	e9 97       	sbiw	r28, 0x39	; 57
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    1b30:	19 ae       	std	Y+57, r1	; 0x39
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	a0 ef       	ldi	r26, 0xF0	; 240
    1b38:	b1 e4       	ldi	r27, 0x41	; 65
    1b3a:	8d ab       	std	Y+53, r24	; 0x35
    1b3c:	9e ab       	std	Y+54, r25	; 0x36
    1b3e:	af ab       	std	Y+55, r26	; 0x37
    1b40:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b42:	6d a9       	ldd	r22, Y+53	; 0x35
    1b44:	7e a9       	ldd	r23, Y+54	; 0x36
    1b46:	8f a9       	ldd	r24, Y+55	; 0x37
    1b48:	98 ad       	ldd	r25, Y+56	; 0x38
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	4a e7       	ldi	r20, 0x7A	; 122
    1b50:	53 e4       	ldi	r21, 0x43	; 67
    1b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	89 ab       	std	Y+49, r24	; 0x31
    1b5c:	9a ab       	std	Y+50, r25	; 0x32
    1b5e:	ab ab       	std	Y+51, r26	; 0x33
    1b60:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b62:	69 a9       	ldd	r22, Y+49	; 0x31
    1b64:	7a a9       	ldd	r23, Y+50	; 0x32
    1b66:	8b a9       	ldd	r24, Y+51	; 0x33
    1b68:	9c a9       	ldd	r25, Y+52	; 0x34
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e8       	ldi	r20, 0x80	; 128
    1b70:	5f e3       	ldi	r21, 0x3F	; 63
    1b72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b76:	88 23       	and	r24, r24
    1b78:	2c f4       	brge	.+10     	; 0x1b84 <LCD_enuInit+0x68>
		__ticks = 1;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	98 ab       	std	Y+48, r25	; 0x30
    1b80:	8f a7       	std	Y+47, r24	; 0x2f
    1b82:	3f c0       	rjmp	.+126    	; 0x1c02 <LCD_enuInit+0xe6>
	else if (__tmp > 65535)
    1b84:	69 a9       	ldd	r22, Y+49	; 0x31
    1b86:	7a a9       	ldd	r23, Y+50	; 0x32
    1b88:	8b a9       	ldd	r24, Y+51	; 0x33
    1b8a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	3f ef       	ldi	r19, 0xFF	; 255
    1b90:	4f e7       	ldi	r20, 0x7F	; 127
    1b92:	57 e4       	ldi	r21, 0x47	; 71
    1b94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b98:	18 16       	cp	r1, r24
    1b9a:	4c f5       	brge	.+82     	; 0x1bee <LCD_enuInit+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b9e:	7e a9       	ldd	r23, Y+54	; 0x36
    1ba0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ba2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e2       	ldi	r20, 0x20	; 32
    1baa:	51 e4       	ldi	r21, 0x41	; 65
    1bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	bc 01       	movw	r22, r24
    1bb6:	cd 01       	movw	r24, r26
    1bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	98 ab       	std	Y+48, r25	; 0x30
    1bc2:	8f a7       	std	Y+47, r24	; 0x2f
    1bc4:	0f c0       	rjmp	.+30     	; 0x1be4 <LCD_enuInit+0xc8>
    1bc6:	89 e1       	ldi	r24, 0x19	; 25
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9e a7       	std	Y+46, r25	; 0x2e
    1bcc:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bce:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bd0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <LCD_enuInit+0xb6>
    1bd6:	9e a7       	std	Y+46, r25	; 0x2e
    1bd8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bda:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bdc:	98 a9       	ldd	r25, Y+48	; 0x30
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	98 ab       	std	Y+48, r25	; 0x30
    1be2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1be6:	98 a9       	ldd	r25, Y+48	; 0x30
    1be8:	00 97       	sbiw	r24, 0x00	; 0
    1bea:	69 f7       	brne	.-38     	; 0x1bc6 <LCD_enuInit+0xaa>
    1bec:	14 c0       	rjmp	.+40     	; 0x1c16 <LCD_enuInit+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bee:	69 a9       	ldd	r22, Y+49	; 0x31
    1bf0:	7a a9       	ldd	r23, Y+50	; 0x32
    1bf2:	8b a9       	ldd	r24, Y+51	; 0x33
    1bf4:	9c a9       	ldd	r25, Y+52	; 0x34
    1bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	98 ab       	std	Y+48, r25	; 0x30
    1c00:	8f a7       	std	Y+47, r24	; 0x2f
    1c02:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c04:	98 a9       	ldd	r25, Y+48	; 0x30
    1c06:	9c a7       	std	Y+44, r25	; 0x2c
    1c08:	8b a7       	std	Y+43, r24	; 0x2b
    1c0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <LCD_enuInit+0xf2>
    1c12:	9c a7       	std	Y+44, r25	; 0x2c
    1c14:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);
/*set direction for control pins "Output"*/
DIO_enuSetPinDirection(RS_PORT,RS_PIN,DIO_u8OUTPUT);
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	60 e0       	ldi	r22, 0x00	; 0
    1c1a:	41 e0       	ldi	r20, 0x01	; 1
    1c1c:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(RW_PORT,RW_PIN,DIO_u8OUTPUT);
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	61 e0       	ldi	r22, 0x01	; 1
    1c24:	41 e0       	ldi	r20, 0x01	; 1
    1c26:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(EN_PORT,EN_PIN,DIO_u8OUTPUT);
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	62 e0       	ldi	r22, 0x02	; 2
    1c2e:	41 e0       	ldi	r20, 0x01	; 1
    1c30:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_enuSetPinDirection>
/*set direction for Data pins "Output"*/
DIO_enuSetPinDirection(D7_PORT,D7_PIN,DIO_u8OUTPUT);
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	41 e0       	ldi	r20, 0x01	; 1
    1c3a:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(D6_PORT,D6_PIN,DIO_u8OUTPUT);
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	61 e0       	ldi	r22, 0x01	; 1
    1c42:	41 e0       	ldi	r20, 0x01	; 1
    1c44:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(D5_PORT,D5_PIN,DIO_u8OUTPUT);
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	62 e0       	ldi	r22, 0x02	; 2
    1c4c:	41 e0       	ldi	r20, 0x01	; 1
    1c4e:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(D4_PORT,D4_PIN,DIO_u8OUTPUT);
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	63 e0       	ldi	r22, 0x03	; 3
    1c56:	41 e0       	ldi	r20, 0x01	; 1
    1c58:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_enuSetPinDirection>

#if LCD_MODE == EIGHT_BIT
DIO_enuSetPinDirection(D3_PORT,D3_PIN,DIO_u8OUTPUT);
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	64 e0       	ldi	r22, 0x04	; 4
    1c60:	41 e0       	ldi	r20, 0x01	; 1
    1c62:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(D2_PORT,D2_PIN,DIO_u8OUTPUT);
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	65 e0       	ldi	r22, 0x05	; 5
    1c6a:	41 e0       	ldi	r20, 0x01	; 1
    1c6c:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(D1_PORT,D1_PIN,DIO_u8OUTPUT);
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	66 e0       	ldi	r22, 0x06	; 6
    1c74:	41 e0       	ldi	r20, 0x01	; 1
    1c76:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(D0_PORT,D0_PIN,DIO_u8OUTPUT);
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	67 e0       	ldi	r22, 0x07	; 7
    1c7e:	41 e0       	ldi	r20, 0x01	; 1
    1c80:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_enuSetPinDirection>

/*Function Set for 8 mode*/
LCD_invidSendCommand(FUN_SET_EIGHT);
    1c84:	88 e3       	ldi	r24, 0x38	; 56
    1c86:	0e 94 ce 10 	call	0x219c	; 0x219c <LCD_invidSendCommand>
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	a0 e8       	ldi	r26, 0x80	; 128
    1c90:	bf e3       	ldi	r27, 0x3F	; 63
    1c92:	8f a3       	std	Y+39, r24	; 0x27
    1c94:	98 a7       	std	Y+40, r25	; 0x28
    1c96:	a9 a7       	std	Y+41, r26	; 0x29
    1c98:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c9c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1ca0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	4a e7       	ldi	r20, 0x7A	; 122
    1ca8:	53 e4       	ldi	r21, 0x43	; 67
    1caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	8b a3       	std	Y+35, r24	; 0x23
    1cb4:	9c a3       	std	Y+36, r25	; 0x24
    1cb6:	ad a3       	std	Y+37, r26	; 0x25
    1cb8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cba:	6b a1       	ldd	r22, Y+35	; 0x23
    1cbc:	7c a1       	ldd	r23, Y+36	; 0x24
    1cbe:	8d a1       	ldd	r24, Y+37	; 0x25
    1cc0:	9e a1       	ldd	r25, Y+38	; 0x26
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e8       	ldi	r20, 0x80	; 128
    1cc8:	5f e3       	ldi	r21, 0x3F	; 63
    1cca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cce:	88 23       	and	r24, r24
    1cd0:	2c f4       	brge	.+10     	; 0x1cdc <LCD_enuInit+0x1c0>
		__ticks = 1;
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	9a a3       	std	Y+34, r25	; 0x22
    1cd8:	89 a3       	std	Y+33, r24	; 0x21
    1cda:	3f c0       	rjmp	.+126    	; 0x1d5a <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    1cdc:	6b a1       	ldd	r22, Y+35	; 0x23
    1cde:	7c a1       	ldd	r23, Y+36	; 0x24
    1ce0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ce2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	3f ef       	ldi	r19, 0xFF	; 255
    1ce8:	4f e7       	ldi	r20, 0x7F	; 127
    1cea:	57 e4       	ldi	r21, 0x47	; 71
    1cec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf0:	18 16       	cp	r1, r24
    1cf2:	4c f5       	brge	.+82     	; 0x1d46 <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf4:	6f a1       	ldd	r22, Y+39	; 0x27
    1cf6:	78 a5       	ldd	r23, Y+40	; 0x28
    1cf8:	89 a5       	ldd	r24, Y+41	; 0x29
    1cfa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e2       	ldi	r20, 0x20	; 32
    1d02:	51 e4       	ldi	r21, 0x41	; 65
    1d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	bc 01       	movw	r22, r24
    1d0e:	cd 01       	movw	r24, r26
    1d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	9a a3       	std	Y+34, r25	; 0x22
    1d1a:	89 a3       	std	Y+33, r24	; 0x21
    1d1c:	0f c0       	rjmp	.+30     	; 0x1d3c <LCD_enuInit+0x220>
    1d1e:	89 e1       	ldi	r24, 0x19	; 25
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	98 a3       	std	Y+32, r25	; 0x20
    1d24:	8f 8f       	std	Y+31, r24	; 0x1f
    1d26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d28:	98 a1       	ldd	r25, Y+32	; 0x20
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	f1 f7       	brne	.-4      	; 0x1d2a <LCD_enuInit+0x20e>
    1d2e:	98 a3       	std	Y+32, r25	; 0x20
    1d30:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d32:	89 a1       	ldd	r24, Y+33	; 0x21
    1d34:	9a a1       	ldd	r25, Y+34	; 0x22
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	9a a3       	std	Y+34, r25	; 0x22
    1d3a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d3e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	69 f7       	brne	.-38     	; 0x1d1e <LCD_enuInit+0x202>
    1d44:	14 c0       	rjmp	.+40     	; 0x1d6e <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d46:	6b a1       	ldd	r22, Y+35	; 0x23
    1d48:	7c a1       	ldd	r23, Y+36	; 0x24
    1d4a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d4c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	9a a3       	std	Y+34, r25	; 0x22
    1d58:	89 a3       	std	Y+33, r24	; 0x21
    1d5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d5e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d60:	8d 8f       	std	Y+29, r24	; 0x1d
    1d62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d64:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <LCD_enuInit+0x24a>
    1d6a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d6c:	8d 8f       	std	Y+29, r24	; 0x1d
LCD_invidSendCommend(FUN_SET_FOUR);
#else
#error "LCD_MODE has a wrong selection"
#endif
   _delay_ms(1);
	LCD_invidSendCommand(DISPLAY_ON); //display on and cursor and blink
    1d6e:	8f e0       	ldi	r24, 0x0F	; 15
    1d70:	0e 94 ce 10 	call	0x219c	; 0x219c <LCD_invidSendCommand>
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	a0 e8       	ldi	r26, 0x80	; 128
    1d7a:	bf e3       	ldi	r27, 0x3F	; 63
    1d7c:	89 8f       	std	Y+25, r24	; 0x19
    1d7e:	9a 8f       	std	Y+26, r25	; 0x1a
    1d80:	ab 8f       	std	Y+27, r26	; 0x1b
    1d82:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d84:	69 8d       	ldd	r22, Y+25	; 0x19
    1d86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	4a e7       	ldi	r20, 0x7A	; 122
    1d92:	53 e4       	ldi	r21, 0x43	; 67
    1d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	8d 8b       	std	Y+21, r24	; 0x15
    1d9e:	9e 8b       	std	Y+22, r25	; 0x16
    1da0:	af 8b       	std	Y+23, r26	; 0x17
    1da2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1da4:	6d 89       	ldd	r22, Y+21	; 0x15
    1da6:	7e 89       	ldd	r23, Y+22	; 0x16
    1da8:	8f 89       	ldd	r24, Y+23	; 0x17
    1daa:	98 8d       	ldd	r25, Y+24	; 0x18
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e8       	ldi	r20, 0x80	; 128
    1db2:	5f e3       	ldi	r21, 0x3F	; 63
    1db4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1db8:	88 23       	and	r24, r24
    1dba:	2c f4       	brge	.+10     	; 0x1dc6 <LCD_enuInit+0x2aa>
		__ticks = 1;
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	9c 8b       	std	Y+20, r25	; 0x14
    1dc2:	8b 8b       	std	Y+19, r24	; 0x13
    1dc4:	3f c0       	rjmp	.+126    	; 0x1e44 <LCD_enuInit+0x328>
	else if (__tmp > 65535)
    1dc6:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dca:	8f 89       	ldd	r24, Y+23	; 0x17
    1dcc:	98 8d       	ldd	r25, Y+24	; 0x18
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	3f ef       	ldi	r19, 0xFF	; 255
    1dd2:	4f e7       	ldi	r20, 0x7F	; 127
    1dd4:	57 e4       	ldi	r21, 0x47	; 71
    1dd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dda:	18 16       	cp	r1, r24
    1ddc:	4c f5       	brge	.+82     	; 0x1e30 <LCD_enuInit+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dde:	69 8d       	ldd	r22, Y+25	; 0x19
    1de0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1de2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1de4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	40 e2       	ldi	r20, 0x20	; 32
    1dec:	51 e4       	ldi	r21, 0x41	; 65
    1dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	bc 01       	movw	r22, r24
    1df8:	cd 01       	movw	r24, r26
    1dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	9c 8b       	std	Y+20, r25	; 0x14
    1e04:	8b 8b       	std	Y+19, r24	; 0x13
    1e06:	0f c0       	rjmp	.+30     	; 0x1e26 <LCD_enuInit+0x30a>
    1e08:	89 e1       	ldi	r24, 0x19	; 25
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	9a 8b       	std	Y+18, r25	; 0x12
    1e0e:	89 8b       	std	Y+17, r24	; 0x11
    1e10:	89 89       	ldd	r24, Y+17	; 0x11
    1e12:	9a 89       	ldd	r25, Y+18	; 0x12
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	f1 f7       	brne	.-4      	; 0x1e14 <LCD_enuInit+0x2f8>
    1e18:	9a 8b       	std	Y+18, r25	; 0x12
    1e1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	9c 8b       	std	Y+20, r25	; 0x14
    1e24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e26:	8b 89       	ldd	r24, Y+19	; 0x13
    1e28:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	69 f7       	brne	.-38     	; 0x1e08 <LCD_enuInit+0x2ec>
    1e2e:	14 c0       	rjmp	.+40     	; 0x1e58 <LCD_enuInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e30:	6d 89       	ldd	r22, Y+21	; 0x15
    1e32:	7e 89       	ldd	r23, Y+22	; 0x16
    1e34:	8f 89       	ldd	r24, Y+23	; 0x17
    1e36:	98 8d       	ldd	r25, Y+24	; 0x18
    1e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	9c 8b       	std	Y+20, r25	; 0x14
    1e42:	8b 8b       	std	Y+19, r24	; 0x13
    1e44:	8b 89       	ldd	r24, Y+19	; 0x13
    1e46:	9c 89       	ldd	r25, Y+20	; 0x14
    1e48:	98 8b       	std	Y+16, r25	; 0x10
    1e4a:	8f 87       	std	Y+15, r24	; 0x0f
    1e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e4e:	98 89       	ldd	r25, Y+16	; 0x10
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	f1 f7       	brne	.-4      	; 0x1e50 <LCD_enuInit+0x334>
    1e54:	98 8b       	std	Y+16, r25	; 0x10
    1e56:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommand(DISPLAY_CLEAR);
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	0e 94 ce 10 	call	0x219c	; 0x219c <LCD_invidSendCommand>
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	a0 e0       	ldi	r26, 0x00	; 0
    1e64:	b0 e4       	ldi	r27, 0x40	; 64
    1e66:	8b 87       	std	Y+11, r24	; 0x0b
    1e68:	9c 87       	std	Y+12, r25	; 0x0c
    1e6a:	ad 87       	std	Y+13, r26	; 0x0d
    1e6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	4a e7       	ldi	r20, 0x7A	; 122
    1e7c:	53 e4       	ldi	r21, 0x43	; 67
    1e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	8f 83       	std	Y+7, r24	; 0x07
    1e88:	98 87       	std	Y+8, r25	; 0x08
    1e8a:	a9 87       	std	Y+9, r26	; 0x09
    1e8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e90:	78 85       	ldd	r23, Y+8	; 0x08
    1e92:	89 85       	ldd	r24, Y+9	; 0x09
    1e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e8       	ldi	r20, 0x80	; 128
    1e9c:	5f e3       	ldi	r21, 0x3F	; 63
    1e9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea2:	88 23       	and	r24, r24
    1ea4:	2c f4       	brge	.+10     	; 0x1eb0 <LCD_enuInit+0x394>
		__ticks = 1;
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	9e 83       	std	Y+6, r25	; 0x06
    1eac:	8d 83       	std	Y+5, r24	; 0x05
    1eae:	3f c0       	rjmp	.+126    	; 0x1f2e <LCD_enuInit+0x412>
	else if (__tmp > 65535)
    1eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb2:	78 85       	ldd	r23, Y+8	; 0x08
    1eb4:	89 85       	ldd	r24, Y+9	; 0x09
    1eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	3f ef       	ldi	r19, 0xFF	; 255
    1ebc:	4f e7       	ldi	r20, 0x7F	; 127
    1ebe:	57 e4       	ldi	r21, 0x47	; 71
    1ec0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec4:	18 16       	cp	r1, r24
    1ec6:	4c f5       	brge	.+82     	; 0x1f1a <LCD_enuInit+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ece:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e2       	ldi	r20, 0x20	; 32
    1ed6:	51 e4       	ldi	r21, 0x41	; 65
    1ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	bc 01       	movw	r22, r24
    1ee2:	cd 01       	movw	r24, r26
    1ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	9e 83       	std	Y+6, r25	; 0x06
    1eee:	8d 83       	std	Y+5, r24	; 0x05
    1ef0:	0f c0       	rjmp	.+30     	; 0x1f10 <LCD_enuInit+0x3f4>
    1ef2:	89 e1       	ldi	r24, 0x19	; 25
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	9c 83       	std	Y+4, r25	; 0x04
    1ef8:	8b 83       	std	Y+3, r24	; 0x03
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	f1 f7       	brne	.-4      	; 0x1efe <LCD_enuInit+0x3e2>
    1f02:	9c 83       	std	Y+4, r25	; 0x04
    1f04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
    1f08:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	9e 83       	std	Y+6, r25	; 0x06
    1f0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	9e 81       	ldd	r25, Y+6	; 0x06
    1f14:	00 97       	sbiw	r24, 0x00	; 0
    1f16:	69 f7       	brne	.-38     	; 0x1ef2 <LCD_enuInit+0x3d6>
    1f18:	14 c0       	rjmp	.+40     	; 0x1f42 <LCD_enuInit+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1c:	78 85       	ldd	r23, Y+8	; 0x08
    1f1e:	89 85       	ldd	r24, Y+9	; 0x09
    1f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	9e 83       	std	Y+6, r25	; 0x06
    1f2c:	8d 83       	std	Y+5, r24	; 0x05
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	9a 83       	std	Y+2, r25	; 0x02
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <LCD_enuInit+0x41e>
    1f3e:	9a 83       	std	Y+2, r25	; 0x02
    1f40:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommand(ENTRY_MODE); //Write left to right increase
    1f42:	86 e0       	ldi	r24, 0x06	; 6
    1f44:	0e 94 ce 10 	call	0x219c	; 0x219c <LCD_invidSendCommand>
	return Local_enuErrorState;
    1f48:	89 ad       	ldd	r24, Y+57	; 0x39


}
    1f4a:	e9 96       	adiw	r28, 0x39	; 57
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	f8 94       	cli
    1f50:	de bf       	out	0x3e, r29	; 62
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	cd bf       	out	0x3d, r28	; 61
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <LCD_enuDisplayChar>:
ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	00 d0       	rcall	.+0      	; 0x1f62 <LCD_enuDisplayChar+0x6>
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1f68:	19 82       	std	Y+1, r1	; 0x01

	/*set pin value for RS=1 to DATA*/
	DIO_enuSetPinVal(RS_PORT , RS_PIN , DIO_u8HIGH);
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	60 e0       	ldi	r22, 0x00	; 0
    1f6e:	41 e0       	ldi	r20, 0x01	; 1
    1f70:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <DIO_enuSetPinVal>

	LCD_vidLatch(Copy_u8Data);
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_vidLatch>

	return Local_enuErrorState;
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01


}
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	cf 91       	pop	r28
    1f82:	df 91       	pop	r29
    1f84:	08 95       	ret

00001f86 <LCD_enuSendCommand>:
ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	00 d0       	rcall	.+0      	; 0x1f8c <LCD_enuSendCommand+0x6>
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1f92:	19 82       	std	Y+1, r1	; 0x01

	/*set pin value for RS=0 to command*/
	Local_enuErrorState=DIO_enuSetPinVal(RS_PORT,RS_PIN,DIO_u8LOW);
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	60 e0       	ldi	r22, 0x00	; 0
    1f98:	40 e0       	ldi	r20, 0x00	; 0
    1f9a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <DIO_enuSetPinVal>
    1f9e:	89 83       	std	Y+1, r24	; 0x01
	 LCD_vidLatch(Copy_u8Command);
    1fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa2:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_vidLatch>



	return Local_enuErrorState;
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01


}
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <LCD_vidLatch>:
static void LCD_vidLatch(u8 Copy_u8Data){
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	2f 97       	sbiw	r28, 0x0f	; 15
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	de bf       	out	0x3e, r29	; 62
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	cd bf       	out	0x3d, r28	; 61
    1fc6:	8f 87       	std	Y+15, r24	; 0x0f


	    /* set pin value for RW=0 to write ,Enable pin (EN)=LOW */
		DIO_enuSetPinVal(RW_PORT,RW_PIN,DIO_u8LOW);
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	61 e0       	ldi	r22, 0x01	; 1
    1fcc:	40 e0       	ldi	r20, 0x00	; 0
    1fce:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <DIO_enuSetPinVal>
	    DIO_enuSetPinVal(EN_PORT,EN_PIN,DIO_u8LOW);
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	62 e0       	ldi	r22, 0x02	; 2
    1fd6:	40 e0       	ldi	r20, 0x00	; 0
    1fd8:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <DIO_enuSetPinVal>

	    /* set pin value for DATA pins */
	    DIO_enuSetPinVal(D7_PORT,D7_PIN,(Copy_u8Data>>BIT_SEVEN)&MASK_NUM);
    1fdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fde:	98 2f       	mov	r25, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	99 27       	eor	r25, r25
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	60 e0       	ldi	r22, 0x00	; 0
    1fea:	49 2f       	mov	r20, r25
    1fec:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <DIO_enuSetPinVal>
	    DIO_enuSetPinVal(D6_PORT,D6_PIN,(Copy_u8Data>>BIT_SIX  )&MASK_NUM);
    1ff0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff2:	82 95       	swap	r24
    1ff4:	86 95       	lsr	r24
    1ff6:	86 95       	lsr	r24
    1ff8:	83 70       	andi	r24, 0x03	; 3
    1ffa:	98 2f       	mov	r25, r24
    1ffc:	91 70       	andi	r25, 0x01	; 1
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	61 e0       	ldi	r22, 0x01	; 1
    2002:	49 2f       	mov	r20, r25
    2004:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <DIO_enuSetPinVal>
	    DIO_enuSetPinVal(D5_PORT,D5_PIN,(Copy_u8Data>>BIT_FIVE )&MASK_NUM);
    2008:	8f 85       	ldd	r24, Y+15	; 0x0f
    200a:	82 95       	swap	r24
    200c:	86 95       	lsr	r24
    200e:	87 70       	andi	r24, 0x07	; 7
    2010:	98 2f       	mov	r25, r24
    2012:	91 70       	andi	r25, 0x01	; 1
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	62 e0       	ldi	r22, 0x02	; 2
    2018:	49 2f       	mov	r20, r25
    201a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <DIO_enuSetPinVal>
	    DIO_enuSetPinVal(D4_PORT,D4_PIN,(Copy_u8Data>>BIT_FOUR)&MASK_NUM);
    201e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2020:	82 95       	swap	r24
    2022:	8f 70       	andi	r24, 0x0F	; 15
    2024:	98 2f       	mov	r25, r24
    2026:	91 70       	andi	r25, 0x01	; 1
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	63 e0       	ldi	r22, 0x03	; 3
    202c:	49 2f       	mov	r20, r25
    202e:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <DIO_enuSetPinVal>
#if LCD_MODE ==EIGHT_BIT
		DIO_enuSetPinVal(D3_PORT,D3_PIN,(Copy_u8Data>>BIT_THREE)&MASK_NUM);
    2032:	8f 85       	ldd	r24, Y+15	; 0x0f
    2034:	86 95       	lsr	r24
    2036:	86 95       	lsr	r24
    2038:	86 95       	lsr	r24
    203a:	98 2f       	mov	r25, r24
    203c:	91 70       	andi	r25, 0x01	; 1
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	64 e0       	ldi	r22, 0x04	; 4
    2042:	49 2f       	mov	r20, r25
    2044:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <DIO_enuSetPinVal>
		DIO_enuSetPinVal(D2_PORT,D2_PIN,(Copy_u8Data>>BIT_TWO  )&MASK_NUM);
    2048:	8f 85       	ldd	r24, Y+15	; 0x0f
    204a:	86 95       	lsr	r24
    204c:	86 95       	lsr	r24
    204e:	98 2f       	mov	r25, r24
    2050:	91 70       	andi	r25, 0x01	; 1
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	65 e0       	ldi	r22, 0x05	; 5
    2056:	49 2f       	mov	r20, r25
    2058:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <DIO_enuSetPinVal>
		DIO_enuSetPinVal(D1_PORT,D1_PIN,(Copy_u8Data>>BIT_ONE  )&MASK_NUM);
    205c:	8f 85       	ldd	r24, Y+15	; 0x0f
    205e:	86 95       	lsr	r24
    2060:	98 2f       	mov	r25, r24
    2062:	91 70       	andi	r25, 0x01	; 1
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	66 e0       	ldi	r22, 0x06	; 6
    2068:	49 2f       	mov	r20, r25
    206a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <DIO_enuSetPinVal>
		DIO_enuSetPinVal(D0_PORT,D0_PIN,(Copy_u8Data>>BIT_ZERO )&MASK_NUM);
    206e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2070:	98 2f       	mov	r25, r24
    2072:	91 70       	andi	r25, 0x01	; 1
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	67 e0       	ldi	r22, 0x07	; 7
    2078:	49 2f       	mov	r20, r25
    207a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <DIO_enuSetPinVal>
		 DIO_enuSetPinVal(D4_PORT,D4_PIN,(Copy_u8Data>>BIT_ZERO &MASK_NUM);
#else
#error "LCD_MODE has a wrong selection"
#endif
		/*Enable*/
		 DIO_enuSetPinVal(EN_PORT,EN_PIN,DIO_u8HIGH);
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	62 e0       	ldi	r22, 0x02	; 2
    2082:	41 e0       	ldi	r20, 0x01	; 1
    2084:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <DIO_enuSetPinVal>
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	a0 e2       	ldi	r26, 0x20	; 32
    208e:	b1 e4       	ldi	r27, 0x41	; 65
    2090:	8b 87       	std	Y+11, r24	; 0x0b
    2092:	9c 87       	std	Y+12, r25	; 0x0c
    2094:	ad 87       	std	Y+13, r26	; 0x0d
    2096:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2098:	6b 85       	ldd	r22, Y+11	; 0x0b
    209a:	7c 85       	ldd	r23, Y+12	; 0x0c
    209c:	8d 85       	ldd	r24, Y+13	; 0x0d
    209e:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	4a e7       	ldi	r20, 0x7A	; 122
    20a6:	53 e4       	ldi	r21, 0x43	; 67
    20a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	8f 83       	std	Y+7, r24	; 0x07
    20b2:	98 87       	std	Y+8, r25	; 0x08
    20b4:	a9 87       	std	Y+9, r26	; 0x09
    20b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ba:	78 85       	ldd	r23, Y+8	; 0x08
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e8       	ldi	r20, 0x80	; 128
    20c6:	5f e3       	ldi	r21, 0x3F	; 63
    20c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20cc:	88 23       	and	r24, r24
    20ce:	2c f4       	brge	.+10     	; 0x20da <LCD_vidLatch+0x128>
		__ticks = 1;
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	9e 83       	std	Y+6, r25	; 0x06
    20d6:	8d 83       	std	Y+5, r24	; 0x05
    20d8:	3f c0       	rjmp	.+126    	; 0x2158 <LCD_vidLatch+0x1a6>
	else if (__tmp > 65535)
    20da:	6f 81       	ldd	r22, Y+7	; 0x07
    20dc:	78 85       	ldd	r23, Y+8	; 0x08
    20de:	89 85       	ldd	r24, Y+9	; 0x09
    20e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	3f ef       	ldi	r19, 0xFF	; 255
    20e6:	4f e7       	ldi	r20, 0x7F	; 127
    20e8:	57 e4       	ldi	r21, 0x47	; 71
    20ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ee:	18 16       	cp	r1, r24
    20f0:	4c f5       	brge	.+82     	; 0x2144 <LCD_vidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	40 e2       	ldi	r20, 0x20	; 32
    2100:	51 e4       	ldi	r21, 0x41	; 65
    2102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	bc 01       	movw	r22, r24
    210c:	cd 01       	movw	r24, r26
    210e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9e 83       	std	Y+6, r25	; 0x06
    2118:	8d 83       	std	Y+5, r24	; 0x05
    211a:	0f c0       	rjmp	.+30     	; 0x213a <LCD_vidLatch+0x188>
    211c:	89 e1       	ldi	r24, 0x19	; 25
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9c 83       	std	Y+4, r25	; 0x04
    2122:	8b 83       	std	Y+3, r24	; 0x03
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	9c 81       	ldd	r25, Y+4	; 0x04
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	f1 f7       	brne	.-4      	; 0x2128 <LCD_vidLatch+0x176>
    212c:	9c 83       	std	Y+4, r25	; 0x04
    212e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2130:	8d 81       	ldd	r24, Y+5	; 0x05
    2132:	9e 81       	ldd	r25, Y+6	; 0x06
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	9e 83       	std	Y+6, r25	; 0x06
    2138:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213a:	8d 81       	ldd	r24, Y+5	; 0x05
    213c:	9e 81       	ldd	r25, Y+6	; 0x06
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	69 f7       	brne	.-38     	; 0x211c <LCD_vidLatch+0x16a>
    2142:	14 c0       	rjmp	.+40     	; 0x216c <LCD_vidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2144:	6f 81       	ldd	r22, Y+7	; 0x07
    2146:	78 85       	ldd	r23, Y+8	; 0x08
    2148:	89 85       	ldd	r24, Y+9	; 0x09
    214a:	9a 85       	ldd	r25, Y+10	; 0x0a
    214c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	9e 83       	std	Y+6, r25	; 0x06
    2156:	8d 83       	std	Y+5, r24	; 0x05
    2158:	8d 81       	ldd	r24, Y+5	; 0x05
    215a:	9e 81       	ldd	r25, Y+6	; 0x06
    215c:	9a 83       	std	Y+2, r25	; 0x02
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	9a 81       	ldd	r25, Y+2	; 0x02
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	f1 f7       	brne	.-4      	; 0x2164 <LCD_vidLatch+0x1b2>
    2168:	9a 83       	std	Y+2, r25	; 0x02
    216a:	89 83       	std	Y+1, r24	; 0x01
		 _delay_ms(10);
		 DIO_enuSetPinVal(EN_PORT,EN_PIN,DIO_u8LOW);
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	62 e0       	ldi	r22, 0x02	; 2
    2170:	40 e0       	ldi	r20, 0x00	; 0
    2172:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <DIO_enuSetPinVal>

		// _delay_ms(10);
}
    2176:	2f 96       	adiw	r28, 0x0f	; 15
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <LCD_vidClearScreen>:


void LCD_vidClearScreen(void)
{
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
	LCD_invidSendCommand(DISPLAY_CLEAR);
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	0e 94 ce 10 	call	0x219c	; 0x219c <LCD_invidSendCommand>
	//LCD_u8PosCounter = 0;
}
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	08 95       	ret

0000219c <LCD_invidSendCommand>:

static inline void LCD_invidSendCommand(u8 Copy_u8Command)
{
    219c:	df 93       	push	r29
    219e:	cf 93       	push	r28
    21a0:	0f 92       	push	r0
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	89 83       	std	Y+1, r24	; 0x01

		/*set pin value for RS=0 to command*/
		DIO_enuSetPinVal(RS_PORT,RS_PIN,DIO_u8LOW);
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	60 e0       	ldi	r22, 0x00	; 0
    21ac:	40 e0       	ldi	r20, 0x00	; 0
    21ae:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <DIO_enuSetPinVal>

		LCD_vidLatch(  Copy_u8Command);
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_vidLatch>
}
    21b8:	0f 90       	pop	r0
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <LCD_enuGoToPosition>:

ES_t LCD_enuGoToPosition(u8 Copy_u8Row, u8 Copy_u8Col){
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	28 97       	sbiw	r28, 0x08	; 8
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	8f 83       	std	Y+7, r24	; 0x07
    21d6:	68 87       	std	Y+8, r22	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    21d8:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8Address;
    if(Copy_u8Row<4&&Copy_u8Col<16){
    21da:	8f 81       	ldd	r24, Y+7	; 0x07
    21dc:	84 30       	cpi	r24, 0x04	; 4
    21de:	c0 f4       	brcc	.+48     	; 0x2210 <LCD_enuGoToPosition+0x50>
    21e0:	88 85       	ldd	r24, Y+8	; 0x08
    21e2:	80 31       	cpi	r24, 0x10	; 16
    21e4:	a8 f4       	brcc	.+42     	; 0x2210 <LCD_enuGoToPosition+0x50>
    	u8 arr[4]={0x80,0xC0,0x90,0xD0};
    21e6:	80 e8       	ldi	r24, 0x80	; 128
    21e8:	8b 83       	std	Y+3, r24	; 0x03
    21ea:	80 ec       	ldi	r24, 0xC0	; 192
    21ec:	8c 83       	std	Y+4, r24	; 0x04
    21ee:	80 e9       	ldi	r24, 0x90	; 144
    21f0:	8d 83       	std	Y+5, r24	; 0x05
    21f2:	80 ed       	ldi	r24, 0xD0	; 208
    21f4:	8e 83       	std	Y+6, r24	; 0x06
    		LCD_enuSendCommand(arr[Copy_u8Row]+Copy_u8Col);
    21f6:	8f 81       	ldd	r24, Y+7	; 0x07
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	ce 01       	movw	r24, r28
    21fe:	03 96       	adiw	r24, 0x03	; 3
    2200:	fc 01       	movw	r30, r24
    2202:	e2 0f       	add	r30, r18
    2204:	f3 1f       	adc	r31, r19
    2206:	90 81       	ld	r25, Z
    2208:	88 85       	ldd	r24, Y+8	; 0x08
    220a:	89 0f       	add	r24, r25
    220c:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <LCD_enuSendCommand>

    }

	return Local_enuErrorState;
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2212:	28 96       	adiw	r28, 0x08	; 8
    2214:	0f b6       	in	r0, 0x3f	; 63
    2216:	f8 94       	cli
    2218:	de bf       	out	0x3e, r29	; 62
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	cd bf       	out	0x3d, r28	; 61
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	08 95       	ret

00002224 <LCD_enuWriteString>:



ES_t LCD_enuWriteString(u8 *Copy_pu8Str,u8 Copy_u8Row, u8 Copy_u8Col){
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	28 97       	sbiw	r28, 0x08	; 8
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	9d 83       	std	Y+5, r25	; 0x05
    223a:	8c 83       	std	Y+4, r24	; 0x04
    223c:	6e 83       	std	Y+6, r22	; 0x06
    223e:	4f 83       	std	Y+7, r20	; 0x07
	ES_t Local_enuErrorState = ES_NOK;
    2240:	1b 82       	std	Y+3, r1	; 0x03
	LCD_enuGoToPosition(Copy_u8Row,  Copy_u8Col);
    2242:	8e 81       	ldd	r24, Y+6	; 0x06
    2244:	6f 81       	ldd	r22, Y+7	; 0x07
    2246:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_enuGoToPosition>
	u8 Local_u8Index=0;
    224a:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Line=Copy_u8Row;
    224c:	8e 81       	ldd	r24, Y+6	; 0x06
    224e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8Str!=NULL){
    2250:	8c 81       	ldd	r24, Y+4	; 0x04
    2252:	9d 81       	ldd	r25, Y+5	; 0x05
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	09 f4       	brne	.+2      	; 0x225a <LCD_enuWriteString+0x36>
    2258:	8d c0       	rjmp	.+282    	; 0x2374 <LCD_enuWriteString+0x150>
    225a:	66 c0       	rjmp	.+204    	; 0x2328 <LCD_enuWriteString+0x104>
		while(Copy_pu8Str[Local_u8Index] !='\0' && ((Copy_u8Row*16)+(Copy_u8Col+Local_u8Index))<32){
			if(((Copy_u8Row*16)+(Copy_u8Col+Local_u8Index))<16){
    225c:	8e 81       	ldd	r24, Y+6	; 0x06
    225e:	88 2f       	mov	r24, r24
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	ac 01       	movw	r20, r24
    2264:	42 95       	swap	r20
    2266:	52 95       	swap	r21
    2268:	50 7f       	andi	r21, 0xF0	; 240
    226a:	54 27       	eor	r21, r20
    226c:	40 7f       	andi	r20, 0xF0	; 240
    226e:	54 27       	eor	r21, r20
    2270:	8f 81       	ldd	r24, Y+7	; 0x07
    2272:	28 2f       	mov	r18, r24
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	88 2f       	mov	r24, r24
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	82 0f       	add	r24, r18
    227e:	93 1f       	adc	r25, r19
    2280:	84 0f       	add	r24, r20
    2282:	95 1f       	adc	r25, r21
    2284:	80 31       	cpi	r24, 0x10	; 16
    2286:	91 05       	cpc	r25, r1
    2288:	84 f4       	brge	.+32     	; 0x22aa <LCD_enuWriteString+0x86>

				Local_enuErrorState=LCD_enuDisplayChar(Copy_pu8Str[Local_u8Index]);
    228a:	8a 81       	ldd	r24, Y+2	; 0x02
    228c:	28 2f       	mov	r18, r24
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	8c 81       	ldd	r24, Y+4	; 0x04
    2292:	9d 81       	ldd	r25, Y+5	; 0x05
    2294:	fc 01       	movw	r30, r24
    2296:	e2 0f       	add	r30, r18
    2298:	f3 1f       	adc	r31, r19
    229a:	80 81       	ld	r24, Z
    229c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <LCD_enuDisplayChar>
    22a0:	8b 83       	std	Y+3, r24	; 0x03
				Local_u8Index++;
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	8f 5f       	subi	r24, 0xFF	; 255
    22a6:	8a 83       	std	Y+2, r24	; 0x02
    22a8:	3f c0       	rjmp	.+126    	; 0x2328 <LCD_enuWriteString+0x104>
			}
			else if(((Copy_u8Row*16)+(Copy_u8Col+Local_u8Index))==16 && Local_u8Line==0){
    22aa:	8e 81       	ldd	r24, Y+6	; 0x06
    22ac:	88 2f       	mov	r24, r24
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	ac 01       	movw	r20, r24
    22b2:	42 95       	swap	r20
    22b4:	52 95       	swap	r21
    22b6:	50 7f       	andi	r21, 0xF0	; 240
    22b8:	54 27       	eor	r21, r20
    22ba:	40 7f       	andi	r20, 0xF0	; 240
    22bc:	54 27       	eor	r21, r20
    22be:	8f 81       	ldd	r24, Y+7	; 0x07
    22c0:	28 2f       	mov	r18, r24
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	8a 81       	ldd	r24, Y+2	; 0x02
    22c6:	88 2f       	mov	r24, r24
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	82 0f       	add	r24, r18
    22cc:	93 1f       	adc	r25, r19
    22ce:	84 0f       	add	r24, r20
    22d0:	95 1f       	adc	r25, r21
    22d2:	80 31       	cpi	r24, 0x10	; 16
    22d4:	91 05       	cpc	r25, r1
    22d6:	59 f4       	brne	.+22     	; 0x22ee <LCD_enuWriteString+0xca>
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	88 23       	and	r24, r24
    22dc:	41 f4       	brne	.+16     	; 0x22ee <LCD_enuWriteString+0xca>
				LCD_enuGoToPosition(1,0);
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	60 e0       	ldi	r22, 0x00	; 0
    22e2:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_enuGoToPosition>
				Local_u8Line++;
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	8f 5f       	subi	r24, 0xFF	; 255
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	1d c0       	rjmp	.+58     	; 0x2328 <LCD_enuWriteString+0x104>

			}
			else if((Copy_u8Col+Local_u8Index)<32 && Local_u8Line==1){
    22ee:	8f 81       	ldd	r24, Y+7	; 0x07
    22f0:	28 2f       	mov	r18, r24
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	88 2f       	mov	r24, r24
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	82 0f       	add	r24, r18
    22fc:	93 1f       	adc	r25, r19
    22fe:	80 32       	cpi	r24, 0x20	; 32
    2300:	91 05       	cpc	r25, r1
    2302:	94 f4       	brge	.+36     	; 0x2328 <LCD_enuWriteString+0x104>
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	81 30       	cpi	r24, 0x01	; 1
    2308:	79 f4       	brne	.+30     	; 0x2328 <LCD_enuWriteString+0x104>
				Local_enuErrorState=LCD_enuDisplayChar(Copy_pu8Str[Local_u8Index]);
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	28 2f       	mov	r18, r24
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	8c 81       	ldd	r24, Y+4	; 0x04
    2312:	9d 81       	ldd	r25, Y+5	; 0x05
    2314:	fc 01       	movw	r30, r24
    2316:	e2 0f       	add	r30, r18
    2318:	f3 1f       	adc	r31, r19
    231a:	80 81       	ld	r24, Z
    231c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <LCD_enuDisplayChar>
    2320:	8b 83       	std	Y+3, r24	; 0x03
				Local_u8Index++;
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
    2324:	8f 5f       	subi	r24, 0xFF	; 255
    2326:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
	LCD_enuGoToPosition(Copy_u8Row,  Copy_u8Col);
	u8 Local_u8Index=0;
	u8 Local_u8Line=Copy_u8Row;
	if(Copy_pu8Str!=NULL){
		while(Copy_pu8Str[Local_u8Index] !='\0' && ((Copy_u8Row*16)+(Copy_u8Col+Local_u8Index))<32){
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	28 2f       	mov	r18, r24
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	8c 81       	ldd	r24, Y+4	; 0x04
    2330:	9d 81       	ldd	r25, Y+5	; 0x05
    2332:	fc 01       	movw	r30, r24
    2334:	e2 0f       	add	r30, r18
    2336:	f3 1f       	adc	r31, r19
    2338:	80 81       	ld	r24, Z
    233a:	88 23       	and	r24, r24
    233c:	c1 f0       	breq	.+48     	; 0x236e <LCD_enuWriteString+0x14a>
    233e:	8e 81       	ldd	r24, Y+6	; 0x06
    2340:	88 2f       	mov	r24, r24
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	ac 01       	movw	r20, r24
    2346:	42 95       	swap	r20
    2348:	52 95       	swap	r21
    234a:	50 7f       	andi	r21, 0xF0	; 240
    234c:	54 27       	eor	r21, r20
    234e:	40 7f       	andi	r20, 0xF0	; 240
    2350:	54 27       	eor	r21, r20
    2352:	8f 81       	ldd	r24, Y+7	; 0x07
    2354:	28 2f       	mov	r18, r24
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	88 2f       	mov	r24, r24
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	82 0f       	add	r24, r18
    2360:	93 1f       	adc	r25, r19
    2362:	84 0f       	add	r24, r20
    2364:	95 1f       	adc	r25, r21
    2366:	80 32       	cpi	r24, 0x20	; 32
    2368:	91 05       	cpc	r25, r1
    236a:	0c f4       	brge	.+2      	; 0x236e <LCD_enuWriteString+0x14a>
    236c:	77 cf       	rjmp	.-274    	; 0x225c <LCD_enuWriteString+0x38>
	}
	else
		{
			return ES_NULL_POINTER;
		}
		return Local_enuErrorState;
    236e:	8b 81       	ldd	r24, Y+3	; 0x03
    2370:	88 87       	std	Y+8, r24	; 0x08
    2372:	02 c0       	rjmp	.+4      	; 0x2378 <LCD_enuWriteString+0x154>
			}
		}
	}
	else
		{
			return ES_NULL_POINTER;
    2374:	82 e0       	ldi	r24, 0x02	; 2
    2376:	88 87       	std	Y+8, r24	; 0x08
    2378:	88 85       	ldd	r24, Y+8	; 0x08
		}
		return Local_enuErrorState;

}
    237a:	28 96       	adiw	r28, 0x08	; 8
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	08 95       	ret

0000238c <LCD_enuDisplayNum>:
ES_t LCD_enuDisplayNum(s32 Copy_s32Num)
{
    238c:	0f 93       	push	r16
    238e:	1f 93       	push	r17
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	cc 54       	subi	r28, 0x4C	; 76
    239a:	d0 40       	sbci	r29, 0x00	; 0
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
    23a6:	fe 01       	movw	r30, r28
    23a8:	e7 5b       	subi	r30, 0xB7	; 183
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	60 83       	st	Z, r22
    23ae:	71 83       	std	Z+1, r23	; 0x01
    23b0:	82 83       	std	Z+2, r24	; 0x02
    23b2:	93 83       	std	Z+3, r25	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    23b4:	18 86       	std	Y+8, r1	; 0x08
	u32 Local_As8Container[16];
	s32 Local_s32Reverse=0;
    23b6:	1c 82       	std	Y+4, r1	; 0x04
    23b8:	1d 82       	std	Y+5, r1	; 0x05
    23ba:	1e 82       	std	Y+6, r1	; 0x06
    23bc:	1f 82       	std	Y+7, r1	; 0x07
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    23be:	1b 82       	std	Y+3, r1	; 0x03
    23c0:	1a 82       	std	Y+2, r1	; 0x02
   u8 x=0;
    23c2:	19 82       	std	Y+1, r1	; 0x01
   if(Copy_s32Num ==0)
    23c4:	fe 01       	movw	r30, r28
    23c6:	e7 5b       	subi	r30, 0xB7	; 183
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	80 81       	ld	r24, Z
    23cc:	91 81       	ldd	r25, Z+1	; 0x01
    23ce:	a2 81       	ldd	r26, Z+2	; 0x02
    23d0:	b3 81       	ldd	r27, Z+3	; 0x03
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	a1 05       	cpc	r26, r1
    23d6:	b1 05       	cpc	r27, r1
    23d8:	19 f4       	brne	.+6      	; 0x23e0 <LCD_enuDisplayNum+0x54>
   	{
   		LCD_enuDisplayChar('0');
    23da:	80 e3       	ldi	r24, 0x30	; 48
    23dc:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <LCD_enuDisplayChar>

   	}
	if(Copy_s32Num <0)
    23e0:	fe 01       	movw	r30, r28
    23e2:	e7 5b       	subi	r30, 0xB7	; 183
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	80 81       	ld	r24, Z
    23e8:	91 81       	ldd	r25, Z+1	; 0x01
    23ea:	a2 81       	ldd	r26, Z+2	; 0x02
    23ec:	b3 81       	ldd	r27, Z+3	; 0x03
    23ee:	bb 23       	and	r27, r27
    23f0:	0c f0       	brlt	.+2      	; 0x23f4 <LCD_enuDisplayNum+0x68>
    23f2:	63 c0       	rjmp	.+198    	; 0x24ba <LCD_enuDisplayNum+0x12e>
	{
		LCD_enuDisplayChar('-');
    23f4:	8d e2       	ldi	r24, 0x2D	; 45
    23f6:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <LCD_enuDisplayChar>
		Copy_s32Num *= -1 ;
    23fa:	9e 01       	movw	r18, r28
    23fc:	27 5b       	subi	r18, 0xB7	; 183
    23fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2400:	fe 01       	movw	r30, r28
    2402:	e7 5b       	subi	r30, 0xB7	; 183
    2404:	ff 4f       	sbci	r31, 0xFF	; 255
    2406:	80 81       	ld	r24, Z
    2408:	91 81       	ldd	r25, Z+1	; 0x01
    240a:	a2 81       	ldd	r26, Z+2	; 0x02
    240c:	b3 81       	ldd	r27, Z+3	; 0x03
    240e:	b0 95       	com	r27
    2410:	a0 95       	com	r26
    2412:	90 95       	com	r25
    2414:	81 95       	neg	r24
    2416:	9f 4f       	sbci	r25, 0xFF	; 255
    2418:	af 4f       	sbci	r26, 0xFF	; 255
    241a:	bf 4f       	sbci	r27, 0xFF	; 255
    241c:	f9 01       	movw	r30, r18
    241e:	80 83       	st	Z, r24
    2420:	91 83       	std	Z+1, r25	; 0x01
    2422:	a2 83       	std	Z+2, r26	; 0x02
    2424:	b3 83       	std	Z+3, r27	; 0x03
    2426:	49 c0       	rjmp	.+146    	; 0x24ba <LCD_enuDisplayNum+0x12e>
	}

	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
    2428:	fe 01       	movw	r30, r28
    242a:	e7 5b       	subi	r30, 0xB7	; 183
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	80 81       	ld	r24, Z
    2430:	91 81       	ldd	r25, Z+1	; 0x01
    2432:	a2 81       	ldd	r26, Z+2	; 0x02
    2434:	b3 81       	ldd	r27, Z+3	; 0x03
    2436:	2a e0       	ldi	r18, 0x0A	; 10
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e0       	ldi	r20, 0x00	; 0
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	bc 01       	movw	r22, r24
    2440:	cd 01       	movw	r24, r26
    2442:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodsi4>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	8b 83       	std	Y+3, r24	; 0x03
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    244c:	8c 81       	ldd	r24, Y+4	; 0x04
    244e:	9d 81       	ldd	r25, Y+5	; 0x05
    2450:	ae 81       	ldd	r26, Y+6	; 0x06
    2452:	bf 81       	ldd	r27, Y+7	; 0x07
    2454:	2a e0       	ldi	r18, 0x0A	; 10
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	40 e0       	ldi	r20, 0x00	; 0
    245a:	50 e0       	ldi	r21, 0x00	; 0
    245c:	bc 01       	movw	r22, r24
    245e:	cd 01       	movw	r24, r26
    2460:	0e 94 86 18 	call	0x310c	; 0x310c <__mulsi3>
    2464:	9b 01       	movw	r18, r22
    2466:	ac 01       	movw	r20, r24
    2468:	8b 81       	ldd	r24, Y+3	; 0x03
    246a:	88 2f       	mov	r24, r24
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	a0 e0       	ldi	r26, 0x00	; 0
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	82 0f       	add	r24, r18
    2474:	93 1f       	adc	r25, r19
    2476:	a4 1f       	adc	r26, r20
    2478:	b5 1f       	adc	r27, r21
    247a:	8c 83       	std	Y+4, r24	; 0x04
    247c:	9d 83       	std	Y+5, r25	; 0x05
    247e:	ae 83       	std	Y+6, r26	; 0x06
    2480:	bf 83       	std	Y+7, r27	; 0x07
		Copy_s32Num /=10;
    2482:	8e 01       	movw	r16, r28
    2484:	07 5b       	subi	r16, 0xB7	; 183
    2486:	1f 4f       	sbci	r17, 0xFF	; 255
    2488:	fe 01       	movw	r30, r28
    248a:	e7 5b       	subi	r30, 0xB7	; 183
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 81       	ld	r24, Z
    2490:	91 81       	ldd	r25, Z+1	; 0x01
    2492:	a2 81       	ldd	r26, Z+2	; 0x02
    2494:	b3 81       	ldd	r27, Z+3	; 0x03
    2496:	2a e0       	ldi	r18, 0x0A	; 10
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e0       	ldi	r20, 0x00	; 0
    249c:	50 e0       	ldi	r21, 0x00	; 0
    249e:	bc 01       	movw	r22, r24
    24a0:	cd 01       	movw	r24, r26
    24a2:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodsi4>
    24a6:	da 01       	movw	r26, r20
    24a8:	c9 01       	movw	r24, r18
    24aa:	f8 01       	movw	r30, r16
    24ac:	80 83       	st	Z, r24
    24ae:	91 83       	std	Z+1, r25	; 0x01
    24b0:	a2 83       	std	Z+2, r26	; 0x02
    24b2:	b3 83       	std	Z+3, r27	; 0x03
		Local_u8NumDigit ++;
    24b4:	8a 81       	ldd	r24, Y+2	; 0x02
    24b6:	8f 5f       	subi	r24, 0xFF	; 255
    24b8:	8a 83       	std	Y+2, r24	; 0x02
	{
		LCD_enuDisplayChar('-');
		Copy_s32Num *= -1 ;
	}

	while (Copy_s32Num)
    24ba:	fe 01       	movw	r30, r28
    24bc:	e7 5b       	subi	r30, 0xB7	; 183
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	80 81       	ld	r24, Z
    24c2:	91 81       	ldd	r25, Z+1	; 0x01
    24c4:	a2 81       	ldd	r26, Z+2	; 0x02
    24c6:	b3 81       	ldd	r27, Z+3	; 0x03
    24c8:	00 97       	sbiw	r24, 0x00	; 0
    24ca:	a1 05       	cpc	r26, r1
    24cc:	b1 05       	cpc	r27, r1
    24ce:	09 f0       	breq	.+2      	; 0x24d2 <LCD_enuDisplayNum+0x146>
    24d0:	ab cf       	rjmp	.-170    	; 0x2428 <LCD_enuDisplayNum+0x9c>
    24d2:	2a c0       	rjmp	.+84     	; 0x2528 <LCD_enuDisplayNum+0x19c>
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
    24d4:	8c 81       	ldd	r24, Y+4	; 0x04
    24d6:	9d 81       	ldd	r25, Y+5	; 0x05
    24d8:	ae 81       	ldd	r26, Y+6	; 0x06
    24da:	bf 81       	ldd	r27, Y+7	; 0x07
    24dc:	2a e0       	ldi	r18, 0x0A	; 10
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	40 e0       	ldi	r20, 0x00	; 0
    24e2:	50 e0       	ldi	r21, 0x00	; 0
    24e4:	bc 01       	movw	r22, r24
    24e6:	cd 01       	movw	r24, r26
    24e8:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodsi4>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	8b 83       	std	Y+3, r24	; 0x03

		x=Local_u8Remainder + '0';
    24f2:	8b 81       	ldd	r24, Y+3	; 0x03
    24f4:	80 5d       	subi	r24, 0xD0	; 208
    24f6:	89 83       	std	Y+1, r24	; 0x01
		LCD_enuDisplayChar(x);
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <LCD_enuDisplayChar>
		Local_s32Reverse /= 10;
    24fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2500:	9d 81       	ldd	r25, Y+5	; 0x05
    2502:	ae 81       	ldd	r26, Y+6	; 0x06
    2504:	bf 81       	ldd	r27, Y+7	; 0x07
    2506:	2a e0       	ldi	r18, 0x0A	; 10
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e0       	ldi	r20, 0x00	; 0
    250c:	50 e0       	ldi	r21, 0x00	; 0
    250e:	bc 01       	movw	r22, r24
    2510:	cd 01       	movw	r24, r26
    2512:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodsi4>
    2516:	da 01       	movw	r26, r20
    2518:	c9 01       	movw	r24, r18
    251a:	8c 83       	std	Y+4, r24	; 0x04
    251c:	9d 83       	std	Y+5, r25	; 0x05
    251e:	ae 83       	std	Y+6, r26	; 0x06
    2520:	bf 83       	std	Y+7, r27	; 0x07
		Local_u8NumDigit --;
    2522:	8a 81       	ldd	r24, Y+2	; 0x02
    2524:	81 50       	subi	r24, 0x01	; 1
    2526:	8a 83       	std	Y+2, r24	; 0x02
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    2528:	8a 81       	ldd	r24, Y+2	; 0x02
    252a:	88 23       	and	r24, r24
    252c:	99 f6       	brne	.-90     	; 0x24d4 <LCD_enuDisplayNum+0x148>
		LCD_enuDisplayChar(x);
		Local_s32Reverse /= 10;
		Local_u8NumDigit --;
	}

	return Local_enuErrorState;
    252e:	88 85       	ldd	r24, Y+8	; 0x08
}
    2530:	c4 5b       	subi	r28, 0xB4	; 180
    2532:	df 4f       	sbci	r29, 0xFF	; 255
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	f8 94       	cli
    2538:	de bf       	out	0x3e, r29	; 62
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	cd bf       	out	0x3d, r28	; 61
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	1f 91       	pop	r17
    2544:	0f 91       	pop	r16
    2546:	08 95       	ret

00002548 <Ping_PongInit>:
s32 Global_u8Score2=0;

u8 Global_u8Ball_row=2;
u8 Global_u8Ball_col=1;

void Ping_PongInit(){
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
    2550:	2e 97       	sbiw	r28, 0x0e	; 14
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	f8 94       	cli
    2556:	de bf       	out	0x3e, r29	; 62
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	cd bf       	out	0x3d, r28	; 61



	LCD_enuWriteString("P1:",0,0);
    255c:	80 e6       	ldi	r24, 0x60	; 96
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	60 e0       	ldi	r22, 0x00	; 0
    2562:	70 e0       	ldi	r23, 0x00	; 0
    2564:	40 e0       	ldi	r20, 0x00	; 0
    2566:	50 e0       	ldi	r21, 0x00	; 0
    2568:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_enuWriteString>
	LCD_enuGoToPosition(0,4);
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	64 e0       	ldi	r22, 0x04	; 4
    2572:	70 e0       	ldi	r23, 0x00	; 0
    2574:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_enuGoToPosition>
	LCD_enuDisplayNum(Global_u8Score1);
    2578:	80 91 d6 00 	lds	r24, 0x00D6
    257c:	90 91 d7 00 	lds	r25, 0x00D7
    2580:	a0 91 d8 00 	lds	r26, 0x00D8
    2584:	b0 91 d9 00 	lds	r27, 0x00D9
    2588:	bc 01       	movw	r22, r24
    258a:	cd 01       	movw	r24, r26
    258c:	0e 94 c6 11 	call	0x238c	; 0x238c <LCD_enuDisplayNum>
	LCD_enuWriteString("P2:",0,12);
    2590:	84 e6       	ldi	r24, 0x64	; 100
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	60 e0       	ldi	r22, 0x00	; 0
    2596:	70 e0       	ldi	r23, 0x00	; 0
    2598:	4c e0       	ldi	r20, 0x0C	; 12
    259a:	50 e0       	ldi	r21, 0x00	; 0
    259c:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_enuWriteString>
	LCD_enuGoToPosition(0,15);
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	6f e0       	ldi	r22, 0x0F	; 15
    25a6:	70 e0       	ldi	r23, 0x00	; 0
    25a8:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_enuGoToPosition>
	LCD_enuDisplayNum(Global_u8Score2);
    25ac:	80 91 da 00 	lds	r24, 0x00DA
    25b0:	90 91 db 00 	lds	r25, 0x00DB
    25b4:	a0 91 dc 00 	lds	r26, 0x00DC
    25b8:	b0 91 dd 00 	lds	r27, 0x00DD
    25bc:	bc 01       	movw	r22, r24
    25be:	cd 01       	movw	r24, r26
    25c0:	0e 94 c6 11 	call	0x238c	; 0x238c <LCD_enuDisplayNum>
    LCD_enuGoToPosition(2,0);
    25c4:	82 e0       	ldi	r24, 0x02	; 2
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	60 e0       	ldi	r22, 0x00	; 0
    25ca:	70 e0       	ldi	r23, 0x00	; 0
    25cc:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_enuGoToPosition>
    LCD_enuDisplayChar('|');
    25d0:	8c e7       	ldi	r24, 0x7C	; 124
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <LCD_enuDisplayChar>
    LCD_enuGoToPosition(2,15);
    25d8:	82 e0       	ldi	r24, 0x02	; 2
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	6f e0       	ldi	r22, 0x0F	; 15
    25de:	70 e0       	ldi	r23, 0x00	; 0
    25e0:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_enuGoToPosition>
     LCD_enuDisplayChar('|');
    25e4:	8c e7       	ldi	r24, 0x7C	; 124
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <LCD_enuDisplayChar>
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	aa ef       	ldi	r26, 0xFA	; 250
    25f2:	b3 e4       	ldi	r27, 0x43	; 67
    25f4:	8b 87       	std	Y+11, r24	; 0x0b
    25f6:	9c 87       	std	Y+12, r25	; 0x0c
    25f8:	ad 87       	std	Y+13, r26	; 0x0d
    25fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    25fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2600:	8d 85       	ldd	r24, Y+13	; 0x0d
    2602:	9e 85       	ldd	r25, Y+14	; 0x0e
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	4a e7       	ldi	r20, 0x7A	; 122
    260a:	53 e4       	ldi	r21, 0x43	; 67
    260c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	8f 83       	std	Y+7, r24	; 0x07
    2616:	98 87       	std	Y+8, r25	; 0x08
    2618:	a9 87       	std	Y+9, r26	; 0x09
    261a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    261c:	6f 81       	ldd	r22, Y+7	; 0x07
    261e:	78 85       	ldd	r23, Y+8	; 0x08
    2620:	89 85       	ldd	r24, Y+9	; 0x09
    2622:	9a 85       	ldd	r25, Y+10	; 0x0a
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	40 e8       	ldi	r20, 0x80	; 128
    262a:	5f e3       	ldi	r21, 0x3F	; 63
    262c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2630:	88 23       	and	r24, r24
    2632:	2c f4       	brge	.+10     	; 0x263e <Ping_PongInit+0xf6>
		__ticks = 1;
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	9e 83       	std	Y+6, r25	; 0x06
    263a:	8d 83       	std	Y+5, r24	; 0x05
    263c:	3f c0       	rjmp	.+126    	; 0x26bc <Ping_PongInit+0x174>
	else if (__tmp > 65535)
    263e:	6f 81       	ldd	r22, Y+7	; 0x07
    2640:	78 85       	ldd	r23, Y+8	; 0x08
    2642:	89 85       	ldd	r24, Y+9	; 0x09
    2644:	9a 85       	ldd	r25, Y+10	; 0x0a
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	3f ef       	ldi	r19, 0xFF	; 255
    264a:	4f e7       	ldi	r20, 0x7F	; 127
    264c:	57 e4       	ldi	r21, 0x47	; 71
    264e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2652:	18 16       	cp	r1, r24
    2654:	4c f5       	brge	.+82     	; 0x26a8 <Ping_PongInit+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2656:	6b 85       	ldd	r22, Y+11	; 0x0b
    2658:	7c 85       	ldd	r23, Y+12	; 0x0c
    265a:	8d 85       	ldd	r24, Y+13	; 0x0d
    265c:	9e 85       	ldd	r25, Y+14	; 0x0e
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e2       	ldi	r20, 0x20	; 32
    2664:	51 e4       	ldi	r21, 0x41	; 65
    2666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	bc 01       	movw	r22, r24
    2670:	cd 01       	movw	r24, r26
    2672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	9e 83       	std	Y+6, r25	; 0x06
    267c:	8d 83       	std	Y+5, r24	; 0x05
    267e:	0f c0       	rjmp	.+30     	; 0x269e <Ping_PongInit+0x156>
    2680:	89 e1       	ldi	r24, 0x19	; 25
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	9c 83       	std	Y+4, r25	; 0x04
    2686:	8b 83       	std	Y+3, r24	; 0x03
    2688:	8b 81       	ldd	r24, Y+3	; 0x03
    268a:	9c 81       	ldd	r25, Y+4	; 0x04
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	f1 f7       	brne	.-4      	; 0x268c <Ping_PongInit+0x144>
    2690:	9c 83       	std	Y+4, r25	; 0x04
    2692:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2694:	8d 81       	ldd	r24, Y+5	; 0x05
    2696:	9e 81       	ldd	r25, Y+6	; 0x06
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	9e 83       	std	Y+6, r25	; 0x06
    269c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    269e:	8d 81       	ldd	r24, Y+5	; 0x05
    26a0:	9e 81       	ldd	r25, Y+6	; 0x06
    26a2:	00 97       	sbiw	r24, 0x00	; 0
    26a4:	69 f7       	brne	.-38     	; 0x2680 <Ping_PongInit+0x138>
    26a6:	14 c0       	rjmp	.+40     	; 0x26d0 <Ping_PongInit+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a8:	6f 81       	ldd	r22, Y+7	; 0x07
    26aa:	78 85       	ldd	r23, Y+8	; 0x08
    26ac:	89 85       	ldd	r24, Y+9	; 0x09
    26ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	9e 83       	std	Y+6, r25	; 0x06
    26ba:	8d 83       	std	Y+5, r24	; 0x05
    26bc:	8d 81       	ldd	r24, Y+5	; 0x05
    26be:	9e 81       	ldd	r25, Y+6	; 0x06
    26c0:	9a 83       	std	Y+2, r25	; 0x02
    26c2:	89 83       	std	Y+1, r24	; 0x01
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	9a 81       	ldd	r25, Y+2	; 0x02
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	f1 f7       	brne	.-4      	; 0x26c8 <Ping_PongInit+0x180>
    26cc:	9a 83       	std	Y+2, r25	; 0x02
    26ce:	89 83       	std	Y+1, r24	; 0x01
   _delay_ms(500);

}
    26d0:	2e 96       	adiw	r28, 0x0e	; 14
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	de bf       	out	0x3e, r29	; 62
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	cd bf       	out	0x3d, r28	; 61
    26dc:	cf 91       	pop	r28
    26de:	df 91       	pop	r29
    26e0:	08 95       	ret

000026e2 <Move_ball_Right>:


 void Move_ball_Right(){
    26e2:	df 93       	push	r29
    26e4:	cf 93       	push	r28
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	2e 97       	sbiw	r28, 0x0e	; 14
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61
	for(Global_u8Ball_col=1;Global_u8Ball_col<14;Global_u8Ball_col++){
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	80 93 c7 00 	sts	0x00C7, r24
    26fc:	9d c0       	rjmp	.+314    	; 0x2838 <Move_ball_Right+0x156>
		Global_u8Ball_row=(Global_u8Ball_col&1)+2;
    26fe:	80 91 c7 00 	lds	r24, 0x00C7
    2702:	81 70       	andi	r24, 0x01	; 1
    2704:	8e 5f       	subi	r24, 0xFE	; 254
    2706:	80 93 c6 00 	sts	0x00C6, r24
		LCD_enuGoToPosition(Global_u8Ball_row,Global_u8Ball_col);
    270a:	80 91 c6 00 	lds	r24, 0x00C6
    270e:	48 2f       	mov	r20, r24
    2710:	50 e0       	ldi	r21, 0x00	; 0
    2712:	80 91 c7 00 	lds	r24, 0x00C7
    2716:	28 2f       	mov	r18, r24
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	ca 01       	movw	r24, r20
    271c:	b9 01       	movw	r22, r18
    271e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_enuGoToPosition>
					LCD_enuDisplayChar('O');
    2722:	8f e4       	ldi	r24, 0x4F	; 79
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <LCD_enuDisplayChar>
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	a8 e4       	ldi	r26, 0x48	; 72
    2730:	b3 e4       	ldi	r27, 0x43	; 67
    2732:	8b 87       	std	Y+11, r24	; 0x0b
    2734:	9c 87       	std	Y+12, r25	; 0x0c
    2736:	ad 87       	std	Y+13, r26	; 0x0d
    2738:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273a:	6b 85       	ldd	r22, Y+11	; 0x0b
    273c:	7c 85       	ldd	r23, Y+12	; 0x0c
    273e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2740:	9e 85       	ldd	r25, Y+14	; 0x0e
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	4a e7       	ldi	r20, 0x7A	; 122
    2748:	53 e4       	ldi	r21, 0x43	; 67
    274a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	8f 83       	std	Y+7, r24	; 0x07
    2754:	98 87       	std	Y+8, r25	; 0x08
    2756:	a9 87       	std	Y+9, r26	; 0x09
    2758:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    275a:	6f 81       	ldd	r22, Y+7	; 0x07
    275c:	78 85       	ldd	r23, Y+8	; 0x08
    275e:	89 85       	ldd	r24, Y+9	; 0x09
    2760:	9a 85       	ldd	r25, Y+10	; 0x0a
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e8       	ldi	r20, 0x80	; 128
    2768:	5f e3       	ldi	r21, 0x3F	; 63
    276a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    276e:	88 23       	and	r24, r24
    2770:	2c f4       	brge	.+10     	; 0x277c <Move_ball_Right+0x9a>
		__ticks = 1;
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	9e 83       	std	Y+6, r25	; 0x06
    2778:	8d 83       	std	Y+5, r24	; 0x05
    277a:	3f c0       	rjmp	.+126    	; 0x27fa <Move_ball_Right+0x118>
	else if (__tmp > 65535)
    277c:	6f 81       	ldd	r22, Y+7	; 0x07
    277e:	78 85       	ldd	r23, Y+8	; 0x08
    2780:	89 85       	ldd	r24, Y+9	; 0x09
    2782:	9a 85       	ldd	r25, Y+10	; 0x0a
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	3f ef       	ldi	r19, 0xFF	; 255
    2788:	4f e7       	ldi	r20, 0x7F	; 127
    278a:	57 e4       	ldi	r21, 0x47	; 71
    278c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2790:	18 16       	cp	r1, r24
    2792:	4c f5       	brge	.+82     	; 0x27e6 <Move_ball_Right+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2794:	6b 85       	ldd	r22, Y+11	; 0x0b
    2796:	7c 85       	ldd	r23, Y+12	; 0x0c
    2798:	8d 85       	ldd	r24, Y+13	; 0x0d
    279a:	9e 85       	ldd	r25, Y+14	; 0x0e
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e2       	ldi	r20, 0x20	; 32
    27a2:	51 e4       	ldi	r21, 0x41	; 65
    27a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	bc 01       	movw	r22, r24
    27ae:	cd 01       	movw	r24, r26
    27b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	9e 83       	std	Y+6, r25	; 0x06
    27ba:	8d 83       	std	Y+5, r24	; 0x05
    27bc:	0f c0       	rjmp	.+30     	; 0x27dc <Move_ball_Right+0xfa>
    27be:	89 e1       	ldi	r24, 0x19	; 25
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	9c 83       	std	Y+4, r25	; 0x04
    27c4:	8b 83       	std	Y+3, r24	; 0x03
    27c6:	8b 81       	ldd	r24, Y+3	; 0x03
    27c8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	f1 f7       	brne	.-4      	; 0x27ca <Move_ball_Right+0xe8>
    27ce:	9c 83       	std	Y+4, r25	; 0x04
    27d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d2:	8d 81       	ldd	r24, Y+5	; 0x05
    27d4:	9e 81       	ldd	r25, Y+6	; 0x06
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	9e 83       	std	Y+6, r25	; 0x06
    27da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27dc:	8d 81       	ldd	r24, Y+5	; 0x05
    27de:	9e 81       	ldd	r25, Y+6	; 0x06
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	69 f7       	brne	.-38     	; 0x27be <Move_ball_Right+0xdc>
    27e4:	14 c0       	rjmp	.+40     	; 0x280e <Move_ball_Right+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e6:	6f 81       	ldd	r22, Y+7	; 0x07
    27e8:	78 85       	ldd	r23, Y+8	; 0x08
    27ea:	89 85       	ldd	r24, Y+9	; 0x09
    27ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	9e 83       	std	Y+6, r25	; 0x06
    27f8:	8d 83       	std	Y+5, r24	; 0x05
    27fa:	8d 81       	ldd	r24, Y+5	; 0x05
    27fc:	9e 81       	ldd	r25, Y+6	; 0x06
    27fe:	9a 83       	std	Y+2, r25	; 0x02
    2800:	89 83       	std	Y+1, r24	; 0x01
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	9a 81       	ldd	r25, Y+2	; 0x02
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	f1 f7       	brne	.-4      	; 0x2806 <Move_ball_Right+0x124>
    280a:	9a 83       	std	Y+2, r25	; 0x02
    280c:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(200);
					LCD_enuGoToPosition(Global_u8Ball_row,Global_u8Ball_col);
    280e:	80 91 c6 00 	lds	r24, 0x00C6
    2812:	48 2f       	mov	r20, r24
    2814:	50 e0       	ldi	r21, 0x00	; 0
    2816:	80 91 c7 00 	lds	r24, 0x00C7
    281a:	28 2f       	mov	r18, r24
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	ca 01       	movw	r24, r20
    2820:	b9 01       	movw	r22, r18
    2822:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_enuGoToPosition>
							LCD_enuDisplayChar(' ');
    2826:	80 e2       	ldi	r24, 0x20	; 32
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <LCD_enuDisplayChar>

}


 void Move_ball_Right(){
	for(Global_u8Ball_col=1;Global_u8Ball_col<14;Global_u8Ball_col++){
    282e:	80 91 c7 00 	lds	r24, 0x00C7
    2832:	8f 5f       	subi	r24, 0xFF	; 255
    2834:	80 93 c7 00 	sts	0x00C7, r24
    2838:	80 91 c7 00 	lds	r24, 0x00C7
    283c:	8e 30       	cpi	r24, 0x0E	; 14
    283e:	08 f4       	brcc	.+2      	; 0x2842 <Move_ball_Right+0x160>
    2840:	5e cf       	rjmp	.-324    	; 0x26fe <Move_ball_Right+0x1c>
					_delay_ms(200);
					LCD_enuGoToPosition(Global_u8Ball_row,Global_u8Ball_col);
							LCD_enuDisplayChar(' ');

		}
}
    2842:	2e 96       	adiw	r28, 0x0e	; 14
    2844:	0f b6       	in	r0, 0x3f	; 63
    2846:	f8 94       	cli
    2848:	de bf       	out	0x3e, r29	; 62
    284a:	0f be       	out	0x3f, r0	; 63
    284c:	cd bf       	out	0x3d, r28	; 61
    284e:	cf 91       	pop	r28
    2850:	df 91       	pop	r29
    2852:	08 95       	ret

00002854 <Move_ball_Left>:
void Move_ball_Left(){
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	2e 97       	sbiw	r28, 0x0e	; 14
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	de bf       	out	0x3e, r29	; 62
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	cd bf       	out	0x3d, r28	; 61
	for(Global_u8Ball_col=14;Global_u8Ball_col>0;Global_u8Ball_col--){
    2868:	8e e0       	ldi	r24, 0x0E	; 14
    286a:	80 93 c7 00 	sts	0x00C7, r24
    286e:	9d c0       	rjmp	.+314    	; 0x29aa <Move_ball_Left+0x156>
			Global_u8Ball_row=(Global_u8Ball_col&1)+2;
    2870:	80 91 c7 00 	lds	r24, 0x00C7
    2874:	81 70       	andi	r24, 0x01	; 1
    2876:	8e 5f       	subi	r24, 0xFE	; 254
    2878:	80 93 c6 00 	sts	0x00C6, r24
			LCD_enuGoToPosition(Global_u8Ball_row,Global_u8Ball_col);
    287c:	80 91 c6 00 	lds	r24, 0x00C6
    2880:	48 2f       	mov	r20, r24
    2882:	50 e0       	ldi	r21, 0x00	; 0
    2884:	80 91 c7 00 	lds	r24, 0x00C7
    2888:	28 2f       	mov	r18, r24
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	ca 01       	movw	r24, r20
    288e:	b9 01       	movw	r22, r18
    2890:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_enuGoToPosition>
			LCD_enuDisplayChar('O');
    2894:	8f e4       	ldi	r24, 0x4F	; 79
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <LCD_enuDisplayChar>
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	a8 e4       	ldi	r26, 0x48	; 72
    28a2:	b3 e4       	ldi	r27, 0x43	; 67
    28a4:	8b 87       	std	Y+11, r24	; 0x0b
    28a6:	9c 87       	std	Y+12, r25	; 0x0c
    28a8:	ad 87       	std	Y+13, r26	; 0x0d
    28aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    28b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	4a e7       	ldi	r20, 0x7A	; 122
    28ba:	53 e4       	ldi	r21, 0x43	; 67
    28bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	8f 83       	std	Y+7, r24	; 0x07
    28c6:	98 87       	std	Y+8, r25	; 0x08
    28c8:	a9 87       	std	Y+9, r26	; 0x09
    28ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28cc:	6f 81       	ldd	r22, Y+7	; 0x07
    28ce:	78 85       	ldd	r23, Y+8	; 0x08
    28d0:	89 85       	ldd	r24, Y+9	; 0x09
    28d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	40 e8       	ldi	r20, 0x80	; 128
    28da:	5f e3       	ldi	r21, 0x3F	; 63
    28dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28e0:	88 23       	and	r24, r24
    28e2:	2c f4       	brge	.+10     	; 0x28ee <Move_ball_Left+0x9a>
		__ticks = 1;
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	9e 83       	std	Y+6, r25	; 0x06
    28ea:	8d 83       	std	Y+5, r24	; 0x05
    28ec:	3f c0       	rjmp	.+126    	; 0x296c <Move_ball_Left+0x118>
	else if (__tmp > 65535)
    28ee:	6f 81       	ldd	r22, Y+7	; 0x07
    28f0:	78 85       	ldd	r23, Y+8	; 0x08
    28f2:	89 85       	ldd	r24, Y+9	; 0x09
    28f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	3f ef       	ldi	r19, 0xFF	; 255
    28fa:	4f e7       	ldi	r20, 0x7F	; 127
    28fc:	57 e4       	ldi	r21, 0x47	; 71
    28fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2902:	18 16       	cp	r1, r24
    2904:	4c f5       	brge	.+82     	; 0x2958 <Move_ball_Left+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2906:	6b 85       	ldd	r22, Y+11	; 0x0b
    2908:	7c 85       	ldd	r23, Y+12	; 0x0c
    290a:	8d 85       	ldd	r24, Y+13	; 0x0d
    290c:	9e 85       	ldd	r25, Y+14	; 0x0e
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	40 e2       	ldi	r20, 0x20	; 32
    2914:	51 e4       	ldi	r21, 0x41	; 65
    2916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	bc 01       	movw	r22, r24
    2920:	cd 01       	movw	r24, r26
    2922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	9e 83       	std	Y+6, r25	; 0x06
    292c:	8d 83       	std	Y+5, r24	; 0x05
    292e:	0f c0       	rjmp	.+30     	; 0x294e <Move_ball_Left+0xfa>
    2930:	89 e1       	ldi	r24, 0x19	; 25
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	9c 83       	std	Y+4, r25	; 0x04
    2936:	8b 83       	std	Y+3, r24	; 0x03
    2938:	8b 81       	ldd	r24, Y+3	; 0x03
    293a:	9c 81       	ldd	r25, Y+4	; 0x04
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	f1 f7       	brne	.-4      	; 0x293c <Move_ball_Left+0xe8>
    2940:	9c 83       	std	Y+4, r25	; 0x04
    2942:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2944:	8d 81       	ldd	r24, Y+5	; 0x05
    2946:	9e 81       	ldd	r25, Y+6	; 0x06
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	9e 83       	std	Y+6, r25	; 0x06
    294c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    294e:	8d 81       	ldd	r24, Y+5	; 0x05
    2950:	9e 81       	ldd	r25, Y+6	; 0x06
    2952:	00 97       	sbiw	r24, 0x00	; 0
    2954:	69 f7       	brne	.-38     	; 0x2930 <Move_ball_Left+0xdc>
    2956:	14 c0       	rjmp	.+40     	; 0x2980 <Move_ball_Left+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2958:	6f 81       	ldd	r22, Y+7	; 0x07
    295a:	78 85       	ldd	r23, Y+8	; 0x08
    295c:	89 85       	ldd	r24, Y+9	; 0x09
    295e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	9e 83       	std	Y+6, r25	; 0x06
    296a:	8d 83       	std	Y+5, r24	; 0x05
    296c:	8d 81       	ldd	r24, Y+5	; 0x05
    296e:	9e 81       	ldd	r25, Y+6	; 0x06
    2970:	9a 83       	std	Y+2, r25	; 0x02
    2972:	89 83       	std	Y+1, r24	; 0x01
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	9a 81       	ldd	r25, Y+2	; 0x02
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	f1 f7       	brne	.-4      	; 0x2978 <Move_ball_Left+0x124>
    297c:	9a 83       	std	Y+2, r25	; 0x02
    297e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(200);
			LCD_enuGoToPosition(Global_u8Ball_row,Global_u8Ball_col);
    2980:	80 91 c6 00 	lds	r24, 0x00C6
    2984:	48 2f       	mov	r20, r24
    2986:	50 e0       	ldi	r21, 0x00	; 0
    2988:	80 91 c7 00 	lds	r24, 0x00C7
    298c:	28 2f       	mov	r18, r24
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	ca 01       	movw	r24, r20
    2992:	b9 01       	movw	r22, r18
    2994:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_enuGoToPosition>
					LCD_enuDisplayChar(' ');
    2998:	80 e2       	ldi	r24, 0x20	; 32
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <LCD_enuDisplayChar>
							LCD_enuDisplayChar(' ');

		}
}
void Move_ball_Left(){
	for(Global_u8Ball_col=14;Global_u8Ball_col>0;Global_u8Ball_col--){
    29a0:	80 91 c7 00 	lds	r24, 0x00C7
    29a4:	81 50       	subi	r24, 0x01	; 1
    29a6:	80 93 c7 00 	sts	0x00C7, r24
    29aa:	80 91 c7 00 	lds	r24, 0x00C7
    29ae:	88 23       	and	r24, r24
    29b0:	09 f0       	breq	.+2      	; 0x29b4 <Move_ball_Left+0x160>
    29b2:	5e cf       	rjmp	.-324    	; 0x2870 <Move_ball_Left+0x1c>
			_delay_ms(200);
			LCD_enuGoToPosition(Global_u8Ball_row,Global_u8Ball_col);
					LCD_enuDisplayChar(' ');

		}
	Global_u8Ball_col++;
    29b4:	80 91 c7 00 	lds	r24, 0x00C7
    29b8:	8f 5f       	subi	r24, 0xFF	; 255
    29ba:	80 93 c7 00 	sts	0x00C7, r24
}
    29be:	2e 96       	adiw	r28, 0x0e	; 14
    29c0:	0f b6       	in	r0, 0x3f	; 63
    29c2:	f8 94       	cli
    29c4:	de bf       	out	0x3e, r29	; 62
    29c6:	0f be       	out	0x3f, r0	; 63
    29c8:	cd bf       	out	0x3d, r28	; 61
    29ca:	cf 91       	pop	r28
    29cc:	df 91       	pop	r29
    29ce:	08 95       	ret

000029d0 <Check_Winner>:

void Check_Winner(){
    29d0:	df 93       	push	r29
    29d2:	cf 93       	push	r28
    29d4:	cd b7       	in	r28, 0x3d	; 61
    29d6:	de b7       	in	r29, 0x3e	; 62
    29d8:	e8 97       	sbiw	r28, 0x38	; 56
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	de bf       	out	0x3e, r29	; 62
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	cd bf       	out	0x3d, r28	; 61
	if(Global_u8Score1==5){
    29e4:	80 91 d6 00 	lds	r24, 0x00D6
    29e8:	90 91 d7 00 	lds	r25, 0x00D7
    29ec:	a0 91 d8 00 	lds	r26, 0x00D8
    29f0:	b0 91 d9 00 	lds	r27, 0x00D9
    29f4:	85 30       	cpi	r24, 0x05	; 5
    29f6:	91 05       	cpc	r25, r1
    29f8:	a1 05       	cpc	r26, r1
    29fa:	b1 05       	cpc	r27, r1
    29fc:	09 f0       	breq	.+2      	; 0x2a00 <Check_Winner+0x30>
    29fe:	99 c0       	rjmp	.+306    	; 0x2b32 <Check_Winner+0x162>
		LCD_vidClearScreen();
    2a00:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_vidClearScreen>
		LCD_enuWriteString("END THE GAME ",0,1);
    2a04:	88 e6       	ldi	r24, 0x68	; 104
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	60 e0       	ldi	r22, 0x00	; 0
    2a0a:	70 e0       	ldi	r23, 0x00	; 0
    2a0c:	41 e0       	ldi	r20, 0x01	; 1
    2a0e:	50 e0       	ldi	r21, 0x00	; 0
    2a10:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_enuWriteString>
		LCD_enuWriteString("PLAYER 1 win ",1,1);
    2a14:	86 e7       	ldi	r24, 0x76	; 118
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	61 e0       	ldi	r22, 0x01	; 1
    2a1a:	70 e0       	ldi	r23, 0x00	; 0
    2a1c:	41 e0       	ldi	r20, 0x01	; 1
    2a1e:	50 e0       	ldi	r21, 0x00	; 0
    2a20:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_enuWriteString>
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	aa ef       	ldi	r26, 0xFA	; 250
    2a2a:	b3 e4       	ldi	r27, 0x43	; 67
    2a2c:	8d ab       	std	Y+53, r24	; 0x35
    2a2e:	9e ab       	std	Y+54, r25	; 0x36
    2a30:	af ab       	std	Y+55, r26	; 0x37
    2a32:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a34:	6d a9       	ldd	r22, Y+53	; 0x35
    2a36:	7e a9       	ldd	r23, Y+54	; 0x36
    2a38:	8f a9       	ldd	r24, Y+55	; 0x37
    2a3a:	98 ad       	ldd	r25, Y+56	; 0x38
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	4a e7       	ldi	r20, 0x7A	; 122
    2a42:	53 e4       	ldi	r21, 0x43	; 67
    2a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	89 ab       	std	Y+49, r24	; 0x31
    2a4e:	9a ab       	std	Y+50, r25	; 0x32
    2a50:	ab ab       	std	Y+51, r26	; 0x33
    2a52:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a54:	69 a9       	ldd	r22, Y+49	; 0x31
    2a56:	7a a9       	ldd	r23, Y+50	; 0x32
    2a58:	8b a9       	ldd	r24, Y+51	; 0x33
    2a5a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	40 e8       	ldi	r20, 0x80	; 128
    2a62:	5f e3       	ldi	r21, 0x3F	; 63
    2a64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a68:	88 23       	and	r24, r24
    2a6a:	2c f4       	brge	.+10     	; 0x2a76 <Check_Winner+0xa6>
		__ticks = 1;
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	98 ab       	std	Y+48, r25	; 0x30
    2a72:	8f a7       	std	Y+47, r24	; 0x2f
    2a74:	3f c0       	rjmp	.+126    	; 0x2af4 <Check_Winner+0x124>
	else if (__tmp > 65535)
    2a76:	69 a9       	ldd	r22, Y+49	; 0x31
    2a78:	7a a9       	ldd	r23, Y+50	; 0x32
    2a7a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a7c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	3f ef       	ldi	r19, 0xFF	; 255
    2a82:	4f e7       	ldi	r20, 0x7F	; 127
    2a84:	57 e4       	ldi	r21, 0x47	; 71
    2a86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a8a:	18 16       	cp	r1, r24
    2a8c:	4c f5       	brge	.+82     	; 0x2ae0 <Check_Winner+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a8e:	6d a9       	ldd	r22, Y+53	; 0x35
    2a90:	7e a9       	ldd	r23, Y+54	; 0x36
    2a92:	8f a9       	ldd	r24, Y+55	; 0x37
    2a94:	98 ad       	ldd	r25, Y+56	; 0x38
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	40 e2       	ldi	r20, 0x20	; 32
    2a9c:	51 e4       	ldi	r21, 0x41	; 65
    2a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	bc 01       	movw	r22, r24
    2aa8:	cd 01       	movw	r24, r26
    2aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	98 ab       	std	Y+48, r25	; 0x30
    2ab4:	8f a7       	std	Y+47, r24	; 0x2f
    2ab6:	0f c0       	rjmp	.+30     	; 0x2ad6 <Check_Winner+0x106>
    2ab8:	89 e1       	ldi	r24, 0x19	; 25
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	9e a7       	std	Y+46, r25	; 0x2e
    2abe:	8d a7       	std	Y+45, r24	; 0x2d
    2ac0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ac2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	f1 f7       	brne	.-4      	; 0x2ac4 <Check_Winner+0xf4>
    2ac8:	9e a7       	std	Y+46, r25	; 0x2e
    2aca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2acc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ace:	98 a9       	ldd	r25, Y+48	; 0x30
    2ad0:	01 97       	sbiw	r24, 0x01	; 1
    2ad2:	98 ab       	std	Y+48, r25	; 0x30
    2ad4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ad8:	98 a9       	ldd	r25, Y+48	; 0x30
    2ada:	00 97       	sbiw	r24, 0x00	; 0
    2adc:	69 f7       	brne	.-38     	; 0x2ab8 <Check_Winner+0xe8>
    2ade:	14 c0       	rjmp	.+40     	; 0x2b08 <Check_Winner+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ae2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ae4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ae6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	98 ab       	std	Y+48, r25	; 0x30
    2af2:	8f a7       	std	Y+47, r24	; 0x2f
    2af4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2af6:	98 a9       	ldd	r25, Y+48	; 0x30
    2af8:	9c a7       	std	Y+44, r25	; 0x2c
    2afa:	8b a7       	std	Y+43, r24	; 0x2b
    2afc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2afe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b00:	01 97       	sbiw	r24, 0x01	; 1
    2b02:	f1 f7       	brne	.-4      	; 0x2b00 <Check_Winner+0x130>
    2b04:	9c a7       	std	Y+44, r25	; 0x2c
    2b06:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);
		LCD_vidClearScreen();
    2b08:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_vidClearScreen>
		Global_u8Score1=0;
    2b0c:	10 92 d6 00 	sts	0x00D6, r1
    2b10:	10 92 d7 00 	sts	0x00D7, r1
    2b14:	10 92 d8 00 	sts	0x00D8, r1
    2b18:	10 92 d9 00 	sts	0x00D9, r1
		Global_u8Score2=0;
    2b1c:	10 92 da 00 	sts	0x00DA, r1
    2b20:	10 92 db 00 	sts	0x00DB, r1
    2b24:	10 92 dc 00 	sts	0x00DC, r1
    2b28:	10 92 dd 00 	sts	0x00DD, r1
		Ping_PongInit();
    2b2c:	0e 94 a4 12 	call	0x2548	; 0x2548 <Ping_PongInit>
    2b30:	a6 c0       	rjmp	.+332    	; 0x2c7e <Check_Winner+0x2ae>
	}
	else if(Global_u8Score2==5){
    2b32:	80 91 da 00 	lds	r24, 0x00DA
    2b36:	90 91 db 00 	lds	r25, 0x00DB
    2b3a:	a0 91 dc 00 	lds	r26, 0x00DC
    2b3e:	b0 91 dd 00 	lds	r27, 0x00DD
    2b42:	85 30       	cpi	r24, 0x05	; 5
    2b44:	91 05       	cpc	r25, r1
    2b46:	a1 05       	cpc	r26, r1
    2b48:	b1 05       	cpc	r27, r1
    2b4a:	09 f0       	breq	.+2      	; 0x2b4e <Check_Winner+0x17e>
    2b4c:	98 c0       	rjmp	.+304    	; 0x2c7e <Check_Winner+0x2ae>
		LCD_vidClearScreen();
    2b4e:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_vidClearScreen>
		LCD_enuWriteString("END THE GAME ",0,1);
    2b52:	88 e6       	ldi	r24, 0x68	; 104
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	60 e0       	ldi	r22, 0x00	; 0
    2b58:	70 e0       	ldi	r23, 0x00	; 0
    2b5a:	41 e0       	ldi	r20, 0x01	; 1
    2b5c:	50 e0       	ldi	r21, 0x00	; 0
    2b5e:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_enuWriteString>
		LCD_enuWriteString("PLAYER 1 win ",1,1);
    2b62:	86 e7       	ldi	r24, 0x76	; 118
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	61 e0       	ldi	r22, 0x01	; 1
    2b68:	70 e0       	ldi	r23, 0x00	; 0
    2b6a:	41 e0       	ldi	r20, 0x01	; 1
    2b6c:	50 e0       	ldi	r21, 0x00	; 0
    2b6e:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_enuWriteString>
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	aa ef       	ldi	r26, 0xFA	; 250
    2b78:	b3 e4       	ldi	r27, 0x43	; 67
    2b7a:	8f a3       	std	Y+39, r24	; 0x27
    2b7c:	98 a7       	std	Y+40, r25	; 0x28
    2b7e:	a9 a7       	std	Y+41, r26	; 0x29
    2b80:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b82:	6f a1       	ldd	r22, Y+39	; 0x27
    2b84:	78 a5       	ldd	r23, Y+40	; 0x28
    2b86:	89 a5       	ldd	r24, Y+41	; 0x29
    2b88:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	4a e7       	ldi	r20, 0x7A	; 122
    2b90:	53 e4       	ldi	r21, 0x43	; 67
    2b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	8b a3       	std	Y+35, r24	; 0x23
    2b9c:	9c a3       	std	Y+36, r25	; 0x24
    2b9e:	ad a3       	std	Y+37, r26	; 0x25
    2ba0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ba2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ba4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ba6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ba8:	9e a1       	ldd	r25, Y+38	; 0x26
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	40 e8       	ldi	r20, 0x80	; 128
    2bb0:	5f e3       	ldi	r21, 0x3F	; 63
    2bb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bb6:	88 23       	and	r24, r24
    2bb8:	2c f4       	brge	.+10     	; 0x2bc4 <Check_Winner+0x1f4>
		__ticks = 1;
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	9a a3       	std	Y+34, r25	; 0x22
    2bc0:	89 a3       	std	Y+33, r24	; 0x21
    2bc2:	3f c0       	rjmp	.+126    	; 0x2c42 <Check_Winner+0x272>
	else if (__tmp > 65535)
    2bc4:	6b a1       	ldd	r22, Y+35	; 0x23
    2bc6:	7c a1       	ldd	r23, Y+36	; 0x24
    2bc8:	8d a1       	ldd	r24, Y+37	; 0x25
    2bca:	9e a1       	ldd	r25, Y+38	; 0x26
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	3f ef       	ldi	r19, 0xFF	; 255
    2bd0:	4f e7       	ldi	r20, 0x7F	; 127
    2bd2:	57 e4       	ldi	r21, 0x47	; 71
    2bd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bd8:	18 16       	cp	r1, r24
    2bda:	4c f5       	brge	.+82     	; 0x2c2e <Check_Winner+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bdc:	6f a1       	ldd	r22, Y+39	; 0x27
    2bde:	78 a5       	ldd	r23, Y+40	; 0x28
    2be0:	89 a5       	ldd	r24, Y+41	; 0x29
    2be2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 e2       	ldi	r20, 0x20	; 32
    2bea:	51 e4       	ldi	r21, 0x41	; 65
    2bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	bc 01       	movw	r22, r24
    2bf6:	cd 01       	movw	r24, r26
    2bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	9a a3       	std	Y+34, r25	; 0x22
    2c02:	89 a3       	std	Y+33, r24	; 0x21
    2c04:	0f c0       	rjmp	.+30     	; 0x2c24 <Check_Winner+0x254>
    2c06:	89 e1       	ldi	r24, 0x19	; 25
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	98 a3       	std	Y+32, r25	; 0x20
    2c0c:	8f 8f       	std	Y+31, r24	; 0x1f
    2c0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c10:	98 a1       	ldd	r25, Y+32	; 0x20
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	f1 f7       	brne	.-4      	; 0x2c12 <Check_Winner+0x242>
    2c16:	98 a3       	std	Y+32, r25	; 0x20
    2c18:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c1c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c1e:	01 97       	sbiw	r24, 0x01	; 1
    2c20:	9a a3       	std	Y+34, r25	; 0x22
    2c22:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c24:	89 a1       	ldd	r24, Y+33	; 0x21
    2c26:	9a a1       	ldd	r25, Y+34	; 0x22
    2c28:	00 97       	sbiw	r24, 0x00	; 0
    2c2a:	69 f7       	brne	.-38     	; 0x2c06 <Check_Winner+0x236>
    2c2c:	14 c0       	rjmp	.+40     	; 0x2c56 <Check_Winner+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c2e:	6b a1       	ldd	r22, Y+35	; 0x23
    2c30:	7c a1       	ldd	r23, Y+36	; 0x24
    2c32:	8d a1       	ldd	r24, Y+37	; 0x25
    2c34:	9e a1       	ldd	r25, Y+38	; 0x26
    2c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	9a a3       	std	Y+34, r25	; 0x22
    2c40:	89 a3       	std	Y+33, r24	; 0x21
    2c42:	89 a1       	ldd	r24, Y+33	; 0x21
    2c44:	9a a1       	ldd	r25, Y+34	; 0x22
    2c46:	9e 8f       	std	Y+30, r25	; 0x1e
    2c48:	8d 8f       	std	Y+29, r24	; 0x1d
    2c4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c4c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	f1 f7       	brne	.-4      	; 0x2c4e <Check_Winner+0x27e>
    2c52:	9e 8f       	std	Y+30, r25	; 0x1e
    2c54:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		LCD_vidClearScreen();
    2c56:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_vidClearScreen>
		Global_u8Score1=0;
    2c5a:	10 92 d6 00 	sts	0x00D6, r1
    2c5e:	10 92 d7 00 	sts	0x00D7, r1
    2c62:	10 92 d8 00 	sts	0x00D8, r1
    2c66:	10 92 d9 00 	sts	0x00D9, r1
		Global_u8Score2=0;
    2c6a:	10 92 da 00 	sts	0x00DA, r1
    2c6e:	10 92 db 00 	sts	0x00DB, r1
    2c72:	10 92 dc 00 	sts	0x00DC, r1
    2c76:	10 92 dd 00 	sts	0x00DD, r1
		Ping_PongInit();
    2c7a:	0e 94 a4 12 	call	0x2548	; 0x2548 <Ping_PongInit>
	}

	if( Global_u8Player1==1){
    2c7e:	80 91 d4 00 	lds	r24, 0x00D4
    2c82:	81 30       	cpi	r24, 0x01	; 1
    2c84:	09 f0       	breq	.+2      	; 0x2c88 <Check_Winner+0x2b8>
    2c86:	9c c0       	rjmp	.+312    	; 0x2dc0 <Check_Winner+0x3f0>
		 Global_u8Player1=0;
    2c88:	10 92 d4 00 	sts	0x00D4, r1
		LCD_vidClearScreen();
    2c8c:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_vidClearScreen>
		LCD_enuWriteString("PLAYER 1 win",1,1);
    2c90:	84 e8       	ldi	r24, 0x84	; 132
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	61 e0       	ldi	r22, 0x01	; 1
    2c96:	70 e0       	ldi	r23, 0x00	; 0
    2c98:	41 e0       	ldi	r20, 0x01	; 1
    2c9a:	50 e0       	ldi	r21, 0x00	; 0
    2c9c:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_enuWriteString>
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	aa ef       	ldi	r26, 0xFA	; 250
    2ca6:	b3 e4       	ldi	r27, 0x43	; 67
    2ca8:	89 8f       	std	Y+25, r24	; 0x19
    2caa:	9a 8f       	std	Y+26, r25	; 0x1a
    2cac:	ab 8f       	std	Y+27, r26	; 0x1b
    2cae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cb0:	69 8d       	ldd	r22, Y+25	; 0x19
    2cb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	4a e7       	ldi	r20, 0x7A	; 122
    2cbe:	53 e4       	ldi	r21, 0x43	; 67
    2cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	8d 8b       	std	Y+21, r24	; 0x15
    2cca:	9e 8b       	std	Y+22, r25	; 0x16
    2ccc:	af 8b       	std	Y+23, r26	; 0x17
    2cce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cd0:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd2:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd4:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd6:	98 8d       	ldd	r25, Y+24	; 0x18
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	40 e8       	ldi	r20, 0x80	; 128
    2cde:	5f e3       	ldi	r21, 0x3F	; 63
    2ce0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ce4:	88 23       	and	r24, r24
    2ce6:	2c f4       	brge	.+10     	; 0x2cf2 <Check_Winner+0x322>
		__ticks = 1;
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	9c 8b       	std	Y+20, r25	; 0x14
    2cee:	8b 8b       	std	Y+19, r24	; 0x13
    2cf0:	3f c0       	rjmp	.+126    	; 0x2d70 <Check_Winner+0x3a0>
	else if (__tmp > 65535)
    2cf2:	6d 89       	ldd	r22, Y+21	; 0x15
    2cf4:	7e 89       	ldd	r23, Y+22	; 0x16
    2cf6:	8f 89       	ldd	r24, Y+23	; 0x17
    2cf8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	3f ef       	ldi	r19, 0xFF	; 255
    2cfe:	4f e7       	ldi	r20, 0x7F	; 127
    2d00:	57 e4       	ldi	r21, 0x47	; 71
    2d02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d06:	18 16       	cp	r1, r24
    2d08:	4c f5       	brge	.+82     	; 0x2d5c <Check_Winner+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d0a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	40 e2       	ldi	r20, 0x20	; 32
    2d18:	51 e4       	ldi	r21, 0x41	; 65
    2d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	bc 01       	movw	r22, r24
    2d24:	cd 01       	movw	r24, r26
    2d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	9c 8b       	std	Y+20, r25	; 0x14
    2d30:	8b 8b       	std	Y+19, r24	; 0x13
    2d32:	0f c0       	rjmp	.+30     	; 0x2d52 <Check_Winner+0x382>
    2d34:	89 e1       	ldi	r24, 0x19	; 25
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	9a 8b       	std	Y+18, r25	; 0x12
    2d3a:	89 8b       	std	Y+17, r24	; 0x11
    2d3c:	89 89       	ldd	r24, Y+17	; 0x11
    2d3e:	9a 89       	ldd	r25, Y+18	; 0x12
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	f1 f7       	brne	.-4      	; 0x2d40 <Check_Winner+0x370>
    2d44:	9a 8b       	std	Y+18, r25	; 0x12
    2d46:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d48:	8b 89       	ldd	r24, Y+19	; 0x13
    2d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d4c:	01 97       	sbiw	r24, 0x01	; 1
    2d4e:	9c 8b       	std	Y+20, r25	; 0x14
    2d50:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d52:	8b 89       	ldd	r24, Y+19	; 0x13
    2d54:	9c 89       	ldd	r25, Y+20	; 0x14
    2d56:	00 97       	sbiw	r24, 0x00	; 0
    2d58:	69 f7       	brne	.-38     	; 0x2d34 <Check_Winner+0x364>
    2d5a:	14 c0       	rjmp	.+40     	; 0x2d84 <Check_Winner+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d5c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d5e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d60:	8f 89       	ldd	r24, Y+23	; 0x17
    2d62:	98 8d       	ldd	r25, Y+24	; 0x18
    2d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	9c 8b       	std	Y+20, r25	; 0x14
    2d6e:	8b 8b       	std	Y+19, r24	; 0x13
    2d70:	8b 89       	ldd	r24, Y+19	; 0x13
    2d72:	9c 89       	ldd	r25, Y+20	; 0x14
    2d74:	98 8b       	std	Y+16, r25	; 0x10
    2d76:	8f 87       	std	Y+15, r24	; 0x0f
    2d78:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d7a:	98 89       	ldd	r25, Y+16	; 0x10
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	f1 f7       	brne	.-4      	; 0x2d7c <Check_Winner+0x3ac>
    2d80:	98 8b       	std	Y+16, r25	; 0x10
    2d82:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);

		LCD_vidClearScreen();
    2d84:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_vidClearScreen>
		Global_u8Score1++;
    2d88:	80 91 d6 00 	lds	r24, 0x00D6
    2d8c:	90 91 d7 00 	lds	r25, 0x00D7
    2d90:	a0 91 d8 00 	lds	r26, 0x00D8
    2d94:	b0 91 d9 00 	lds	r27, 0x00D9
    2d98:	01 96       	adiw	r24, 0x01	; 1
    2d9a:	a1 1d       	adc	r26, r1
    2d9c:	b1 1d       	adc	r27, r1
    2d9e:	80 93 d6 00 	sts	0x00D6, r24
    2da2:	90 93 d7 00 	sts	0x00D7, r25
    2da6:	a0 93 d8 00 	sts	0x00D8, r26
    2daa:	b0 93 d9 00 	sts	0x00D9, r27
		Ping_PongInit();
    2dae:	0e 94 a4 12 	call	0x2548	; 0x2548 <Ping_PongInit>
		Global_u8Ball_col=1;
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	80 93 c7 00 	sts	0x00C7, r24
		Global_u8Ball_row =2;
    2db8:	82 e0       	ldi	r24, 0x02	; 2
    2dba:	80 93 c6 00 	sts	0x00C6, r24
    2dbe:	a0 c0       	rjmp	.+320    	; 0x2f00 <Check_Winner+0x530>


	}
	else if(  Global_u8Player2 ==1){
    2dc0:	80 91 d5 00 	lds	r24, 0x00D5
    2dc4:	81 30       	cpi	r24, 0x01	; 1
    2dc6:	09 f0       	breq	.+2      	; 0x2dca <Check_Winner+0x3fa>
    2dc8:	9b c0       	rjmp	.+310    	; 0x2f00 <Check_Winner+0x530>
		    Global_u8Player2=0;
    2dca:	10 92 d5 00 	sts	0x00D5, r1
			LCD_vidClearScreen();
    2dce:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_vidClearScreen>
			LCD_enuWriteString("PLAYER 2 win",1,1);
    2dd2:	81 e9       	ldi	r24, 0x91	; 145
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	61 e0       	ldi	r22, 0x01	; 1
    2dd8:	70 e0       	ldi	r23, 0x00	; 0
    2dda:	41 e0       	ldi	r20, 0x01	; 1
    2ddc:	50 e0       	ldi	r21, 0x00	; 0
    2dde:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_enuWriteString>
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	aa ef       	ldi	r26, 0xFA	; 250
    2de8:	b3 e4       	ldi	r27, 0x43	; 67
    2dea:	8b 87       	std	Y+11, r24	; 0x0b
    2dec:	9c 87       	std	Y+12, r25	; 0x0c
    2dee:	ad 87       	std	Y+13, r26	; 0x0d
    2df0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2df4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2df6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2df8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	4a e7       	ldi	r20, 0x7A	; 122
    2e00:	53 e4       	ldi	r21, 0x43	; 67
    2e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	8f 83       	std	Y+7, r24	; 0x07
    2e0c:	98 87       	std	Y+8, r25	; 0x08
    2e0e:	a9 87       	std	Y+9, r26	; 0x09
    2e10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e12:	6f 81       	ldd	r22, Y+7	; 0x07
    2e14:	78 85       	ldd	r23, Y+8	; 0x08
    2e16:	89 85       	ldd	r24, Y+9	; 0x09
    2e18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	40 e8       	ldi	r20, 0x80	; 128
    2e20:	5f e3       	ldi	r21, 0x3F	; 63
    2e22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e26:	88 23       	and	r24, r24
    2e28:	2c f4       	brge	.+10     	; 0x2e34 <Check_Winner+0x464>
		__ticks = 1;
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	9e 83       	std	Y+6, r25	; 0x06
    2e30:	8d 83       	std	Y+5, r24	; 0x05
    2e32:	3f c0       	rjmp	.+126    	; 0x2eb2 <Check_Winner+0x4e2>
	else if (__tmp > 65535)
    2e34:	6f 81       	ldd	r22, Y+7	; 0x07
    2e36:	78 85       	ldd	r23, Y+8	; 0x08
    2e38:	89 85       	ldd	r24, Y+9	; 0x09
    2e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	3f ef       	ldi	r19, 0xFF	; 255
    2e40:	4f e7       	ldi	r20, 0x7F	; 127
    2e42:	57 e4       	ldi	r21, 0x47	; 71
    2e44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e48:	18 16       	cp	r1, r24
    2e4a:	4c f5       	brge	.+82     	; 0x2e9e <Check_Winner+0x4ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e50:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e52:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	40 e2       	ldi	r20, 0x20	; 32
    2e5a:	51 e4       	ldi	r21, 0x41	; 65
    2e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	bc 01       	movw	r22, r24
    2e66:	cd 01       	movw	r24, r26
    2e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	9e 83       	std	Y+6, r25	; 0x06
    2e72:	8d 83       	std	Y+5, r24	; 0x05
    2e74:	0f c0       	rjmp	.+30     	; 0x2e94 <Check_Winner+0x4c4>
    2e76:	89 e1       	ldi	r24, 0x19	; 25
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	9c 83       	std	Y+4, r25	; 0x04
    2e7c:	8b 83       	std	Y+3, r24	; 0x03
    2e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e80:	9c 81       	ldd	r25, Y+4	; 0x04
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	f1 f7       	brne	.-4      	; 0x2e82 <Check_Winner+0x4b2>
    2e86:	9c 83       	std	Y+4, r25	; 0x04
    2e88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	9e 83       	std	Y+6, r25	; 0x06
    2e92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e94:	8d 81       	ldd	r24, Y+5	; 0x05
    2e96:	9e 81       	ldd	r25, Y+6	; 0x06
    2e98:	00 97       	sbiw	r24, 0x00	; 0
    2e9a:	69 f7       	brne	.-38     	; 0x2e76 <Check_Winner+0x4a6>
    2e9c:	14 c0       	rjmp	.+40     	; 0x2ec6 <Check_Winner+0x4f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea0:	78 85       	ldd	r23, Y+8	; 0x08
    2ea2:	89 85       	ldd	r24, Y+9	; 0x09
    2ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	9e 83       	std	Y+6, r25	; 0x06
    2eb0:	8d 83       	std	Y+5, r24	; 0x05
    2eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb6:	9a 83       	std	Y+2, r25	; 0x02
    2eb8:	89 83       	std	Y+1, r24	; 0x01
    2eba:	89 81       	ldd	r24, Y+1	; 0x01
    2ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ebe:	01 97       	sbiw	r24, 0x01	; 1
    2ec0:	f1 f7       	brne	.-4      	; 0x2ebe <Check_Winner+0x4ee>
    2ec2:	9a 83       	std	Y+2, r25	; 0x02
    2ec4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);

			LCD_vidClearScreen();
    2ec6:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_vidClearScreen>
			Global_u8Score2++;
    2eca:	80 91 da 00 	lds	r24, 0x00DA
    2ece:	90 91 db 00 	lds	r25, 0x00DB
    2ed2:	a0 91 dc 00 	lds	r26, 0x00DC
    2ed6:	b0 91 dd 00 	lds	r27, 0x00DD
    2eda:	01 96       	adiw	r24, 0x01	; 1
    2edc:	a1 1d       	adc	r26, r1
    2ede:	b1 1d       	adc	r27, r1
    2ee0:	80 93 da 00 	sts	0x00DA, r24
    2ee4:	90 93 db 00 	sts	0x00DB, r25
    2ee8:	a0 93 dc 00 	sts	0x00DC, r26
    2eec:	b0 93 dd 00 	sts	0x00DD, r27
			Ping_PongInit();
    2ef0:	0e 94 a4 12 	call	0x2548	; 0x2548 <Ping_PongInit>
			Global_u8Ball_col=14;
    2ef4:	8e e0       	ldi	r24, 0x0E	; 14
    2ef6:	80 93 c7 00 	sts	0x00C7, r24
			Global_u8Ball_row =2;
    2efa:	82 e0       	ldi	r24, 0x02	; 2
    2efc:	80 93 c6 00 	sts	0x00C6, r24

		}

	 Global_u8Player1=0;
    2f00:	10 92 d4 00 	sts	0x00D4, r1
	 Global_u8Player2=0;
    2f04:	10 92 d5 00 	sts	0x00D5, r1
}
    2f08:	e8 96       	adiw	r28, 0x38	; 56
    2f0a:	0f b6       	in	r0, 0x3f	; 63
    2f0c:	f8 94       	cli
    2f0e:	de bf       	out	0x3e, r29	; 62
    2f10:	0f be       	out	0x3f, r0	; 63
    2f12:	cd bf       	out	0x3d, r28	; 61
    2f14:	cf 91       	pop	r28
    2f16:	df 91       	pop	r29
    2f18:	08 95       	ret

00002f1a <Racket1>:

//ISR FUN
volatile void Racket1(void* ptr){
    2f1a:	df 93       	push	r29
    2f1c:	cf 93       	push	r28
    2f1e:	00 d0       	rcall	.+0      	; 0x2f20 <Racket1+0x6>
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
    2f24:	9a 83       	std	Y+2, r25	; 0x02
    2f26:	89 83       	std	Y+1, r24	; 0x01



 if(1==Global_u8Ball_col){
    2f28:	80 91 c7 00 	lds	r24, 0x00C7
    2f2c:	81 30       	cpi	r24, 0x01	; 1
    2f2e:	39 f4       	brne	.+14     	; 0x2f3e <Racket1+0x24>

	//LCD_enuWriteString("PLAYER 1 win",1,1);

	//_delay_ms(50);
	 Global_u8Player2=0;
    2f30:	10 92 d5 00 	sts	0x00D5, r1
	Global_u8Player1=1;
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	80 93 d4 00 	sts	0x00D4, r24
	Move_ball_Right();
    2f3a:	0e 94 71 13 	call	0x26e2	; 0x26e2 <Move_ball_Right>



 }
}
    2f3e:	0f 90       	pop	r0
    2f40:	0f 90       	pop	r0
    2f42:	cf 91       	pop	r28
    2f44:	df 91       	pop	r29
    2f46:	08 95       	ret

00002f48 <Racket2>:
volatile void Racket2(void* ptr){
    2f48:	df 93       	push	r29
    2f4a:	cf 93       	push	r28
    2f4c:	00 d0       	rcall	.+0      	; 0x2f4e <Racket2+0x6>
    2f4e:	cd b7       	in	r28, 0x3d	; 61
    2f50:	de b7       	in	r29, 0x3e	; 62
    2f52:	9a 83       	std	Y+2, r25	; 0x02
    2f54:	89 83       	std	Y+1, r24	; 0x01





	 if(14==Global_u8Ball_col){	//LCD_enuWriteString("PLAYER 2 win",1,1);
    2f56:	80 91 c7 00 	lds	r24, 0x00C7
    2f5a:	8e 30       	cpi	r24, 0x0E	; 14
    2f5c:	39 f4       	brne	.+14     	; 0x2f6c <Racket2+0x24>
		//_delay_ms(50);
	 Global_u8Player1=0;
    2f5e:	10 92 d4 00 	sts	0x00D4, r1
	   Global_u8Player2=1;
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	80 93 d5 00 	sts	0x00D5, r24
		Move_ball_Left();}
    2f68:	0e 94 2a 14 	call	0x2854	; 0x2854 <Move_ball_Left>

}
    2f6c:	0f 90       	pop	r0
    2f6e:	0f 90       	pop	r0
    2f70:	cf 91       	pop	r28
    2f72:	df 91       	pop	r29
    2f74:	08 95       	ret

00002f76 <main>:
extern EXTI_t EXTI_AstrEXTIConfig[3];



void main(void)
{
    2f76:	df 93       	push	r29
    2f78:	cf 93       	push	r28
    2f7a:	cd b7       	in	r28, 0x3d	; 61
    2f7c:	de b7       	in	r29, 0x3e	; 62
    2f7e:	60 97       	sbiw	r28, 0x10	; 16
    2f80:	0f b6       	in	r0, 0x3f	; 63
    2f82:	f8 94       	cli
    2f84:	de bf       	out	0x3e, r29	; 62
    2f86:	0f be       	out	0x3f, r0	; 63
    2f88:	cd bf       	out	0x3d, r28	; 61
 DIO_enuInit();
    2f8a:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_enuInit>

   /*PIN for interrupt */
	DIO_enuSetPinDirection(DIO_u8PORTD, DIO_u8PIN2, DIO_u8INPUT);
    2f8e:	83 e0       	ldi	r24, 0x03	; 3
    2f90:	62 e0       	ldi	r22, 0x02	; 2
    2f92:	40 e0       	ldi	r20, 0x00	; 0
    2f94:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_enuSetPinDirection>
	DIO_enuSetPinVal(DIO_u8PORTD, DIO_u8PIN2, DIO_u8PULLUP);
    2f98:	83 e0       	ldi	r24, 0x03	; 3
    2f9a:	62 e0       	ldi	r22, 0x02	; 2
    2f9c:	41 e0       	ldi	r20, 0x01	; 1
    2f9e:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <DIO_enuSetPinVal>
	DIO_enuSetPinDirection(DIO_u8PORTD, DIO_u8PIN3, DIO_u8INPUT);
    2fa2:	83 e0       	ldi	r24, 0x03	; 3
    2fa4:	63 e0       	ldi	r22, 0x03	; 3
    2fa6:	40 e0       	ldi	r20, 0x00	; 0
    2fa8:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_enuSetPinDirection>
	DIO_enuSetPinVal(DIO_u8PORTD, DIO_u8PIN3, DIO_u8PULLUP);
    2fac:	83 e0       	ldi	r24, 0x03	; 3
    2fae:	63 e0       	ldi	r22, 0x03	; 3
    2fb0:	41 e0       	ldi	r20, 0x01	; 1
    2fb2:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <DIO_enuSetPinVal>


 LCD_enuInit();
    2fb6:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <LCD_enuInit>

 EXTI_enuInit(EXTI_AstrEXTIConfig);
    2fba:	80 ec       	ldi	r24, 0xC0	; 192
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	0e 94 d2 05 	call	0xba4	; 0xba4 <EXTI_enuInit>


 int ptr=0;
    2fc2:	18 8a       	std	Y+16, r1	; 0x10
    2fc4:	1f 86       	std	Y+15, r1	; 0x0f
	 EXTI_enuCallBack(&Racket1,&ptr , 0);
    2fc6:	8d e8       	ldi	r24, 0x8D	; 141
    2fc8:	97 e1       	ldi	r25, 0x17	; 23
    2fca:	9e 01       	movw	r18, r28
    2fcc:	21 5f       	subi	r18, 0xF1	; 241
    2fce:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd0:	b9 01       	movw	r22, r18
    2fd2:	40 e0       	ldi	r20, 0x00	; 0
    2fd4:	0e 94 37 08 	call	0x106e	; 0x106e <EXTI_enuCallBack>
	 EXTI_enuCallBack(&Racket2,&ptr, 1);
    2fd8:	84 ea       	ldi	r24, 0xA4	; 164
    2fda:	97 e1       	ldi	r25, 0x17	; 23
    2fdc:	9e 01       	movw	r18, r28
    2fde:	21 5f       	subi	r18, 0xF1	; 241
    2fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe2:	b9 01       	movw	r22, r18
    2fe4:	41 e0       	ldi	r20, 0x01	; 1
    2fe6:	0e 94 37 08 	call	0x106e	; 0x106e <EXTI_enuCallBack>

	/* Enable INT0 ,INT1*/
	EXTI_enuEnableINT(INT0);
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	0e 94 d7 07 	call	0xfae	; 0xfae <EXTI_enuEnableINT>
	EXTI_enuEnableINT(INT1);
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	0e 94 d7 07 	call	0xfae	; 0xfae <EXTI_enuEnableINT>

	/* enable global interrupt */
	GIE_enuGloable_Interrupt_Enable();
    2ff6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GIE_enuGloable_Interrupt_Enable>




	LCD_enuWriteString("Welcome To",0,0);
    2ffa:	8e e9       	ldi	r24, 0x9E	; 158
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	60 e0       	ldi	r22, 0x00	; 0
    3000:	70 e0       	ldi	r23, 0x00	; 0
    3002:	40 e0       	ldi	r20, 0x00	; 0
    3004:	50 e0       	ldi	r21, 0x00	; 0
    3006:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_enuWriteString>
	LCD_enuWriteString("PING PONG GAME",1,1);
    300a:	89 ea       	ldi	r24, 0xA9	; 169
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	61 e0       	ldi	r22, 0x01	; 1
    3010:	70 e0       	ldi	r23, 0x00	; 0
    3012:	41 e0       	ldi	r20, 0x01	; 1
    3014:	50 e0       	ldi	r21, 0x00	; 0
    3016:	0e 94 12 11 	call	0x2224	; 0x2224 <LCD_enuWriteString>
    301a:	80 e0       	ldi	r24, 0x00	; 0
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	aa ef       	ldi	r26, 0xFA	; 250
    3020:	b3 e4       	ldi	r27, 0x43	; 67
    3022:	8b 87       	std	Y+11, r24	; 0x0b
    3024:	9c 87       	std	Y+12, r25	; 0x0c
    3026:	ad 87       	std	Y+13, r26	; 0x0d
    3028:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    302a:	6b 85       	ldd	r22, Y+11	; 0x0b
    302c:	7c 85       	ldd	r23, Y+12	; 0x0c
    302e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3030:	9e 85       	ldd	r25, Y+14	; 0x0e
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	4a e7       	ldi	r20, 0x7A	; 122
    3038:	53 e4       	ldi	r21, 0x43	; 67
    303a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	8f 83       	std	Y+7, r24	; 0x07
    3044:	98 87       	std	Y+8, r25	; 0x08
    3046:	a9 87       	std	Y+9, r26	; 0x09
    3048:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    304a:	6f 81       	ldd	r22, Y+7	; 0x07
    304c:	78 85       	ldd	r23, Y+8	; 0x08
    304e:	89 85       	ldd	r24, Y+9	; 0x09
    3050:	9a 85       	ldd	r25, Y+10	; 0x0a
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	40 e8       	ldi	r20, 0x80	; 128
    3058:	5f e3       	ldi	r21, 0x3F	; 63
    305a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    305e:	88 23       	and	r24, r24
    3060:	2c f4       	brge	.+10     	; 0x306c <main+0xf6>
		__ticks = 1;
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	9e 83       	std	Y+6, r25	; 0x06
    3068:	8d 83       	std	Y+5, r24	; 0x05
    306a:	3f c0       	rjmp	.+126    	; 0x30ea <main+0x174>
	else if (__tmp > 65535)
    306c:	6f 81       	ldd	r22, Y+7	; 0x07
    306e:	78 85       	ldd	r23, Y+8	; 0x08
    3070:	89 85       	ldd	r24, Y+9	; 0x09
    3072:	9a 85       	ldd	r25, Y+10	; 0x0a
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	3f ef       	ldi	r19, 0xFF	; 255
    3078:	4f e7       	ldi	r20, 0x7F	; 127
    307a:	57 e4       	ldi	r21, 0x47	; 71
    307c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3080:	18 16       	cp	r1, r24
    3082:	4c f5       	brge	.+82     	; 0x30d6 <main+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3084:	6b 85       	ldd	r22, Y+11	; 0x0b
    3086:	7c 85       	ldd	r23, Y+12	; 0x0c
    3088:	8d 85       	ldd	r24, Y+13	; 0x0d
    308a:	9e 85       	ldd	r25, Y+14	; 0x0e
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	40 e2       	ldi	r20, 0x20	; 32
    3092:	51 e4       	ldi	r21, 0x41	; 65
    3094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	bc 01       	movw	r22, r24
    309e:	cd 01       	movw	r24, r26
    30a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	9e 83       	std	Y+6, r25	; 0x06
    30aa:	8d 83       	std	Y+5, r24	; 0x05
    30ac:	0f c0       	rjmp	.+30     	; 0x30cc <main+0x156>
    30ae:	89 e1       	ldi	r24, 0x19	; 25
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	9c 83       	std	Y+4, r25	; 0x04
    30b4:	8b 83       	std	Y+3, r24	; 0x03
    30b6:	8b 81       	ldd	r24, Y+3	; 0x03
    30b8:	9c 81       	ldd	r25, Y+4	; 0x04
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	f1 f7       	brne	.-4      	; 0x30ba <main+0x144>
    30be:	9c 83       	std	Y+4, r25	; 0x04
    30c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c2:	8d 81       	ldd	r24, Y+5	; 0x05
    30c4:	9e 81       	ldd	r25, Y+6	; 0x06
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	9e 83       	std	Y+6, r25	; 0x06
    30ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30cc:	8d 81       	ldd	r24, Y+5	; 0x05
    30ce:	9e 81       	ldd	r25, Y+6	; 0x06
    30d0:	00 97       	sbiw	r24, 0x00	; 0
    30d2:	69 f7       	brne	.-38     	; 0x30ae <main+0x138>
    30d4:	14 c0       	rjmp	.+40     	; 0x30fe <main+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d6:	6f 81       	ldd	r22, Y+7	; 0x07
    30d8:	78 85       	ldd	r23, Y+8	; 0x08
    30da:	89 85       	ldd	r24, Y+9	; 0x09
    30dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	9e 83       	std	Y+6, r25	; 0x06
    30e8:	8d 83       	std	Y+5, r24	; 0x05
    30ea:	8d 81       	ldd	r24, Y+5	; 0x05
    30ec:	9e 81       	ldd	r25, Y+6	; 0x06
    30ee:	9a 83       	std	Y+2, r25	; 0x02
    30f0:	89 83       	std	Y+1, r24	; 0x01
    30f2:	89 81       	ldd	r24, Y+1	; 0x01
    30f4:	9a 81       	ldd	r25, Y+2	; 0x02
    30f6:	01 97       	sbiw	r24, 0x01	; 1
    30f8:	f1 f7       	brne	.-4      	; 0x30f6 <main+0x180>
    30fa:	9a 83       	std	Y+2, r25	; 0x02
    30fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_vidClearScreen();
    30fe:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_vidClearScreen>


    Ping_PongInit();
    3102:	0e 94 a4 12 	call	0x2548	; 0x2548 <Ping_PongInit>

		while(1)
		{

Check_Winner();
    3106:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <Check_Winner>
    310a:	fd cf       	rjmp	.-6      	; 0x3106 <main+0x190>

0000310c <__mulsi3>:
    310c:	62 9f       	mul	r22, r18
    310e:	d0 01       	movw	r26, r0
    3110:	73 9f       	mul	r23, r19
    3112:	f0 01       	movw	r30, r0
    3114:	82 9f       	mul	r24, r18
    3116:	e0 0d       	add	r30, r0
    3118:	f1 1d       	adc	r31, r1
    311a:	64 9f       	mul	r22, r20
    311c:	e0 0d       	add	r30, r0
    311e:	f1 1d       	adc	r31, r1
    3120:	92 9f       	mul	r25, r18
    3122:	f0 0d       	add	r31, r0
    3124:	83 9f       	mul	r24, r19
    3126:	f0 0d       	add	r31, r0
    3128:	74 9f       	mul	r23, r20
    312a:	f0 0d       	add	r31, r0
    312c:	65 9f       	mul	r22, r21
    312e:	f0 0d       	add	r31, r0
    3130:	99 27       	eor	r25, r25
    3132:	72 9f       	mul	r23, r18
    3134:	b0 0d       	add	r27, r0
    3136:	e1 1d       	adc	r30, r1
    3138:	f9 1f       	adc	r31, r25
    313a:	63 9f       	mul	r22, r19
    313c:	b0 0d       	add	r27, r0
    313e:	e1 1d       	adc	r30, r1
    3140:	f9 1f       	adc	r31, r25
    3142:	bd 01       	movw	r22, r26
    3144:	cf 01       	movw	r24, r30
    3146:	11 24       	eor	r1, r1
    3148:	08 95       	ret

0000314a <__divmodsi4>:
    314a:	97 fb       	bst	r25, 7
    314c:	09 2e       	mov	r0, r25
    314e:	05 26       	eor	r0, r21
    3150:	0e d0       	rcall	.+28     	; 0x316e <__divmodsi4_neg1>
    3152:	57 fd       	sbrc	r21, 7
    3154:	04 d0       	rcall	.+8      	; 0x315e <__divmodsi4_neg2>
    3156:	14 d0       	rcall	.+40     	; 0x3180 <__udivmodsi4>
    3158:	0a d0       	rcall	.+20     	; 0x316e <__divmodsi4_neg1>
    315a:	00 1c       	adc	r0, r0
    315c:	38 f4       	brcc	.+14     	; 0x316c <__divmodsi4_exit>

0000315e <__divmodsi4_neg2>:
    315e:	50 95       	com	r21
    3160:	40 95       	com	r20
    3162:	30 95       	com	r19
    3164:	21 95       	neg	r18
    3166:	3f 4f       	sbci	r19, 0xFF	; 255
    3168:	4f 4f       	sbci	r20, 0xFF	; 255
    316a:	5f 4f       	sbci	r21, 0xFF	; 255

0000316c <__divmodsi4_exit>:
    316c:	08 95       	ret

0000316e <__divmodsi4_neg1>:
    316e:	f6 f7       	brtc	.-4      	; 0x316c <__divmodsi4_exit>
    3170:	90 95       	com	r25
    3172:	80 95       	com	r24
    3174:	70 95       	com	r23
    3176:	61 95       	neg	r22
    3178:	7f 4f       	sbci	r23, 0xFF	; 255
    317a:	8f 4f       	sbci	r24, 0xFF	; 255
    317c:	9f 4f       	sbci	r25, 0xFF	; 255
    317e:	08 95       	ret

00003180 <__udivmodsi4>:
    3180:	a1 e2       	ldi	r26, 0x21	; 33
    3182:	1a 2e       	mov	r1, r26
    3184:	aa 1b       	sub	r26, r26
    3186:	bb 1b       	sub	r27, r27
    3188:	fd 01       	movw	r30, r26
    318a:	0d c0       	rjmp	.+26     	; 0x31a6 <__udivmodsi4_ep>

0000318c <__udivmodsi4_loop>:
    318c:	aa 1f       	adc	r26, r26
    318e:	bb 1f       	adc	r27, r27
    3190:	ee 1f       	adc	r30, r30
    3192:	ff 1f       	adc	r31, r31
    3194:	a2 17       	cp	r26, r18
    3196:	b3 07       	cpc	r27, r19
    3198:	e4 07       	cpc	r30, r20
    319a:	f5 07       	cpc	r31, r21
    319c:	20 f0       	brcs	.+8      	; 0x31a6 <__udivmodsi4_ep>
    319e:	a2 1b       	sub	r26, r18
    31a0:	b3 0b       	sbc	r27, r19
    31a2:	e4 0b       	sbc	r30, r20
    31a4:	f5 0b       	sbc	r31, r21

000031a6 <__udivmodsi4_ep>:
    31a6:	66 1f       	adc	r22, r22
    31a8:	77 1f       	adc	r23, r23
    31aa:	88 1f       	adc	r24, r24
    31ac:	99 1f       	adc	r25, r25
    31ae:	1a 94       	dec	r1
    31b0:	69 f7       	brne	.-38     	; 0x318c <__udivmodsi4_loop>
    31b2:	60 95       	com	r22
    31b4:	70 95       	com	r23
    31b6:	80 95       	com	r24
    31b8:	90 95       	com	r25
    31ba:	9b 01       	movw	r18, r22
    31bc:	ac 01       	movw	r20, r24
    31be:	bd 01       	movw	r22, r26
    31c0:	cf 01       	movw	r24, r30
    31c2:	08 95       	ret

000031c4 <__prologue_saves__>:
    31c4:	2f 92       	push	r2
    31c6:	3f 92       	push	r3
    31c8:	4f 92       	push	r4
    31ca:	5f 92       	push	r5
    31cc:	6f 92       	push	r6
    31ce:	7f 92       	push	r7
    31d0:	8f 92       	push	r8
    31d2:	9f 92       	push	r9
    31d4:	af 92       	push	r10
    31d6:	bf 92       	push	r11
    31d8:	cf 92       	push	r12
    31da:	df 92       	push	r13
    31dc:	ef 92       	push	r14
    31de:	ff 92       	push	r15
    31e0:	0f 93       	push	r16
    31e2:	1f 93       	push	r17
    31e4:	cf 93       	push	r28
    31e6:	df 93       	push	r29
    31e8:	cd b7       	in	r28, 0x3d	; 61
    31ea:	de b7       	in	r29, 0x3e	; 62
    31ec:	ca 1b       	sub	r28, r26
    31ee:	db 0b       	sbc	r29, r27
    31f0:	0f b6       	in	r0, 0x3f	; 63
    31f2:	f8 94       	cli
    31f4:	de bf       	out	0x3e, r29	; 62
    31f6:	0f be       	out	0x3f, r0	; 63
    31f8:	cd bf       	out	0x3d, r28	; 61
    31fa:	09 94       	ijmp

000031fc <__epilogue_restores__>:
    31fc:	2a 88       	ldd	r2, Y+18	; 0x12
    31fe:	39 88       	ldd	r3, Y+17	; 0x11
    3200:	48 88       	ldd	r4, Y+16	; 0x10
    3202:	5f 84       	ldd	r5, Y+15	; 0x0f
    3204:	6e 84       	ldd	r6, Y+14	; 0x0e
    3206:	7d 84       	ldd	r7, Y+13	; 0x0d
    3208:	8c 84       	ldd	r8, Y+12	; 0x0c
    320a:	9b 84       	ldd	r9, Y+11	; 0x0b
    320c:	aa 84       	ldd	r10, Y+10	; 0x0a
    320e:	b9 84       	ldd	r11, Y+9	; 0x09
    3210:	c8 84       	ldd	r12, Y+8	; 0x08
    3212:	df 80       	ldd	r13, Y+7	; 0x07
    3214:	ee 80       	ldd	r14, Y+6	; 0x06
    3216:	fd 80       	ldd	r15, Y+5	; 0x05
    3218:	0c 81       	ldd	r16, Y+4	; 0x04
    321a:	1b 81       	ldd	r17, Y+3	; 0x03
    321c:	aa 81       	ldd	r26, Y+2	; 0x02
    321e:	b9 81       	ldd	r27, Y+1	; 0x01
    3220:	ce 0f       	add	r28, r30
    3222:	d1 1d       	adc	r29, r1
    3224:	0f b6       	in	r0, 0x3f	; 63
    3226:	f8 94       	cli
    3228:	de bf       	out	0x3e, r29	; 62
    322a:	0f be       	out	0x3f, r0	; 63
    322c:	cd bf       	out	0x3d, r28	; 61
    322e:	ed 01       	movw	r28, r26
    3230:	08 95       	ret

00003232 <_exit>:
    3232:	f8 94       	cli

00003234 <__stop_program>:
    3234:	ff cf       	rjmp	.-2      	; 0x3234 <__stop_program>
