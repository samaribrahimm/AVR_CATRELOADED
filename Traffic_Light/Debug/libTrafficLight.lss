In archive libTrafficLight.a:

TIMER_Prog.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000009d8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000855  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .bss.Timer0_ApFun_OVF 00000002  00000000  00000000  00001261  2**0
                  ALLOC
  6 .bss.Timer0_Apvidparameter_OVF 00000002  00000000  00000000  00001261  2**0
                  ALLOC
  7 .bss.TIMER0_PFun_CTC 00000002  00000000  00000000  00001261  2**0
                  ALLOC
  8 .bss.TIMER0_Pvidparameter_CTC 00000002  00000000  00000000  00001261  2**0
                  ALLOC
  9 .bss.Global_u32NumOvf 00000004  00000000  00000000  00001261  2**0
                  ALLOC
 10 .bss.Global_u8Preload 00000001  00000000  00000000  00001261  2**0
                  ALLOC
 11 .bss.TIMER0_f32OC0Val 00000004  00000000  00000000  00001261  2**0
                  ALLOC
 12 .text.TIMER0_enuInit 000000a2  00000000  00000000  00001261  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text.TIMER0_enuSetPreload 00000026  00000000  00000000  00001303  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text.TIMER0_enuSetAsyncDelay 000001c0  00000000  00000000  00001329  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text.TIMER0_enuSetsyncDelay 000001fc  00000000  00000000  000014e9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text.TIMER0_enuGeneratePWM 00000030  00000000  00000000  000016e5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text.TIMER0_enuSetCTCVal 00000026  00000000  00000000  00001715  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text.TIMER0_enuSetCALLBACK_CTC 00000054  00000000  00000000  0000173b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text.TIMER0_enuEnableOVFInterrupt 00000028  00000000  00000000  0000178f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.TIMER0_enuEnableCTCInterrupt 00000028  00000000  00000000  000017b7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_10 0000006e  00000000  00000000  000017df  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .bss.Local_u32Counter.1417 00000004  00000000  00000000  0000184d  2**0
                  ALLOC
 23 .text.__vector_11 000000da  00000000  00000000  0000184d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.TIMER0_enuInit:

00000000 <TIMER0_enuInit>:
	{
		TIMER0_PFun_CTC((void *)TIMER0_Pvidparameter_CTC);
	}
}
ISR(VECT_TIMER0_OVF	)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	19 82       	std	Y+1, r1	; 0x01
   c:	a3 e5       	ldi	r26, 0x53	; 83
   e:	b0 e0       	ldi	r27, 0x00	; 0
  10:	e3 e5       	ldi	r30, 0x53	; 83
  12:	f0 e0       	ldi	r31, 0x00	; 0
  14:	80 81       	ld	r24, Z
  16:	87 7b       	andi	r24, 0xB7	; 183
  18:	8c 93       	st	X, r24
  1a:	a3 e5       	ldi	r26, 0x53	; 83
  1c:	b0 e0       	ldi	r27, 0x00	; 0
  1e:	e3 e5       	ldi	r30, 0x53	; 83
  20:	f0 e0       	ldi	r31, 0x00	; 0
  22:	80 81       	ld	r24, Z
  24:	8f 7b       	andi	r24, 0xBF	; 191
  26:	8c 93       	st	X, r24
  28:	a3 e5       	ldi	r26, 0x53	; 83
	if(Timer0_ApFun_OVF != NULL)
  2a:	b0 e0       	ldi	r27, 0x00	; 0
  2c:	e3 e5       	ldi	r30, 0x53	; 83
  2e:	f0 e0       	ldi	r31, 0x00	; 0
  30:	80 81       	ld	r24, Z
  32:	87 7f       	andi	r24, 0xF7	; 247
  34:	8c 93       	st	X, r24
  36:	a3 e5       	ldi	r26, 0x53	; 83
	{
		static u32 Local_u32Counter = 0;
		Local_u32Counter++;
  38:	b0 e0       	ldi	r27, 0x00	; 0
  3a:	e3 e5       	ldi	r30, 0x53	; 83
  3c:	f0 e0       	ldi	r31, 0x00	; 0
  3e:	80 81       	ld	r24, Z
  40:	88 7f       	andi	r24, 0xF8	; 248
  42:	8c 93       	st	X, r24
  44:	a3 e5       	ldi	r26, 0x53	; 83
  46:	b0 e0       	ldi	r27, 0x00	; 0
  48:	e3 e5       	ldi	r30, 0x53	; 83
  4a:	f0 e0       	ldi	r31, 0x00	; 0
  4c:	80 81       	ld	r24, Z
  4e:	84 60       	ori	r24, 0x04	; 4
  50:	8c 93       	st	X, r24
  52:	a3 e5       	ldi	r26, 0x53	; 83
  54:	b0 e0       	ldi	r27, 0x00	; 0
  56:	e3 e5       	ldi	r30, 0x53	; 83
  58:	f0 e0       	ldi	r31, 0x00	; 0
  5a:	80 81       	ld	r24, Z
  5c:	8d 7f       	andi	r24, 0xFD	; 253
		if(Local_u32Counter == Global_u32NumOvf)
  5e:	8c 93       	st	X, r24
  60:	a3 e5       	ldi	r26, 0x53	; 83
  62:	b0 e0       	ldi	r27, 0x00	; 0
  64:	e3 e5       	ldi	r30, 0x53	; 83
  66:	f0 e0       	ldi	r31, 0x00	; 0
  68:	80 81       	ld	r24, Z
  6a:	81 60       	ori	r24, 0x01	; 1
  6c:	8c 93       	st	X, r24
  6e:	a3 e5       	ldi	r26, 0x53	; 83
  70:	b0 e0       	ldi	r27, 0x00	; 0
  72:	e3 e5       	ldi	r30, 0x53	; 83
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	80 81       	ld	r24, Z
  78:	8f 7c       	andi	r24, 0xCF	; 207
  7a:	8c 93       	st	X, r24
  7c:	a3 e5       	ldi	r26, 0x53	; 83
  7e:	b0 e0       	ldi	r27, 0x00	; 0
  80:	e3 e5       	ldi	r30, 0x53	; 83
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	8f 7d       	andi	r24, 0xDF	; 223
		{
			TCNT0 = Global_u8Preload;
  88:	8c 93       	st	X, r24
  8a:	a3 e5       	ldi	r26, 0x53	; 83
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	e3 e5       	ldi	r30, 0x53	; 83
  90:	f0 e0       	ldi	r31, 0x00	; 0
			Timer0_ApFun_OVF((void *)Timer0_Apvidparameter_OVF);
  92:	80 81       	ld	r24, Z
  94:	8f 7e       	andi	r24, 0xEF	; 239
  96:	8c 93       	st	X, r24
  98:	89 81       	ldd	r24, Y+1	; 0x01
  9a:	0f 90       	pop	r0
  9c:	cf 91       	pop	r28
  9e:	df 91       	pop	r29
  a0:	08 95       	ret

Disassembly of section .text.TIMER0_enuSetPreload:

00000000 <TIMER0_enuSetPreload>:
	{
		TIMER0_PFun_CTC((void *)TIMER0_Pvidparameter_CTC);
	}
}
ISR(VECT_TIMER0_OVF	)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <TIMER0_enuSetPreload+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	8a 83       	std	Y+2, r24	; 0x02
   c:	19 82       	std	Y+1, r1	; 0x01
   e:	e2 e5       	ldi	r30, 0x52	; 82
  10:	f0 e0       	ldi	r31, 0x00	; 0
  12:	8a 81       	ldd	r24, Y+2	; 0x02
  14:	80 83       	st	Z, r24
  16:	81 e0       	ldi	r24, 0x01	; 1
  18:	89 83       	std	Y+1, r24	; 0x01
  1a:	89 81       	ldd	r24, Y+1	; 0x01
  1c:	0f 90       	pop	r0
  1e:	0f 90       	pop	r0
  20:	cf 91       	pop	r28
  22:	df 91       	pop	r29
  24:	08 95       	ret

Disassembly of section .text.TIMER0_enuSetAsyncDelay:

00000000 <TIMER0_enuSetAsyncDelay>:
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	66 97       	sbiw	r28, 0x16	; 22
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	6f 87       	std	Y+15, r22	; 0x0f
  16:	78 8b       	std	Y+16, r23	; 0x10
  18:	89 8b       	std	Y+17, r24	; 0x11
  1a:	9a 8b       	std	Y+18, r25	; 0x12
  1c:	5c 8b       	std	Y+20, r21	; 0x14
  1e:	4b 8b       	std	Y+19, r20	; 0x13
  20:	3e 8b       	std	Y+22, r19	; 0x16
  22:	2d 8b       	std	Y+21, r18	; 0x15
  24:	1e 86       	std	Y+14, r1	; 0x0e
  26:	8f e6       	ldi	r24, 0x6F	; 111
  28:	92 e1       	ldi	r25, 0x12	; 18
	if(Timer0_ApFun_OVF != NULL)
  2a:	a3 e8       	ldi	r26, 0x83	; 131
  2c:	b3 e4       	ldi	r27, 0x43	; 67
  2e:	8a 87       	std	Y+10, r24	; 0x0a
  30:	9b 87       	std	Y+11, r25	; 0x0b
  32:	ac 87       	std	Y+12, r26	; 0x0c
  34:	bd 87       	std	Y+13, r27	; 0x0d
  36:	6f 85       	ldd	r22, Y+15	; 0x0f
	{
		static u32 Local_u32Counter = 0;
		Local_u32Counter++;
  38:	78 89       	ldd	r23, Y+16	; 0x10
  3a:	89 89       	ldd	r24, Y+17	; 0x11
  3c:	9a 89       	ldd	r25, Y+18	; 0x12
  3e:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetAsyncDelay>
  42:	dc 01       	movw	r26, r24
  44:	cb 01       	movw	r24, r22
  46:	bc 01       	movw	r22, r24
  48:	cd 01       	movw	r24, r26
  4a:	2a 85       	ldd	r18, Y+10	; 0x0a
  4c:	3b 85       	ldd	r19, Y+11	; 0x0b
  4e:	4c 85       	ldd	r20, Y+12	; 0x0c
  50:	5d 85       	ldd	r21, Y+13	; 0x0d
  52:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetAsyncDelay>
  56:	dc 01       	movw	r26, r24
  58:	cb 01       	movw	r24, r22
  5a:	8e 83       	std	Y+6, r24	; 0x06
  5c:	9f 83       	std	Y+7, r25	; 0x07
		if(Local_u32Counter == Global_u32NumOvf)
  5e:	a8 87       	std	Y+8, r26	; 0x08
  60:	b9 87       	std	Y+9, r27	; 0x09
  62:	6e 81       	ldd	r22, Y+6	; 0x06
  64:	7f 81       	ldd	r23, Y+7	; 0x07
  66:	88 85       	ldd	r24, Y+8	; 0x08
  68:	99 85       	ldd	r25, Y+9	; 0x09
  6a:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetAsyncDelay>
  6e:	dc 01       	movw	r26, r24
  70:	cb 01       	movw	r24, r22
  72:	bc 01       	movw	r22, r24
  74:	cd 01       	movw	r24, r26
  76:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetAsyncDelay>
  7a:	9b 01       	movw	r18, r22
  7c:	ac 01       	movw	r20, r24
  7e:	6e 81       	ldd	r22, Y+6	; 0x06
  80:	7f 81       	ldd	r23, Y+7	; 0x07
  82:	88 85       	ldd	r24, Y+8	; 0x08
  84:	99 85       	ldd	r25, Y+9	; 0x09
  86:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetAsyncDelay>
		{
			TCNT0 = Global_u8Preload;
  8a:	dc 01       	movw	r26, r24
  8c:	cb 01       	movw	r24, r22
  8e:	bc 01       	movw	r22, r24
  90:	cd 01       	movw	r24, r26
			Timer0_ApFun_OVF((void *)Timer0_Apvidparameter_OVF);
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	50 e0       	ldi	r21, 0x00	; 0
  9a:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetAsyncDelay>
  9e:	88 23       	and	r24, r24
  a0:	01 f4       	brne	.+0      	; 0xa2 <TIMER0_enuSetAsyncDelay+0xa2>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <TIMER0_enuSetAsyncDelay+0xa4>
			Local_u32Counter = 0;
  a4:	6e 81       	ldd	r22, Y+6	; 0x06
  a6:	7f 81       	ldd	r23, Y+7	; 0x07
  a8:	88 85       	ldd	r24, Y+8	; 0x08
  aa:	99 85       	ldd	r25, Y+9	; 0x09
  ac:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetAsyncDelay>
  b0:	dc 01       	movw	r26, r24
  b2:	cb 01       	movw	r24, r22
		}
	}
}
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	a1 1d       	adc	r26, r1
  b8:	b1 1d       	adc	r27, r1
  ba:	8a 83       	std	Y+2, r24	; 0x02
  bc:	9b 83       	std	Y+3, r25	; 0x03
  be:	ac 83       	std	Y+4, r26	; 0x04
  c0:	bd 83       	std	Y+5, r27	; 0x05
  c2:	6e 81       	ldd	r22, Y+6	; 0x06
  c4:	7f 81       	ldd	r23, Y+7	; 0x07
  c6:	88 85       	ldd	r24, Y+8	; 0x08
  c8:	99 85       	ldd	r25, Y+9	; 0x09
  ca:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetAsyncDelay>
  ce:	dc 01       	movw	r26, r24
  d0:	cb 01       	movw	r24, r22
  d2:	bc 01       	movw	r22, r24
  d4:	cd 01       	movw	r24, r26
  d6:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetAsyncDelay>
  da:	9b 01       	movw	r18, r22
  dc:	ac 01       	movw	r20, r24
  de:	6e 81       	ldd	r22, Y+6	; 0x06
  e0:	7f 81       	ldd	r23, Y+7	; 0x07
  e2:	88 85       	ldd	r24, Y+8	; 0x08
  e4:	99 85       	ldd	r25, Y+9	; 0x09
  e6:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetAsyncDelay>
  ea:	dc 01       	movw	r26, r24
  ec:	cb 01       	movw	r24, r22
  ee:	8e 83       	std	Y+6, r24	; 0x06
  f0:	9f 83       	std	Y+7, r25	; 0x07
  f2:	a8 87       	std	Y+8, r26	; 0x08
  f4:	b9 87       	std	Y+9, r27	; 0x09
  f6:	6e 81       	ldd	r22, Y+6	; 0x06
  f8:	7f 81       	ldd	r23, Y+7	; 0x07
  fa:	88 85       	ldd	r24, Y+8	; 0x08
  fc:	99 85       	ldd	r25, Y+9	; 0x09
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	40 e8       	ldi	r20, 0x80	; 128
 104:	53 ec       	ldi	r21, 0xC3	; 195
 106:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetAsyncDelay>
 10a:	dc 01       	movw	r26, r24
 10c:	cb 01       	movw	r24, r22
 10e:	bc 01       	movw	r22, r24
 110:	cd 01       	movw	r24, r26
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	40 e8       	ldi	r20, 0x80	; 128
 118:	53 e4       	ldi	r21, 0x43	; 67
 11a:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetAsyncDelay>
 11e:	dc 01       	movw	r26, r24
 120:	cb 01       	movw	r24, r22
 122:	bc 01       	movw	r22, r24
 124:	cd 01       	movw	r24, r26
 126:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetAsyncDelay>
 12a:	dc 01       	movw	r26, r24
 12c:	cb 01       	movw	r24, r22
 12e:	89 83       	std	Y+1, r24	; 0x01
 130:	e2 e5       	ldi	r30, 0x52	; 82
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	80 83       	st	Z, r24
 138:	8a 81       	ldd	r24, Y+2	; 0x02
 13a:	9b 81       	ldd	r25, Y+3	; 0x03
 13c:	ac 81       	ldd	r26, Y+4	; 0x04
 13e:	bd 81       	ldd	r27, Y+5	; 0x05
 140:	80 93 00 00 	sts	0x0000, r24
 144:	90 93 00 00 	sts	0x0000, r25
 148:	a0 93 00 00 	sts	0x0000, r26
 14c:	b0 93 00 00 	sts	0x0000, r27
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	80 93 00 00 	sts	0x0000, r24
 156:	00 c0       	rjmp	.+0      	; 0x158 <TIMER0_enuSetAsyncDelay+0x158>
 158:	6e 81       	ldd	r22, Y+6	; 0x06
 15a:	7f 81       	ldd	r23, Y+7	; 0x07
 15c:	88 85       	ldd	r24, Y+8	; 0x08
 15e:	99 85       	ldd	r25, Y+9	; 0x09
 160:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetAsyncDelay>
 164:	dc 01       	movw	r26, r24
 166:	cb 01       	movw	r24, r22
 168:	80 93 00 00 	sts	0x0000, r24
 16c:	90 93 00 00 	sts	0x0000, r25
 170:	a0 93 00 00 	sts	0x0000, r26
 174:	b0 93 00 00 	sts	0x0000, r27
 178:	8b 89       	ldd	r24, Y+19	; 0x13
 17a:	9c 89       	ldd	r25, Y+20	; 0x14
 17c:	00 97       	sbiw	r24, 0x00	; 0
 17e:	01 f0       	breq	.+0      	; 0x180 <TIMER0_enuSetAsyncDelay+0x180>
 180:	8b 89       	ldd	r24, Y+19	; 0x13
 182:	9c 89       	ldd	r25, Y+20	; 0x14
 184:	90 93 00 00 	sts	0x0000, r25
 188:	80 93 00 00 	sts	0x0000, r24
 18c:	8d 89       	ldd	r24, Y+21	; 0x15
 18e:	9e 89       	ldd	r25, Y+22	; 0x16
 190:	90 93 00 00 	sts	0x0000, r25
 194:	80 93 00 00 	sts	0x0000, r24
 198:	00 c0       	rjmp	.+0      	; 0x19a <TIMER0_enuSetAsyncDelay+0x19a>
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	8e 87       	std	Y+14, r24	; 0x0e
 19e:	a9 e5       	ldi	r26, 0x59	; 89
 1a0:	b0 e0       	ldi	r27, 0x00	; 0
 1a2:	e9 e5       	ldi	r30, 0x59	; 89
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	81 60       	ori	r24, 0x01	; 1
 1aa:	8c 93       	st	X, r24
 1ac:	8e 85       	ldd	r24, Y+14	; 0x0e
 1ae:	66 96       	adiw	r28, 0x16	; 22
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	de bf       	out	0x3e, r29	; 62
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	cd bf       	out	0x3d, r28	; 61
 1ba:	cf 91       	pop	r28
 1bc:	df 91       	pop	r29
 1be:	08 95       	ret

Disassembly of section .text.TIMER0_enuSetsyncDelay:

00000000 <TIMER0_enuSetsyncDelay>:
	{
		TIMER0_PFun_CTC((void *)TIMER0_Pvidparameter_CTC);
	}
}
ISR(VECT_TIMER0_OVF	)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	66 97       	sbiw	r28, 0x16	; 22
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	6b 8b       	std	Y+19, r22	; 0x13
  16:	7c 8b       	std	Y+20, r23	; 0x14
  18:	8d 8b       	std	Y+21, r24	; 0x15
  1a:	9e 8b       	std	Y+22, r25	; 0x16
  1c:	1a 8a       	std	Y+18, r1	; 0x12
  1e:	a9 e5       	ldi	r26, 0x59	; 89
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e9 e5       	ldi	r30, 0x59	; 89
  24:	f0 e0       	ldi	r31, 0x00	; 0
  26:	80 81       	ld	r24, Z
  28:	8e 7f       	andi	r24, 0xFE	; 254
	if(Timer0_ApFun_OVF != NULL)
  2a:	8c 93       	st	X, r24
  2c:	8f e6       	ldi	r24, 0x6F	; 111
  2e:	92 e1       	ldi	r25, 0x12	; 18
  30:	a3 e8       	ldi	r26, 0x83	; 131
  32:	b3 e4       	ldi	r27, 0x43	; 67
  34:	8e 87       	std	Y+14, r24	; 0x0e
  36:	9f 87       	std	Y+15, r25	; 0x0f
	{
		static u32 Local_u32Counter = 0;
		Local_u32Counter++;
  38:	a8 8b       	std	Y+16, r26	; 0x10
  3a:	b9 8b       	std	Y+17, r27	; 0x11
  3c:	6b 89       	ldd	r22, Y+19	; 0x13
  3e:	7c 89       	ldd	r23, Y+20	; 0x14
  40:	8d 89       	ldd	r24, Y+21	; 0x15
  42:	9e 89       	ldd	r25, Y+22	; 0x16
  44:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetsyncDelay>
  48:	dc 01       	movw	r26, r24
  4a:	cb 01       	movw	r24, r22
  4c:	bc 01       	movw	r22, r24
  4e:	cd 01       	movw	r24, r26
  50:	2e 85       	ldd	r18, Y+14	; 0x0e
  52:	3f 85       	ldd	r19, Y+15	; 0x0f
  54:	48 89       	ldd	r20, Y+16	; 0x10
  56:	59 89       	ldd	r21, Y+17	; 0x11
  58:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetsyncDelay>
  5c:	dc 01       	movw	r26, r24
		if(Local_u32Counter == Global_u32NumOvf)
  5e:	cb 01       	movw	r24, r22
  60:	8a 87       	std	Y+10, r24	; 0x0a
  62:	9b 87       	std	Y+11, r25	; 0x0b
  64:	ac 87       	std	Y+12, r26	; 0x0c
  66:	bd 87       	std	Y+13, r27	; 0x0d
  68:	6a 85       	ldd	r22, Y+10	; 0x0a
  6a:	7b 85       	ldd	r23, Y+11	; 0x0b
  6c:	8c 85       	ldd	r24, Y+12	; 0x0c
  6e:	9d 85       	ldd	r25, Y+13	; 0x0d
  70:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetsyncDelay>
  74:	dc 01       	movw	r26, r24
  76:	cb 01       	movw	r24, r22
  78:	bc 01       	movw	r22, r24
  7a:	cd 01       	movw	r24, r26
  7c:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetsyncDelay>
  80:	9b 01       	movw	r18, r22
  82:	ac 01       	movw	r20, r24
  84:	6a 85       	ldd	r22, Y+10	; 0x0a
  86:	7b 85       	ldd	r23, Y+11	; 0x0b
		{
			TCNT0 = Global_u8Preload;
  88:	8c 85       	ldd	r24, Y+12	; 0x0c
  8a:	9d 85       	ldd	r25, Y+13	; 0x0d
  8c:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetsyncDelay>
  90:	dc 01       	movw	r26, r24
			Timer0_ApFun_OVF((void *)Timer0_Apvidparameter_OVF);
  92:	cb 01       	movw	r24, r22
  94:	bc 01       	movw	r22, r24
  96:	cd 01       	movw	r24, r26
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	50 e0       	ldi	r21, 0x00	; 0
  a0:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetsyncDelay>
			Local_u32Counter = 0;
  a4:	88 23       	and	r24, r24
  a6:	01 f4       	brne	.+0      	; 0xa8 <TIMER0_enuSetsyncDelay+0xa8>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <TIMER0_enuSetsyncDelay+0xaa>
  aa:	6a 85       	ldd	r22, Y+10	; 0x0a
  ac:	7b 85       	ldd	r23, Y+11	; 0x0b
  ae:	8c 85       	ldd	r24, Y+12	; 0x0c
  b0:	9d 85       	ldd	r25, Y+13	; 0x0d
  b2:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetsyncDelay>
		}
	}
}
  b6:	dc 01       	movw	r26, r24
  b8:	cb 01       	movw	r24, r22
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	a1 1d       	adc	r26, r1
  be:	b1 1d       	adc	r27, r1
  c0:	8e 83       	std	Y+6, r24	; 0x06
  c2:	9f 83       	std	Y+7, r25	; 0x07
  c4:	a8 87       	std	Y+8, r26	; 0x08
  c6:	b9 87       	std	Y+9, r27	; 0x09
  c8:	6a 85       	ldd	r22, Y+10	; 0x0a
  ca:	7b 85       	ldd	r23, Y+11	; 0x0b
  cc:	8c 85       	ldd	r24, Y+12	; 0x0c
  ce:	9d 85       	ldd	r25, Y+13	; 0x0d
  d0:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetsyncDelay>
  d4:	dc 01       	movw	r26, r24
  d6:	cb 01       	movw	r24, r22
  d8:	bc 01       	movw	r22, r24
  da:	cd 01       	movw	r24, r26
  dc:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetsyncDelay>
  e0:	9b 01       	movw	r18, r22
  e2:	ac 01       	movw	r20, r24
  e4:	6a 85       	ldd	r22, Y+10	; 0x0a
  e6:	7b 85       	ldd	r23, Y+11	; 0x0b
  e8:	8c 85       	ldd	r24, Y+12	; 0x0c
  ea:	9d 85       	ldd	r25, Y+13	; 0x0d
  ec:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetsyncDelay>
  f0:	dc 01       	movw	r26, r24
  f2:	cb 01       	movw	r24, r22
  f4:	8a 87       	std	Y+10, r24	; 0x0a
  f6:	9b 87       	std	Y+11, r25	; 0x0b
  f8:	ac 87       	std	Y+12, r26	; 0x0c
  fa:	bd 87       	std	Y+13, r27	; 0x0d
  fc:	6a 85       	ldd	r22, Y+10	; 0x0a
  fe:	7b 85       	ldd	r23, Y+11	; 0x0b
 100:	8c 85       	ldd	r24, Y+12	; 0x0c
 102:	9d 85       	ldd	r25, Y+13	; 0x0d
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	40 e8       	ldi	r20, 0x80	; 128
 10a:	53 ec       	ldi	r21, 0xC3	; 195
 10c:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetsyncDelay>
 110:	dc 01       	movw	r26, r24
 112:	cb 01       	movw	r24, r22
 114:	bc 01       	movw	r22, r24
 116:	cd 01       	movw	r24, r26
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	40 e8       	ldi	r20, 0x80	; 128
 11e:	53 e4       	ldi	r21, 0x43	; 67
 120:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetsyncDelay>
 124:	dc 01       	movw	r26, r24
 126:	cb 01       	movw	r24, r22
 128:	bc 01       	movw	r22, r24
 12a:	cd 01       	movw	r24, r26
 12c:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetsyncDelay>
 130:	dc 01       	movw	r26, r24
 132:	cb 01       	movw	r24, r22
 134:	8d 83       	std	Y+5, r24	; 0x05
 136:	e2 e5       	ldi	r30, 0x52	; 82
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	8d 81       	ldd	r24, Y+5	; 0x05
 13c:	80 83       	st	Z, r24
 13e:	00 c0       	rjmp	.+0      	; 0x140 <TIMER0_enuSetsyncDelay+0x140>
 140:	e8 e5       	ldi	r30, 0x58	; 88
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	88 2f       	mov	r24, r24
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	81 70       	andi	r24, 0x01	; 1
 14c:	90 70       	andi	r25, 0x00	; 0
 14e:	00 97       	sbiw	r24, 0x00	; 0
 150:	01 f0       	breq	.+0      	; 0x152 <TIMER0_enuSetsyncDelay+0x152>
 152:	a8 e5       	ldi	r26, 0x58	; 88
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	e8 e5       	ldi	r30, 0x58	; 88
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	8c 93       	st	X, r24
 160:	8e 81       	ldd	r24, Y+6	; 0x06
 162:	9f 81       	ldd	r25, Y+7	; 0x07
 164:	a8 85       	ldd	r26, Y+8	; 0x08
 166:	b9 85       	ldd	r27, Y+9	; 0x09
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	a1 09       	sbc	r26, r1
 16c:	b1 09       	sbc	r27, r1
 16e:	8e 83       	std	Y+6, r24	; 0x06
 170:	9f 83       	std	Y+7, r25	; 0x07
 172:	a8 87       	std	Y+8, r26	; 0x08
 174:	b9 87       	std	Y+9, r27	; 0x09
 176:	8e 81       	ldd	r24, Y+6	; 0x06
 178:	9f 81       	ldd	r25, Y+7	; 0x07
 17a:	a8 85       	ldd	r26, Y+8	; 0x08
 17c:	b9 85       	ldd	r27, Y+9	; 0x09
 17e:	00 97       	sbiw	r24, 0x00	; 0
 180:	a1 05       	cpc	r26, r1
 182:	b1 05       	cpc	r27, r1
 184:	01 f4       	brne	.+0      	; 0x186 <TIMER0_enuSetsyncDelay+0x186>
 186:	00 c0       	rjmp	.+0      	; 0x188 <TIMER0_enuSetsyncDelay+0x188>
 188:	6a 85       	ldd	r22, Y+10	; 0x0a
 18a:	7b 85       	ldd	r23, Y+11	; 0x0b
 18c:	8c 85       	ldd	r24, Y+12	; 0x0c
 18e:	9d 85       	ldd	r25, Y+13	; 0x0d
 190:	0e 94 00 00 	call	0	; 0x0 <TIMER0_enuSetsyncDelay>
 194:	dc 01       	movw	r26, r24
 196:	cb 01       	movw	r24, r22
 198:	89 83       	std	Y+1, r24	; 0x01
 19a:	9a 83       	std	Y+2, r25	; 0x02
 19c:	ab 83       	std	Y+3, r26	; 0x03
 19e:	bc 83       	std	Y+4, r27	; 0x04
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <TIMER0_enuSetsyncDelay+0x1a2>
 1a2:	e8 e5       	ldi	r30, 0x58	; 88
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	88 2f       	mov	r24, r24
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	81 70       	andi	r24, 0x01	; 1
 1ae:	90 70       	andi	r25, 0x00	; 0
 1b0:	00 97       	sbiw	r24, 0x00	; 0
 1b2:	01 f0       	breq	.+0      	; 0x1b4 <TIMER0_enuSetsyncDelay+0x1b4>
 1b4:	a8 e5       	ldi	r26, 0x58	; 88
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	e8 e5       	ldi	r30, 0x58	; 88
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	81 60       	ori	r24, 0x01	; 1
 1c0:	8c 93       	st	X, r24
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	9a 81       	ldd	r25, Y+2	; 0x02
 1c6:	ab 81       	ldd	r26, Y+3	; 0x03
 1c8:	bc 81       	ldd	r27, Y+4	; 0x04
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	a1 09       	sbc	r26, r1
 1ce:	b1 09       	sbc	r27, r1
 1d0:	89 83       	std	Y+1, r24	; 0x01
 1d2:	9a 83       	std	Y+2, r25	; 0x02
 1d4:	ab 83       	std	Y+3, r26	; 0x03
 1d6:	bc 83       	std	Y+4, r27	; 0x04
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	9a 81       	ldd	r25, Y+2	; 0x02
 1dc:	ab 81       	ldd	r26, Y+3	; 0x03
 1de:	bc 81       	ldd	r27, Y+4	; 0x04
 1e0:	00 97       	sbiw	r24, 0x00	; 0
 1e2:	a1 05       	cpc	r26, r1
 1e4:	b1 05       	cpc	r27, r1
 1e6:	01 f4       	brne	.+0      	; 0x1e8 <TIMER0_enuSetsyncDelay+0x1e8>
 1e8:	8a 89       	ldd	r24, Y+18	; 0x12
 1ea:	66 96       	adiw	r28, 0x16	; 22
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	f8 94       	cli
 1f0:	de bf       	out	0x3e, r29	; 62
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	cd bf       	out	0x3d, r28	; 61
 1f6:	cf 91       	pop	r28
 1f8:	df 91       	pop	r29
 1fa:	08 95       	ret

Disassembly of section .text.TIMER0_enuGeneratePWM:

00000000 <TIMER0_enuGeneratePWM>:
	{
		TIMER0_PFun_CTC((void *)TIMER0_Pvidparameter_CTC);
	}
}
ISR(VECT_TIMER0_OVF	)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <TIMER0_enuGeneratePWM+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	8a 83       	std	Y+2, r24	; 0x02
   c:	19 82       	std	Y+1, r1	; 0x01
   e:	ec e5       	ldi	r30, 0x5C	; 92
  10:	f0 e0       	ldi	r31, 0x00	; 0
  12:	80 91 00 00 	lds	r24, 0x0000
  16:	90 91 00 00 	lds	r25, 0x0000
  1a:	a0 91 00 00 	lds	r26, 0x0000
  1e:	b0 91 00 00 	lds	r27, 0x0000
  22:	80 83       	st	Z, r24
  24:	89 81       	ldd	r24, Y+1	; 0x01
  26:	0f 90       	pop	r0
  28:	0f 90       	pop	r0
	if(Timer0_ApFun_OVF != NULL)
  2a:	cf 91       	pop	r28
  2c:	df 91       	pop	r29
  2e:	08 95       	ret

Disassembly of section .text.TIMER0_enuSetCTCVal:

00000000 <TIMER0_enuSetCTCVal>:
	{
		TIMER0_PFun_CTC((void *)TIMER0_Pvidparameter_CTC);
	}
}
ISR(VECT_TIMER0_OVF	)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <TIMER0_enuSetCTCVal+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	8a 83       	std	Y+2, r24	; 0x02
   c:	19 82       	std	Y+1, r1	; 0x01
   e:	ec e5       	ldi	r30, 0x5C	; 92
  10:	f0 e0       	ldi	r31, 0x00	; 0
  12:	8a 81       	ldd	r24, Y+2	; 0x02
  14:	80 83       	st	Z, r24
  16:	81 e0       	ldi	r24, 0x01	; 1
  18:	89 83       	std	Y+1, r24	; 0x01
  1a:	89 81       	ldd	r24, Y+1	; 0x01
  1c:	0f 90       	pop	r0
  1e:	0f 90       	pop	r0
  20:	cf 91       	pop	r28
  22:	df 91       	pop	r29
  24:	08 95       	ret

Disassembly of section .text.TIMER0_enuSetCALLBACK_CTC:

00000000 <TIMER0_enuSetCALLBACK_CTC>:
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <TIMER0_enuSetCALLBACK_CTC+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <TIMER0_enuSetCALLBACK_CTC+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9b 83       	std	Y+3, r25	; 0x03
  10:	8a 83       	std	Y+2, r24	; 0x02
  12:	7d 83       	std	Y+5, r23	; 0x05
  14:	6c 83       	std	Y+4, r22	; 0x04
  16:	19 82       	std	Y+1, r1	; 0x01
  18:	8a 81       	ldd	r24, Y+2	; 0x02
  1a:	9b 81       	ldd	r25, Y+3	; 0x03
  1c:	00 97       	sbiw	r24, 0x00	; 0
  1e:	01 f0       	breq	.+0      	; 0x20 <TIMER0_enuSetCALLBACK_CTC+0x20>
  20:	8a 81       	ldd	r24, Y+2	; 0x02
  22:	9b 81       	ldd	r25, Y+3	; 0x03
  24:	90 93 00 00 	sts	0x0000, r25
  28:	80 93 00 00 	sts	0x0000, r24
	if(Timer0_ApFun_OVF != NULL)
  2c:	8c 81       	ldd	r24, Y+4	; 0x04
  2e:	9d 81       	ldd	r25, Y+5	; 0x05
  30:	90 93 00 00 	sts	0x0000, r25
  34:	80 93 00 00 	sts	0x0000, r24
	{
		static u32 Local_u32Counter = 0;
		Local_u32Counter++;
  38:	81 e0       	ldi	r24, 0x01	; 1
  3a:	89 83       	std	Y+1, r24	; 0x01
  3c:	00 c0       	rjmp	.+0      	; 0x3e <TIMER0_enuSetCALLBACK_CTC+0x3e>
  3e:	82 e0       	ldi	r24, 0x02	; 2
  40:	89 83       	std	Y+1, r24	; 0x01
  42:	89 81       	ldd	r24, Y+1	; 0x01
  44:	0f 90       	pop	r0
  46:	0f 90       	pop	r0
  48:	0f 90       	pop	r0
  4a:	0f 90       	pop	r0
  4c:	0f 90       	pop	r0
  4e:	cf 91       	pop	r28
  50:	df 91       	pop	r29
  52:	08 95       	ret

Disassembly of section .text.TIMER0_enuEnableOVFInterrupt:

00000000 <TIMER0_enuEnableOVFInterrupt>:
	{
		TIMER0_PFun_CTC((void *)TIMER0_Pvidparameter_CTC);
	}
}
ISR(VECT_TIMER0_OVF	)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	19 82       	std	Y+1, r1	; 0x01
   c:	a9 e5       	ldi	r26, 0x59	; 89
   e:	b0 e0       	ldi	r27, 0x00	; 0
  10:	e9 e5       	ldi	r30, 0x59	; 89
  12:	f0 e0       	ldi	r31, 0x00	; 0
  14:	80 81       	ld	r24, Z
  16:	81 60       	ori	r24, 0x01	; 1
  18:	8c 93       	st	X, r24
  1a:	81 e0       	ldi	r24, 0x01	; 1
  1c:	89 83       	std	Y+1, r24	; 0x01
  1e:	89 81       	ldd	r24, Y+1	; 0x01
  20:	0f 90       	pop	r0
  22:	cf 91       	pop	r28
  24:	df 91       	pop	r29
  26:	08 95       	ret

Disassembly of section .text.TIMER0_enuEnableCTCInterrupt:

00000000 <TIMER0_enuEnableCTCInterrupt>:
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	19 82       	std	Y+1, r1	; 0x01
   c:	a9 e5       	ldi	r26, 0x59	; 89
   e:	b0 e0       	ldi	r27, 0x00	; 0
  10:	e9 e5       	ldi	r30, 0x59	; 89
  12:	f0 e0       	ldi	r31, 0x00	; 0
  14:	80 81       	ld	r24, Z
  16:	82 60       	ori	r24, 0x02	; 2
  18:	8c 93       	st	X, r24
  1a:	81 e0       	ldi	r24, 0x01	; 1
  1c:	89 83       	std	Y+1, r24	; 0x01
  1e:	89 81       	ldd	r24, Y+1	; 0x01
  20:	0f 90       	pop	r0
  22:	cf 91       	pop	r28
  24:	df 91       	pop	r29
  26:	08 95       	ret

Disassembly of section .text.__vector_10:

00000000 <__vector_10>:
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  22:	df 93       	push	r29
  24:	cf 93       	push	r28
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_ApFun_OVF != NULL)
  2a:	80 91 00 00 	lds	r24, 0x0000
  2e:	90 91 00 00 	lds	r25, 0x0000
  32:	00 97       	sbiw	r24, 0x00	; 0
  34:	01 f0       	breq	.+0      	; 0x36 <__vector_10+0x36>
  36:	e0 91 00 00 	lds	r30, 0x0000
	{
		static u32 Local_u32Counter = 0;
		Local_u32Counter++;
  3a:	f0 91 00 00 	lds	r31, 0x0000
  3e:	80 91 00 00 	lds	r24, 0x0000
  42:	90 91 00 00 	lds	r25, 0x0000
  46:	09 95       	icall
  48:	cf 91       	pop	r28
  4a:	df 91       	pop	r29
  4c:	ff 91       	pop	r31
  4e:	ef 91       	pop	r30
  50:	bf 91       	pop	r27
  52:	af 91       	pop	r26
  54:	9f 91       	pop	r25
  56:	8f 91       	pop	r24
  58:	7f 91       	pop	r23
  5a:	6f 91       	pop	r22
  5c:	5f 91       	pop	r21
		if(Local_u32Counter == Global_u32NumOvf)
  5e:	4f 91       	pop	r20
  60:	3f 91       	pop	r19
  62:	2f 91       	pop	r18
  64:	0f 90       	pop	r0
  66:	0f be       	out	0x3f, r0	; 63
  68:	0f 90       	pop	r0
  6a:	1f 90       	pop	r1
  6c:	18 95       	reti

Disassembly of section .text.__vector_11:

00000000 <__vector_11>:
	{
		TIMER0_PFun_CTC((void *)TIMER0_Pvidparameter_CTC);
	}
}
ISR(VECT_TIMER0_OVF	)
{
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  22:	df 93       	push	r29
  24:	cf 93       	push	r28
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_ApFun_OVF != NULL)
  2a:	80 91 00 00 	lds	r24, 0x0000
  2e:	90 91 00 00 	lds	r25, 0x0000
  32:	00 97       	sbiw	r24, 0x00	; 0
  34:	01 f4       	brne	.+0      	; 0x36 <__vector_11+0x36>
  36:	00 c0       	rjmp	.+0      	; 0x38 <__vector_11+0x38>
	{
		static u32 Local_u32Counter = 0;
		Local_u32Counter++;
  38:	80 91 00 00 	lds	r24, 0x0000
  3c:	90 91 00 00 	lds	r25, 0x0000
  40:	a0 91 00 00 	lds	r26, 0x0000
  44:	b0 91 00 00 	lds	r27, 0x0000
  48:	01 96       	adiw	r24, 0x01	; 1
  4a:	a1 1d       	adc	r26, r1
  4c:	b1 1d       	adc	r27, r1
  4e:	80 93 00 00 	sts	0x0000, r24
  52:	90 93 00 00 	sts	0x0000, r25
  56:	a0 93 00 00 	sts	0x0000, r26
  5a:	b0 93 00 00 	sts	0x0000, r27
		if(Local_u32Counter == Global_u32NumOvf)
  5e:	20 91 00 00 	lds	r18, 0x0000
  62:	30 91 00 00 	lds	r19, 0x0000
  66:	40 91 00 00 	lds	r20, 0x0000
  6a:	50 91 00 00 	lds	r21, 0x0000
  6e:	80 91 00 00 	lds	r24, 0x0000
  72:	90 91 00 00 	lds	r25, 0x0000
  76:	a0 91 00 00 	lds	r26, 0x0000
  7a:	b0 91 00 00 	lds	r27, 0x0000
  7e:	28 17       	cp	r18, r24
  80:	39 07       	cpc	r19, r25
  82:	4a 07       	cpc	r20, r26
  84:	5b 07       	cpc	r21, r27
  86:	01 f4       	brne	.+0      	; 0x88 <__vector_11+0x88>
		{
			TCNT0 = Global_u8Preload;
  88:	e2 e5       	ldi	r30, 0x52	; 82
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 91 00 00 	lds	r24, 0x0000
  90:	80 83       	st	Z, r24
			Timer0_ApFun_OVF((void *)Timer0_Apvidparameter_OVF);
  92:	e0 91 00 00 	lds	r30, 0x0000
  96:	f0 91 00 00 	lds	r31, 0x0000
  9a:	80 91 00 00 	lds	r24, 0x0000
  9e:	90 91 00 00 	lds	r25, 0x0000
  a2:	09 95       	icall
			Local_u32Counter = 0;
  a4:	10 92 00 00 	sts	0x0000, r1
  a8:	10 92 00 00 	sts	0x0000, r1
  ac:	10 92 00 00 	sts	0x0000, r1
  b0:	10 92 00 00 	sts	0x0000, r1
		}
	}
}
  b4:	cf 91       	pop	r28
  b6:	df 91       	pop	r29
  b8:	ff 91       	pop	r31
  ba:	ef 91       	pop	r30
  bc:	bf 91       	pop	r27
  be:	af 91       	pop	r26
  c0:	9f 91       	pop	r25
  c2:	8f 91       	pop	r24
  c4:	7f 91       	pop	r23
  c6:	6f 91       	pop	r22
  c8:	5f 91       	pop	r21
  ca:	4f 91       	pop	r20
  cc:	3f 91       	pop	r19
  ce:	2f 91       	pop	r18
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

GIE_Prog.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000294  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000003ed  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.GIE_enuGloable_Interrupt_Enable 00000036  00000000  00000000  000006b5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.GIE_enuGloable_Interrupt_Disable 00000028  00000000  00000000  000006eb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text.GIE_enuGloable_Interrupt_Enable:

00000000 <GIE_enuGloable_Interrupt_Enable>:
#include "../../LIB/errorStates.h"

#include "GIE_priv.h"

ES_t GIE_enuGloable_Interrupt_Enable(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
   a:	19 82       	std	Y+1, r1	; 0x01

	SREG &= ~(1 << GIE_I);
   c:	af e5       	ldi	r26, 0x5F	; 95
   e:	b0 e0       	ldi	r27, 0x00	; 0
  10:	ef e5       	ldi	r30, 0x5F	; 95
  12:	f0 e0       	ldi	r31, 0x00	; 0
  14:	80 81       	ld	r24, Z
  16:	8f 77       	andi	r24, 0x7F	; 127
  18:	8c 93       	st	X, r24
	SREG |= (1 << GIE_I);
  1a:	af e5       	ldi	r26, 0x5F	; 95
  1c:	b0 e0       	ldi	r27, 0x00	; 0
  1e:	ef e5       	ldi	r30, 0x5F	; 95
  20:	f0 e0       	ldi	r31, 0x00	; 0
  22:	80 81       	ld	r24, Z
  24:	80 68       	ori	r24, 0x80	; 128
  26:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
  28:	81 e0       	ldi	r24, 0x01	; 1
  2a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
  2c:	89 81       	ldd	r24, Y+1	; 0x01
}
  2e:	0f 90       	pop	r0
  30:	cf 91       	pop	r28
  32:	df 91       	pop	r29
  34:	08 95       	ret

Disassembly of section .text.GIE_enuGloable_Interrupt_Disable:

00000000 <GIE_enuGloable_Interrupt_Disable>:
#include "../../LIB/errorStates.h"

#include "GIE_priv.h"

ES_t GIE_enuGloable_Interrupt_Enable(void)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
   a:	19 82       	std	Y+1, r1	; 0x01

	SREG &= ~(1 << GIE_I);
   c:	af e5       	ldi	r26, 0x5F	; 95
   e:	b0 e0       	ldi	r27, 0x00	; 0
  10:	ef e5       	ldi	r30, 0x5F	; 95
  12:	f0 e0       	ldi	r31, 0x00	; 0
  14:	80 81       	ld	r24, Z
  16:	8f 77       	andi	r24, 0x7F	; 127
  18:	8c 93       	st	X, r24
	SREG |= (1 << GIE_I);
  1a:	81 e0       	ldi	r24, 0x01	; 1
  1c:	89 83       	std	Y+1, r24	; 0x01
  1e:	89 81       	ldd	r24, Y+1	; 0x01
  20:	0f 90       	pop	r0
  22:	cf 91       	pop	r28
  24:	df 91       	pop	r29
  26:	08 95       	ret

EXTI_Config.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000001c8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000416  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .data.EXTI_AstrEXTIConfig 00000006  00000000  00000000  00000612  2**0
                  CONTENTS, ALLOC, LOAD, DATA

EXTI_Prog.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000084c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000006ac  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .bss.EXTI_ApfunINTFun 00000006  00000000  00000000  00000f2c  2**0
                  ALLOC
  6 .bss.EXTI_ApvidGenericparameter 00000006  00000000  00000000  00000f2c  2**0
                  ALLOC
  7 .text.EXTI_enuInit 0000025c  00000000  00000000  00000f2c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.EXTI_enuSetSenseLevel 000001ae  00000000  00000000  00001188  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.EXTI_enuEnableINT 00000060  00000000  00000000  00001336  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.EXTI_enuDisableINT 00000060  00000000  00000000  00001396  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.EXTI_enuCallBack 0000006c  00000000  00000000  000013f6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.__vector_1 0000006e  00000000  00000000  00001462  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text.__vector_2 0000006e  00000000  00000000  000014d0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text.__vector_3 0000006e  00000000  00000000  0000153e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.EXTI_enuInit:

00000000 <EXTI_enuInit>:
		EXTI_ApfunINTFun[1] (EXTI_ApvidGenericparameter[1]);
	}
}

ISR(VECT_INT2)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2d 97       	sbiw	r28, 0x0d	; 13
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9d 83       	std	Y+5, r25	; 0x05
  16:	8c 83       	std	Y+4, r24	; 0x04
  18:	1b 82       	std	Y+3, r1	; 0x03
  1a:	8c 81       	ldd	r24, Y+4	; 0x04
  1c:	9d 81       	ldd	r25, Y+5	; 0x05
  1e:	00 97       	sbiw	r24, 0x00	; 0
  20:	01 f4       	brne	.+0      	; 0x22 <EXTI_enuInit+0x22>
  22:	00 c0       	rjmp	.+0      	; 0x24 <EXTI_enuInit+0x24>
  24:	1a 82       	std	Y+2, r1	; 0x02
  26:	1a 82       	std	Y+2, r1	; 0x02
  28:	00 c0       	rjmp	.+0      	; 0x2a <EXTI_enuInit+0x2a>
	if (EXTI_ApfunINTFun[2] != NULL)
  2a:	8a 81       	ldd	r24, Y+2	; 0x02
  2c:	88 2f       	mov	r24, r24
  2e:	90 e0       	ldi	r25, 0x00	; 0
  30:	9c 01       	movw	r18, r24
  32:	22 0f       	add	r18, r18
  34:	33 1f       	adc	r19, r19
	{
		EXTI_ApfunINTFun[2] (EXTI_ApvidGenericparameter[2]);
  36:	8c 81       	ldd	r24, Y+4	; 0x04
  38:	9d 81       	ldd	r25, Y+5	; 0x05
  3a:	fc 01       	movw	r30, r24
  3c:	e2 0f       	add	r30, r18
  3e:	f3 1f       	adc	r31, r19
  40:	80 81       	ld	r24, Z
  42:	81 30       	cpi	r24, 0x01	; 1
  44:	01 f0       	breq	.+0      	; 0x46 <EXTI_enuInit+0x46>
  46:	00 c0       	rjmp	.+0      	; 0x48 <EXTI_enuInit+0x48>
	}
}
  48:	8a 81       	ldd	r24, Y+2	; 0x02
  4a:	28 2f       	mov	r18, r24
  4c:	30 e0       	ldi	r19, 0x00	; 0
  4e:	3d 87       	std	Y+13, r19	; 0x0d
  50:	2c 87       	std	Y+12, r18	; 0x0c
  52:	8c 85       	ldd	r24, Y+12	; 0x0c
  54:	9d 85       	ldd	r25, Y+13	; 0x0d
  56:	81 30       	cpi	r24, 0x01	; 1
  58:	91 05       	cpc	r25, r1
  5a:	01 f4       	brne	.+0      	; 0x5c <EXTI_enuInit+0x5c>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <EXTI_enuInit+0x5e>
  5e:	2c 85       	ldd	r18, Y+12	; 0x0c
  60:	3d 85       	ldd	r19, Y+13	; 0x0d
  62:	22 30       	cpi	r18, 0x02	; 2
  64:	31 05       	cpc	r19, r1
  66:	01 f4       	brne	.+0      	; 0x68 <EXTI_enuInit+0x68>
  68:	00 c0       	rjmp	.+0      	; 0x6a <EXTI_enuInit+0x6a>
  6a:	8c 85       	ldd	r24, Y+12	; 0x0c
  6c:	9d 85       	ldd	r25, Y+13	; 0x0d
  6e:	00 97       	sbiw	r24, 0x00	; 0
  70:	01 f0       	breq	.+0      	; 0x72 <EXTI_enuInit+0x72>
  72:	00 c0       	rjmp	.+0      	; 0x74 <EXTI_enuInit+0x74>
  74:	a5 e5       	ldi	r26, 0x55	; 85
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e5 e5       	ldi	r30, 0x55	; 85
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	8c 7f       	andi	r24, 0xFC	; 252
  80:	8c 93       	st	X, r24
  82:	ab e5       	ldi	r26, 0x5B	; 91
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	eb e5       	ldi	r30, 0x5B	; 91
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	8c 93       	st	X, r24
  90:	8a 81       	ldd	r24, Y+2	; 0x02
  92:	88 2f       	mov	r24, r24
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	9c 01       	movw	r18, r24
  98:	22 0f       	add	r18, r18
  9a:	33 1f       	adc	r19, r19
  9c:	8c 81       	ldd	r24, Y+4	; 0x04
  9e:	9d 81       	ldd	r25, Y+5	; 0x05
  a0:	fc 01       	movw	r30, r24
  a2:	e2 0f       	add	r30, r18
  a4:	f3 1f       	adc	r31, r19
  a6:	81 81       	ldd	r24, Z+1	; 0x01
  a8:	28 2f       	mov	r18, r24
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	3b 87       	std	Y+11, r19	; 0x0b
  ae:	2a 87       	std	Y+10, r18	; 0x0a
  b0:	8a 85       	ldd	r24, Y+10	; 0x0a
  b2:	9b 85       	ldd	r25, Y+11	; 0x0b
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	91 05       	cpc	r25, r1
  b8:	01 f0       	breq	.+0      	; 0xba <EXTI_enuInit+0xba>
  ba:	2a 85       	ldd	r18, Y+10	; 0x0a
  bc:	3b 85       	ldd	r19, Y+11	; 0x0b
  be:	23 30       	cpi	r18, 0x03	; 3
  c0:	31 05       	cpc	r19, r1
  c2:	04 f4       	brge	.+0      	; 0xc4 <EXTI_enuInit+0xc4>
  c4:	8a 85       	ldd	r24, Y+10	; 0x0a
  c6:	9b 85       	ldd	r25, Y+11	; 0x0b
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	91 05       	cpc	r25, r1
  cc:	01 f0       	breq	.+0      	; 0xce <EXTI_enuInit+0xce>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <EXTI_enuInit+0xd0>
  d0:	2a 85       	ldd	r18, Y+10	; 0x0a
  d2:	3b 85       	ldd	r19, Y+11	; 0x0b
  d4:	23 30       	cpi	r18, 0x03	; 3
  d6:	31 05       	cpc	r19, r1
  d8:	01 f0       	breq	.+0      	; 0xda <EXTI_enuInit+0xda>
  da:	8a 85       	ldd	r24, Y+10	; 0x0a
  dc:	9b 85       	ldd	r25, Y+11	; 0x0b
  de:	84 30       	cpi	r24, 0x04	; 4
  e0:	91 05       	cpc	r25, r1
  e2:	01 f4       	brne	.+0      	; 0xe4 <EXTI_enuInit+0xe4>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <EXTI_enuInit+0xe6>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <EXTI_enuInit+0xe8>
  e8:	a5 e5       	ldi	r26, 0x55	; 85
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	e5 e5       	ldi	r30, 0x55	; 85
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	8c 93       	st	X, r24
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <EXTI_enuInit+0xf8>
  f8:	a5 e5       	ldi	r26, 0x55	; 85
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	e5 e5       	ldi	r30, 0x55	; 85
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	82 60       	ori	r24, 0x02	; 2
 104:	8c 93       	st	X, r24
 106:	00 c0       	rjmp	.+0      	; 0x108 <EXTI_enuInit+0x108>
 108:	a5 e5       	ldi	r26, 0x55	; 85
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	e5 e5       	ldi	r30, 0x55	; 85
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	83 60       	ori	r24, 0x03	; 3
 114:	8c 93       	st	X, r24
 116:	00 c0       	rjmp	.+0      	; 0x118 <EXTI_enuInit+0x118>
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	8b 83       	std	Y+3, r24	; 0x03
 11c:	00 c0       	rjmp	.+0      	; 0x11e <EXTI_enuInit+0x11e>
 11e:	a5 e5       	ldi	r26, 0x55	; 85
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	e5 e5       	ldi	r30, 0x55	; 85
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	83 7f       	andi	r24, 0xF3	; 243
 12a:	8c 93       	st	X, r24
 12c:	ab e5       	ldi	r26, 0x5B	; 91
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	eb e5       	ldi	r30, 0x5B	; 91
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 68       	ori	r24, 0x80	; 128
 138:	8c 93       	st	X, r24
 13a:	8a 81       	ldd	r24, Y+2	; 0x02
 13c:	88 2f       	mov	r24, r24
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	9c 01       	movw	r18, r24
 142:	22 0f       	add	r18, r18
 144:	33 1f       	adc	r19, r19
 146:	8c 81       	ldd	r24, Y+4	; 0x04
 148:	9d 81       	ldd	r25, Y+5	; 0x05
 14a:	fc 01       	movw	r30, r24
 14c:	e2 0f       	add	r30, r18
 14e:	f3 1f       	adc	r31, r19
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	28 2f       	mov	r18, r24
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	39 87       	std	Y+9, r19	; 0x09
 158:	28 87       	std	Y+8, r18	; 0x08
 15a:	88 85       	ldd	r24, Y+8	; 0x08
 15c:	99 85       	ldd	r25, Y+9	; 0x09
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	91 05       	cpc	r25, r1
 162:	01 f0       	breq	.+0      	; 0x164 <EXTI_enuInit+0x164>
 164:	28 85       	ldd	r18, Y+8	; 0x08
 166:	39 85       	ldd	r19, Y+9	; 0x09
 168:	23 30       	cpi	r18, 0x03	; 3
 16a:	31 05       	cpc	r19, r1
 16c:	04 f4       	brge	.+0      	; 0x16e <EXTI_enuInit+0x16e>
 16e:	88 85       	ldd	r24, Y+8	; 0x08
 170:	99 85       	ldd	r25, Y+9	; 0x09
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	91 05       	cpc	r25, r1
 176:	01 f0       	breq	.+0      	; 0x178 <EXTI_enuInit+0x178>
 178:	00 c0       	rjmp	.+0      	; 0x17a <EXTI_enuInit+0x17a>
 17a:	28 85       	ldd	r18, Y+8	; 0x08
 17c:	39 85       	ldd	r19, Y+9	; 0x09
 17e:	23 30       	cpi	r18, 0x03	; 3
 180:	31 05       	cpc	r19, r1
 182:	01 f0       	breq	.+0      	; 0x184 <EXTI_enuInit+0x184>
 184:	88 85       	ldd	r24, Y+8	; 0x08
 186:	99 85       	ldd	r25, Y+9	; 0x09
 188:	84 30       	cpi	r24, 0x04	; 4
 18a:	91 05       	cpc	r25, r1
 18c:	01 f4       	brne	.+0      	; 0x18e <EXTI_enuInit+0x18e>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <EXTI_enuInit+0x190>
 190:	00 c0       	rjmp	.+0      	; 0x192 <EXTI_enuInit+0x192>
 192:	a5 e5       	ldi	r26, 0x55	; 85
 194:	b0 e0       	ldi	r27, 0x00	; 0
 196:	e5 e5       	ldi	r30, 0x55	; 85
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	84 60       	ori	r24, 0x04	; 4
 19e:	8c 93       	st	X, r24
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <EXTI_enuInit+0x1a2>
 1a2:	a5 e5       	ldi	r26, 0x55	; 85
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	e5 e5       	ldi	r30, 0x55	; 85
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	88 60       	ori	r24, 0x08	; 8
 1ae:	8c 93       	st	X, r24
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <EXTI_enuInit+0x1b2>
 1b2:	a5 e5       	ldi	r26, 0x55	; 85
 1b4:	b0 e0       	ldi	r27, 0x00	; 0
 1b6:	e5 e5       	ldi	r30, 0x55	; 85
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	8c 60       	ori	r24, 0x0C	; 12
 1be:	8c 93       	st	X, r24
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <EXTI_enuInit+0x1c2>
 1c2:	83 e0       	ldi	r24, 0x03	; 3
 1c4:	8b 83       	std	Y+3, r24	; 0x03
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <EXTI_enuInit+0x1c8>
 1c8:	a4 e5       	ldi	r26, 0x54	; 84
 1ca:	b0 e0       	ldi	r27, 0x00	; 0
 1cc:	e4 e5       	ldi	r30, 0x54	; 84
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	8f 7b       	andi	r24, 0xBF	; 191
 1d4:	8c 93       	st	X, r24
 1d6:	ab e5       	ldi	r26, 0x5B	; 91
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	eb e5       	ldi	r30, 0x5B	; 91
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	80 62       	ori	r24, 0x20	; 32
 1e2:	8c 93       	st	X, r24
 1e4:	8a 81       	ldd	r24, Y+2	; 0x02
 1e6:	88 2f       	mov	r24, r24
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	9c 01       	movw	r18, r24
 1ec:	22 0f       	add	r18, r18
 1ee:	33 1f       	adc	r19, r19
 1f0:	8c 81       	ldd	r24, Y+4	; 0x04
 1f2:	9d 81       	ldd	r25, Y+5	; 0x05
 1f4:	fc 01       	movw	r30, r24
 1f6:	e2 0f       	add	r30, r18
 1f8:	f3 1f       	adc	r31, r19
 1fa:	81 81       	ldd	r24, Z+1	; 0x01
 1fc:	28 2f       	mov	r18, r24
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	3f 83       	std	Y+7, r19	; 0x07
 202:	2e 83       	std	Y+6, r18	; 0x06
 204:	8e 81       	ldd	r24, Y+6	; 0x06
 206:	9f 81       	ldd	r25, Y+7	; 0x07
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	91 05       	cpc	r25, r1
 20c:	01 f0       	breq	.+0      	; 0x20e <EXTI_enuInit+0x20e>
 20e:	2e 81       	ldd	r18, Y+6	; 0x06
 210:	3f 81       	ldd	r19, Y+7	; 0x07
 212:	22 30       	cpi	r18, 0x02	; 2
 214:	31 05       	cpc	r19, r1
 216:	01 f0       	breq	.+0      	; 0x218 <EXTI_enuInit+0x218>
 218:	00 c0       	rjmp	.+0      	; 0x21a <EXTI_enuInit+0x21a>
 21a:	a4 e5       	ldi	r26, 0x54	; 84
 21c:	b0 e0       	ldi	r27, 0x00	; 0
 21e:	e4 e5       	ldi	r30, 0x54	; 84
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	80 64       	ori	r24, 0x40	; 64
 226:	8c 93       	st	X, r24
 228:	00 c0       	rjmp	.+0      	; 0x22a <EXTI_enuInit+0x22a>
 22a:	83 e0       	ldi	r24, 0x03	; 3
 22c:	8b 83       	std	Y+3, r24	; 0x03
 22e:	00 c0       	rjmp	.+0      	; 0x230 <EXTI_enuInit+0x230>
 230:	83 e0       	ldi	r24, 0x03	; 3
 232:	8b 83       	std	Y+3, r24	; 0x03
 234:	8a 81       	ldd	r24, Y+2	; 0x02
 236:	8f 5f       	subi	r24, 0xFF	; 255
 238:	8a 83       	std	Y+2, r24	; 0x02
 23a:	8a 81       	ldd	r24, Y+2	; 0x02
 23c:	83 30       	cpi	r24, 0x03	; 3
 23e:	00 f4       	brcc	.+0      	; 0x240 <EXTI_enuInit+0x240>
 240:	00 c0       	rjmp	.+0      	; 0x242 <EXTI_enuInit+0x242>
 242:	00 c0       	rjmp	.+0      	; 0x244 <EXTI_enuInit+0x244>
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	89 83       	std	Y+1, r24	; 0x01
 248:	8b 81       	ldd	r24, Y+3	; 0x03
 24a:	2d 96       	adiw	r28, 0x0d	; 13
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	f8 94       	cli
 250:	de bf       	out	0x3e, r29	; 62
 252:	0f be       	out	0x3f, r0	; 63
 254:	cd bf       	out	0x3d, r28	; 61
 256:	cf 91       	pop	r28
 258:	df 91       	pop	r29
 25a:	08 95       	ret

Disassembly of section .text.EXTI_enuSetSenseLevel:

00000000 <EXTI_enuSetSenseLevel>:
		EXTI_ApfunINTFun[1] (EXTI_ApvidGenericparameter[1]);
	}
}

ISR(VECT_INT2)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	2a 97       	sbiw	r28, 0x0a	; 10
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	8b 83       	std	Y+3, r24	; 0x03
  16:	6c 83       	std	Y+4, r22	; 0x04
  18:	1a 82       	std	Y+2, r1	; 0x02
  1a:	8b 81       	ldd	r24, Y+3	; 0x03
  1c:	83 30       	cpi	r24, 0x03	; 3
  1e:	00 f0       	brcs	.+0      	; 0x20 <EXTI_enuSetSenseLevel+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <EXTI_enuSetSenseLevel+0x22>
  22:	8b 81       	ldd	r24, Y+3	; 0x03
  24:	88 23       	and	r24, r24
  26:	01 f0       	breq	.+0      	; 0x28 <EXTI_enuSetSenseLevel+0x28>
  28:	00 c0       	rjmp	.+0      	; 0x2a <EXTI_enuSetSenseLevel+0x2a>
	if (EXTI_ApfunINTFun[2] != NULL)
  2a:	a5 e5       	ldi	r26, 0x55	; 85
  2c:	b0 e0       	ldi	r27, 0x00	; 0
  2e:	e5 e5       	ldi	r30, 0x55	; 85
  30:	f0 e0       	ldi	r31, 0x00	; 0
  32:	80 81       	ld	r24, Z
  34:	8c 7f       	andi	r24, 0xFC	; 252
	{
		EXTI_ApfunINTFun[2] (EXTI_ApvidGenericparameter[2]);
  36:	8c 93       	st	X, r24
  38:	8c 81       	ldd	r24, Y+4	; 0x04
  3a:	28 2f       	mov	r18, r24
  3c:	30 e0       	ldi	r19, 0x00	; 0
  3e:	3a 87       	std	Y+10, r19	; 0x0a
  40:	29 87       	std	Y+9, r18	; 0x09
  42:	89 85       	ldd	r24, Y+9	; 0x09
  44:	9a 85       	ldd	r25, Y+10	; 0x0a
  46:	82 30       	cpi	r24, 0x02	; 2
	}
}
  48:	91 05       	cpc	r25, r1
  4a:	01 f0       	breq	.+0      	; 0x4c <EXTI_enuSetSenseLevel+0x4c>
  4c:	29 85       	ldd	r18, Y+9	; 0x09
  4e:	3a 85       	ldd	r19, Y+10	; 0x0a
  50:	23 30       	cpi	r18, 0x03	; 3
  52:	31 05       	cpc	r19, r1
  54:	04 f4       	brge	.+0      	; 0x56 <EXTI_enuSetSenseLevel+0x56>
  56:	89 85       	ldd	r24, Y+9	; 0x09
  58:	9a 85       	ldd	r25, Y+10	; 0x0a
  5a:	81 30       	cpi	r24, 0x01	; 1
  5c:	91 05       	cpc	r25, r1
  5e:	01 f0       	breq	.+0      	; 0x60 <EXTI_enuSetSenseLevel+0x60>
  60:	00 c0       	rjmp	.+0      	; 0x62 <EXTI_enuSetSenseLevel+0x62>
  62:	29 85       	ldd	r18, Y+9	; 0x09
  64:	3a 85       	ldd	r19, Y+10	; 0x0a
  66:	23 30       	cpi	r18, 0x03	; 3
  68:	31 05       	cpc	r19, r1
  6a:	01 f0       	breq	.+0      	; 0x6c <EXTI_enuSetSenseLevel+0x6c>
  6c:	89 85       	ldd	r24, Y+9	; 0x09
  6e:	9a 85       	ldd	r25, Y+10	; 0x0a
  70:	84 30       	cpi	r24, 0x04	; 4
  72:	91 05       	cpc	r25, r1
  74:	01 f4       	brne	.+0      	; 0x76 <EXTI_enuSetSenseLevel+0x76>
  76:	00 c0       	rjmp	.+0      	; 0x78 <EXTI_enuSetSenseLevel+0x78>
  78:	00 c0       	rjmp	.+0      	; 0x7a <EXTI_enuSetSenseLevel+0x7a>
  7a:	a5 e5       	ldi	r26, 0x55	; 85
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	e5 e5       	ldi	r30, 0x55	; 85
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	80 81       	ld	r24, Z
  84:	81 60       	ori	r24, 0x01	; 1
  86:	8c 93       	st	X, r24
  88:	00 c0       	rjmp	.+0      	; 0x8a <EXTI_enuSetSenseLevel+0x8a>
  8a:	a5 e5       	ldi	r26, 0x55	; 85
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	e5 e5       	ldi	r30, 0x55	; 85
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	82 60       	ori	r24, 0x02	; 2
  96:	8c 93       	st	X, r24
  98:	00 c0       	rjmp	.+0      	; 0x9a <EXTI_enuSetSenseLevel+0x9a>
  9a:	a5 e5       	ldi	r26, 0x55	; 85
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	e5 e5       	ldi	r30, 0x55	; 85
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	83 60       	ori	r24, 0x03	; 3
  a6:	8c 93       	st	X, r24
  a8:	00 c0       	rjmp	.+0      	; 0xaa <EXTI_enuSetSenseLevel+0xaa>
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	8a 83       	std	Y+2, r24	; 0x02
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <EXTI_enuSetSenseLevel+0xb0>
  b0:	8b 81       	ldd	r24, Y+3	; 0x03
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	01 f0       	breq	.+0      	; 0xb6 <EXTI_enuSetSenseLevel+0xb6>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <EXTI_enuSetSenseLevel+0xb8>
  b8:	a5 e5       	ldi	r26, 0x55	; 85
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	e5 e5       	ldi	r30, 0x55	; 85
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	83 7f       	andi	r24, 0xF3	; 243
  c4:	8c 93       	st	X, r24
  c6:	8c 81       	ldd	r24, Y+4	; 0x04
  c8:	28 2f       	mov	r18, r24
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	38 87       	std	Y+8, r19	; 0x08
  ce:	2f 83       	std	Y+7, r18	; 0x07
  d0:	8f 81       	ldd	r24, Y+7	; 0x07
  d2:	98 85       	ldd	r25, Y+8	; 0x08
  d4:	82 30       	cpi	r24, 0x02	; 2
  d6:	91 05       	cpc	r25, r1
  d8:	01 f0       	breq	.+0      	; 0xda <EXTI_enuSetSenseLevel+0xda>
  da:	2f 81       	ldd	r18, Y+7	; 0x07
  dc:	38 85       	ldd	r19, Y+8	; 0x08
  de:	23 30       	cpi	r18, 0x03	; 3
  e0:	31 05       	cpc	r19, r1
  e2:	04 f4       	brge	.+0      	; 0xe4 <EXTI_enuSetSenseLevel+0xe4>
  e4:	8f 81       	ldd	r24, Y+7	; 0x07
  e6:	98 85       	ldd	r25, Y+8	; 0x08
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	91 05       	cpc	r25, r1
  ec:	01 f0       	breq	.+0      	; 0xee <EXTI_enuSetSenseLevel+0xee>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <EXTI_enuSetSenseLevel+0xf0>
  f0:	2f 81       	ldd	r18, Y+7	; 0x07
  f2:	38 85       	ldd	r19, Y+8	; 0x08
  f4:	23 30       	cpi	r18, 0x03	; 3
  f6:	31 05       	cpc	r19, r1
  f8:	01 f0       	breq	.+0      	; 0xfa <EXTI_enuSetSenseLevel+0xfa>
  fa:	8f 81       	ldd	r24, Y+7	; 0x07
  fc:	98 85       	ldd	r25, Y+8	; 0x08
  fe:	84 30       	cpi	r24, 0x04	; 4
 100:	91 05       	cpc	r25, r1
 102:	01 f4       	brne	.+0      	; 0x104 <EXTI_enuSetSenseLevel+0x104>
 104:	00 c0       	rjmp	.+0      	; 0x106 <EXTI_enuSetSenseLevel+0x106>
 106:	00 c0       	rjmp	.+0      	; 0x108 <EXTI_enuSetSenseLevel+0x108>
 108:	a5 e5       	ldi	r26, 0x55	; 85
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	e5 e5       	ldi	r30, 0x55	; 85
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	84 60       	ori	r24, 0x04	; 4
 114:	8c 93       	st	X, r24
 116:	00 c0       	rjmp	.+0      	; 0x118 <EXTI_enuSetSenseLevel+0x118>
 118:	a5 e5       	ldi	r26, 0x55	; 85
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	e5 e5       	ldi	r30, 0x55	; 85
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	88 60       	ori	r24, 0x08	; 8
 124:	8c 93       	st	X, r24
 126:	00 c0       	rjmp	.+0      	; 0x128 <EXTI_enuSetSenseLevel+0x128>
 128:	a5 e5       	ldi	r26, 0x55	; 85
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	e5 e5       	ldi	r30, 0x55	; 85
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	8c 60       	ori	r24, 0x0C	; 12
 134:	8c 93       	st	X, r24
 136:	00 c0       	rjmp	.+0      	; 0x138 <EXTI_enuSetSenseLevel+0x138>
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	8a 83       	std	Y+2, r24	; 0x02
 13c:	00 c0       	rjmp	.+0      	; 0x13e <EXTI_enuSetSenseLevel+0x13e>
 13e:	8b 81       	ldd	r24, Y+3	; 0x03
 140:	82 30       	cpi	r24, 0x02	; 2
 142:	01 f4       	brne	.+0      	; 0x144 <EXTI_enuSetSenseLevel+0x144>
 144:	a4 e5       	ldi	r26, 0x54	; 84
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	e4 e5       	ldi	r30, 0x54	; 84
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	8f 7b       	andi	r24, 0xBF	; 191
 150:	8c 93       	st	X, r24
 152:	ab e5       	ldi	r26, 0x5B	; 91
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	eb e5       	ldi	r30, 0x5B	; 91
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	80 62       	ori	r24, 0x20	; 32
 15e:	8c 93       	st	X, r24
 160:	8c 81       	ldd	r24, Y+4	; 0x04
 162:	28 2f       	mov	r18, r24
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	3e 83       	std	Y+6, r19	; 0x06
 168:	2d 83       	std	Y+5, r18	; 0x05
 16a:	8d 81       	ldd	r24, Y+5	; 0x05
 16c:	9e 81       	ldd	r25, Y+6	; 0x06
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	91 05       	cpc	r25, r1
 172:	01 f0       	breq	.+0      	; 0x174 <EXTI_enuSetSenseLevel+0x174>
 174:	2d 81       	ldd	r18, Y+5	; 0x05
 176:	3e 81       	ldd	r19, Y+6	; 0x06
 178:	22 30       	cpi	r18, 0x02	; 2
 17a:	31 05       	cpc	r19, r1
 17c:	01 f0       	breq	.+0      	; 0x17e <EXTI_enuSetSenseLevel+0x17e>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <EXTI_enuSetSenseLevel+0x180>
 180:	a4 e5       	ldi	r26, 0x54	; 84
 182:	b0 e0       	ldi	r27, 0x00	; 0
 184:	e4 e5       	ldi	r30, 0x54	; 84
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	80 64       	ori	r24, 0x40	; 64
 18c:	8c 93       	st	X, r24
 18e:	00 c0       	rjmp	.+0      	; 0x190 <EXTI_enuSetSenseLevel+0x190>
 190:	83 e0       	ldi	r24, 0x03	; 3
 192:	8a 83       	std	Y+2, r24	; 0x02
 194:	00 c0       	rjmp	.+0      	; 0x196 <EXTI_enuSetSenseLevel+0x196>
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	89 83       	std	Y+1, r24	; 0x01
 19a:	8a 81       	ldd	r24, Y+2	; 0x02
 19c:	2a 96       	adiw	r28, 0x0a	; 10
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	f8 94       	cli
 1a2:	de bf       	out	0x3e, r29	; 62
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	cd bf       	out	0x3d, r28	; 61
 1a8:	cf 91       	pop	r28
 1aa:	df 91       	pop	r29
 1ac:	08 95       	ret

Disassembly of section .text.EXTI_enuEnableINT:

00000000 <EXTI_enuEnableINT>:
		EXTI_ApfunINTFun[1] (EXTI_ApvidGenericparameter[1]);
	}
}

ISR(VECT_INT2)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <EXTI_enuEnableINT+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	8a 83       	std	Y+2, r24	; 0x02
   c:	19 82       	std	Y+1, r1	; 0x01
   e:	8a 81       	ldd	r24, Y+2	; 0x02
  10:	83 30       	cpi	r24, 0x03	; 3
  12:	00 f4       	brcc	.+0      	; 0x14 <EXTI_enuEnableINT+0x14>
  14:	8a 81       	ldd	r24, Y+2	; 0x02
  16:	88 23       	and	r24, r24
  18:	01 f4       	brne	.+0      	; 0x1a <EXTI_enuEnableINT+0x1a>
  1a:	ab e5       	ldi	r26, 0x5B	; 91
  1c:	b0 e0       	ldi	r27, 0x00	; 0
  1e:	eb e5       	ldi	r30, 0x5B	; 91
  20:	f0 e0       	ldi	r31, 0x00	; 0
  22:	80 81       	ld	r24, Z
  24:	80 64       	ori	r24, 0x40	; 64
  26:	8c 93       	st	X, r24
  28:	00 c0       	rjmp	.+0      	; 0x2a <EXTI_enuEnableINT+0x2a>
	if (EXTI_ApfunINTFun[2] != NULL)
  2a:	8a 81       	ldd	r24, Y+2	; 0x02
  2c:	81 30       	cpi	r24, 0x01	; 1
  2e:	01 f4       	brne	.+0      	; 0x30 <EXTI_enuEnableINT+0x30>
  30:	ab e5       	ldi	r26, 0x5B	; 91
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	eb e5       	ldi	r30, 0x5B	; 91
	{
		EXTI_ApfunINTFun[2] (EXTI_ApvidGenericparameter[2]);
  36:	f0 e0       	ldi	r31, 0x00	; 0
  38:	80 81       	ld	r24, Z
  3a:	80 68       	ori	r24, 0x80	; 128
  3c:	8c 93       	st	X, r24
  3e:	00 c0       	rjmp	.+0      	; 0x40 <EXTI_enuEnableINT+0x40>
  40:	8a 81       	ldd	r24, Y+2	; 0x02
  42:	82 30       	cpi	r24, 0x02	; 2
  44:	01 f4       	brne	.+0      	; 0x46 <EXTI_enuEnableINT+0x46>
  46:	ab e5       	ldi	r26, 0x5B	; 91
	}
}
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	eb e5       	ldi	r30, 0x5B	; 91
  4c:	f0 e0       	ldi	r31, 0x00	; 0
  4e:	80 81       	ld	r24, Z
  50:	80 62       	ori	r24, 0x20	; 32
  52:	8c 93       	st	X, r24
  54:	89 81       	ldd	r24, Y+1	; 0x01
  56:	0f 90       	pop	r0
  58:	0f 90       	pop	r0
  5a:	cf 91       	pop	r28
  5c:	df 91       	pop	r29
  5e:	08 95       	ret

Disassembly of section .text.EXTI_enuDisableINT:

00000000 <EXTI_enuDisableINT>:
		EXTI_ApfunINTFun[1] (EXTI_ApvidGenericparameter[1]);
	}
}

ISR(VECT_INT2)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <EXTI_enuDisableINT+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	8a 83       	std	Y+2, r24	; 0x02
   c:	19 82       	std	Y+1, r1	; 0x01
   e:	8a 81       	ldd	r24, Y+2	; 0x02
  10:	83 30       	cpi	r24, 0x03	; 3
  12:	00 f4       	brcc	.+0      	; 0x14 <EXTI_enuDisableINT+0x14>
  14:	8a 81       	ldd	r24, Y+2	; 0x02
  16:	88 23       	and	r24, r24
  18:	01 f4       	brne	.+0      	; 0x1a <EXTI_enuDisableINT+0x1a>
  1a:	ab e5       	ldi	r26, 0x5B	; 91
  1c:	b0 e0       	ldi	r27, 0x00	; 0
  1e:	eb e5       	ldi	r30, 0x5B	; 91
  20:	f0 e0       	ldi	r31, 0x00	; 0
  22:	80 81       	ld	r24, Z
  24:	8f 7b       	andi	r24, 0xBF	; 191
  26:	8c 93       	st	X, r24
  28:	00 c0       	rjmp	.+0      	; 0x2a <EXTI_enuDisableINT+0x2a>
	if (EXTI_ApfunINTFun[2] != NULL)
  2a:	8a 81       	ldd	r24, Y+2	; 0x02
  2c:	81 30       	cpi	r24, 0x01	; 1
  2e:	01 f4       	brne	.+0      	; 0x30 <EXTI_enuDisableINT+0x30>
  30:	ab e5       	ldi	r26, 0x5B	; 91
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	eb e5       	ldi	r30, 0x5B	; 91
	{
		EXTI_ApfunINTFun[2] (EXTI_ApvidGenericparameter[2]);
  36:	f0 e0       	ldi	r31, 0x00	; 0
  38:	80 81       	ld	r24, Z
  3a:	8f 77       	andi	r24, 0x7F	; 127
  3c:	8c 93       	st	X, r24
  3e:	00 c0       	rjmp	.+0      	; 0x40 <EXTI_enuDisableINT+0x40>
  40:	8a 81       	ldd	r24, Y+2	; 0x02
  42:	82 30       	cpi	r24, 0x02	; 2
  44:	01 f4       	brne	.+0      	; 0x46 <EXTI_enuDisableINT+0x46>
  46:	ab e5       	ldi	r26, 0x5B	; 91
	}
}
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	eb e5       	ldi	r30, 0x5B	; 91
  4c:	f0 e0       	ldi	r31, 0x00	; 0
  4e:	80 81       	ld	r24, Z
  50:	8f 7d       	andi	r24, 0xDF	; 223
  52:	8c 93       	st	X, r24
  54:	89 81       	ldd	r24, Y+1	; 0x01
  56:	0f 90       	pop	r0
  58:	0f 90       	pop	r0
  5a:	cf 91       	pop	r28
  5c:	df 91       	pop	r29
  5e:	08 95       	ret

Disassembly of section .text.EXTI_enuCallBack:

00000000 <EXTI_enuCallBack>:
		EXTI_ApfunINTFun[1] (EXTI_ApvidGenericparameter[1]);
	}
}

ISR(VECT_INT2)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <EXTI_enuCallBack+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <EXTI_enuCallBack+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <EXTI_enuCallBack+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9b 83       	std	Y+3, r25	; 0x03
  10:	8a 83       	std	Y+2, r24	; 0x02
  12:	7d 83       	std	Y+5, r23	; 0x05
  14:	6c 83       	std	Y+4, r22	; 0x04
  16:	4e 83       	std	Y+6, r20	; 0x06
  18:	19 82       	std	Y+1, r1	; 0x01
  1a:	8a 81       	ldd	r24, Y+2	; 0x02
  1c:	9b 81       	ldd	r25, Y+3	; 0x03
  1e:	00 97       	sbiw	r24, 0x00	; 0
  20:	01 f0       	breq	.+0      	; 0x22 <EXTI_enuCallBack+0x22>
  22:	8e 81       	ldd	r24, Y+6	; 0x06
  24:	83 30       	cpi	r24, 0x03	; 3
  26:	00 f4       	brcc	.+0      	; 0x28 <EXTI_enuCallBack+0x28>
  28:	8e 81       	ldd	r24, Y+6	; 0x06
	if (EXTI_ApfunINTFun[2] != NULL)
  2a:	88 2f       	mov	r24, r24
  2c:	90 e0       	ldi	r25, 0x00	; 0
  2e:	88 0f       	add	r24, r24
  30:	99 1f       	adc	r25, r25
  32:	fc 01       	movw	r30, r24
  34:	e0 50       	subi	r30, 0x00	; 0
	{
		EXTI_ApfunINTFun[2] (EXTI_ApvidGenericparameter[2]);
  36:	f0 40       	sbci	r31, 0x00	; 0
  38:	8a 81       	ldd	r24, Y+2	; 0x02
  3a:	9b 81       	ldd	r25, Y+3	; 0x03
  3c:	91 83       	std	Z+1, r25	; 0x01
  3e:	80 83       	st	Z, r24
  40:	8e 81       	ldd	r24, Y+6	; 0x06
  42:	88 2f       	mov	r24, r24
  44:	90 e0       	ldi	r25, 0x00	; 0
  46:	88 0f       	add	r24, r24
	}
}
  48:	99 1f       	adc	r25, r25
  4a:	fc 01       	movw	r30, r24
  4c:	e0 50       	subi	r30, 0x00	; 0
  4e:	f0 40       	sbci	r31, 0x00	; 0
  50:	8c 81       	ldd	r24, Y+4	; 0x04
  52:	9d 81       	ldd	r25, Y+5	; 0x05
  54:	91 83       	std	Z+1, r25	; 0x01
  56:	80 83       	st	Z, r24
  58:	89 81       	ldd	r24, Y+1	; 0x01
  5a:	26 96       	adiw	r28, 0x06	; 6
  5c:	0f b6       	in	r0, 0x3f	; 63
  5e:	f8 94       	cli
  60:	de bf       	out	0x3e, r29	; 62
  62:	0f be       	out	0x3f, r0	; 63
  64:	cd bf       	out	0x3d, r28	; 61
  66:	cf 91       	pop	r28
  68:	df 91       	pop	r29
  6a:	08 95       	ret

Disassembly of section .text.__vector_1:

00000000 <__vector_1>:
		EXTI_ApfunINTFun[1] (EXTI_ApvidGenericparameter[1]);
	}
}

ISR(VECT_INT2)
{
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  22:	df 93       	push	r29
  24:	cf 93       	push	r28
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[2] != NULL)
  2a:	80 91 00 00 	lds	r24, 0x0000
  2e:	90 91 00 00 	lds	r25, 0x0000
  32:	00 97       	sbiw	r24, 0x00	; 0
  34:	01 f0       	breq	.+0      	; 0x36 <__vector_1+0x36>
	{
		EXTI_ApfunINTFun[2] (EXTI_ApvidGenericparameter[2]);
  36:	e0 91 00 00 	lds	r30, 0x0000
  3a:	f0 91 00 00 	lds	r31, 0x0000
  3e:	80 91 00 00 	lds	r24, 0x0000
  42:	90 91 00 00 	lds	r25, 0x0000
  46:	09 95       	icall
	}
}
  48:	cf 91       	pop	r28
  4a:	df 91       	pop	r29
  4c:	ff 91       	pop	r31
  4e:	ef 91       	pop	r30
  50:	bf 91       	pop	r27
  52:	af 91       	pop	r26
  54:	9f 91       	pop	r25
  56:	8f 91       	pop	r24
  58:	7f 91       	pop	r23
  5a:	6f 91       	pop	r22
  5c:	5f 91       	pop	r21
  5e:	4f 91       	pop	r20
  60:	3f 91       	pop	r19
  62:	2f 91       	pop	r18
  64:	0f 90       	pop	r0
  66:	0f be       	out	0x3f, r0	; 63
  68:	0f 90       	pop	r0
  6a:	1f 90       	pop	r1
  6c:	18 95       	reti

Disassembly of section .text.__vector_2:

00000000 <__vector_2>:
		EXTI_ApfunINTFun[1] (EXTI_ApvidGenericparameter[1]);
	}
}

ISR(VECT_INT2)
{
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  22:	df 93       	push	r29
  24:	cf 93       	push	r28
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[2] != NULL)
  2a:	80 91 00 00 	lds	r24, 0x0000
  2e:	90 91 00 00 	lds	r25, 0x0000
  32:	00 97       	sbiw	r24, 0x00	; 0
  34:	01 f0       	breq	.+0      	; 0x36 <__vector_2+0x36>
	{
		EXTI_ApfunINTFun[2] (EXTI_ApvidGenericparameter[2]);
  36:	e0 91 00 00 	lds	r30, 0x0000
  3a:	f0 91 00 00 	lds	r31, 0x0000
  3e:	80 91 00 00 	lds	r24, 0x0000
  42:	90 91 00 00 	lds	r25, 0x0000
  46:	09 95       	icall
	}
}
  48:	cf 91       	pop	r28
  4a:	df 91       	pop	r29
  4c:	ff 91       	pop	r31
  4e:	ef 91       	pop	r30
  50:	bf 91       	pop	r27
  52:	af 91       	pop	r26
  54:	9f 91       	pop	r25
  56:	8f 91       	pop	r24
  58:	7f 91       	pop	r23
  5a:	6f 91       	pop	r22
  5c:	5f 91       	pop	r21
  5e:	4f 91       	pop	r20
  60:	3f 91       	pop	r19
  62:	2f 91       	pop	r18
  64:	0f 90       	pop	r0
  66:	0f be       	out	0x3f, r0	; 63
  68:	0f 90       	pop	r0
  6a:	1f 90       	pop	r1
  6c:	18 95       	reti

Disassembly of section .text.__vector_3:

00000000 <__vector_3>:
		EXTI_ApfunINTFun[1] (EXTI_ApvidGenericparameter[1]);
	}
}

ISR(VECT_INT2)
{
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  22:	df 93       	push	r29
  24:	cf 93       	push	r28
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[2] != NULL)
  2a:	80 91 00 00 	lds	r24, 0x0000
  2e:	90 91 00 00 	lds	r25, 0x0000
  32:	00 97       	sbiw	r24, 0x00	; 0
  34:	01 f0       	breq	.+0      	; 0x36 <__vector_3+0x36>
	{
		EXTI_ApfunINTFun[2] (EXTI_ApvidGenericparameter[2]);
  36:	e0 91 00 00 	lds	r30, 0x0000
  3a:	f0 91 00 00 	lds	r31, 0x0000
  3e:	80 91 00 00 	lds	r24, 0x0000
  42:	90 91 00 00 	lds	r25, 0x0000
  46:	09 95       	icall
	}
}
  48:	cf 91       	pop	r28
  4a:	df 91       	pop	r29
  4c:	ff 91       	pop	r31
  4e:	ef 91       	pop	r30
  50:	bf 91       	pop	r27
  52:	af 91       	pop	r26
  54:	9f 91       	pop	r25
  56:	8f 91       	pop	r24
  58:	7f 91       	pop	r23
  5a:	6f 91       	pop	r22
  5c:	5f 91       	pop	r21
  5e:	4f 91       	pop	r20
  60:	3f 91       	pop	r19
  62:	2f 91       	pop	r18
  64:	0f 90       	pop	r0
  66:	0f be       	out	0x3f, r0	; 63
  68:	0f 90       	pop	r0
  6a:	1f 90       	pop	r1
  6c:	18 95       	reti

DIO_prog.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000009cc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000006b2  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.DIO_enuInit 00000058  00000000  00000000  000010b2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.DIO_enuSetPortDirection 0000009a  00000000  00000000  0000110a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.DIO_enuSetPortVal 0000009a  00000000  00000000  000011a4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.DIO_enuGetPortVal 000000be  00000000  00000000  0000123e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.DIO_enuTogPortVal 000000ae  00000000  00000000  000012fc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.DIO_enuSetPinDirection 000001d8  00000000  00000000  000013aa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.DIO_enuSetPinVal 000001d8  00000000  00000000  00001582  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.DIO_enuGetPinVal 00000134  00000000  00000000  0000175a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text.DIO_enuTogPinVal 0000011c  00000000  00000000  0000188e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.DIO_enuInit:

00000000 <DIO_enuInit>:
	 }
			return Local_enuErrorState;


}
ES_t DIO_enuTogPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID){
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	19 82       	std	Y+1, r1	; 0x01
   c:	ea e3       	ldi	r30, 0x3A	; 58
   e:	f0 e0       	ldi	r31, 0x00	; 0
  10:	8f ef       	ldi	r24, 0xFF	; 255
	ES_t Local_enuErrorState = ES_NOK;
  12:	80 83       	st	Z, r24

				if(Copy_u8PortID <= DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
  14:	e7 e3       	ldi	r30, 0x37	; 55
  16:	f0 e0       	ldi	r31, 0x00	; 0
  18:	8f ef       	ldi	r24, 0xFF	; 255
  1a:	80 83       	st	Z, r24
  1c:	e4 e3       	ldi	r30, 0x34	; 52
  1e:	f0 e0       	ldi	r31, 0x00	; 0
  20:	8d ec       	ldi	r24, 0xCD	; 205
  22:	80 83       	st	Z, r24
				{
					switch(Copy_u8PortID)
  24:	e1 e3       	ldi	r30, 0x31	; 49
  26:	f0 e0       	ldi	r31, 0x00	; 0
  28:	8d ec       	ldi	r24, 0xCD	; 205
  2a:	80 83       	st	Z, r24
  2c:	eb e3       	ldi	r30, 0x3B	; 59
  2e:	f0 e0       	ldi	r31, 0x00	; 0
  30:	10 82       	st	Z, r1
  32:	e8 e3       	ldi	r30, 0x38	; 56
  34:	f0 e0       	ldi	r31, 0x00	; 0
  36:	89 e8       	ldi	r24, 0x89	; 137
  38:	80 83       	st	Z, r24
  3a:	e5 e3       	ldi	r30, 0x35	; 53
  3c:	f0 e0       	ldi	r31, 0x00	; 0
  3e:	89 e2       	ldi	r24, 0x29	; 41
  40:	80 83       	st	Z, r24
  42:	e2 e3       	ldi	r30, 0x32	; 50
  44:	f0 e0       	ldi	r31, 0x00	; 0
  46:	89 e2       	ldi	r24, 0x29	; 41
  48:	80 83       	st	Z, r24
  4a:	81 e0       	ldi	r24, 0x01	; 1
  4c:	89 83       	std	Y+1, r24	; 0x01
  4e:	89 81       	ldd	r24, Y+1	; 0x01
  50:	0f 90       	pop	r0
  52:	cf 91       	pop	r28
  54:	df 91       	pop	r29
  56:	08 95       	ret

Disassembly of section .text.DIO_enuSetPortDirection:

00000000 <DIO_enuSetPortDirection>:
	 }
			return Local_enuErrorState;


}
ES_t DIO_enuTogPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID){
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <DIO_enuSetPortDirection+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <DIO_enuSetPortDirection+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	8a 83       	std	Y+2, r24	; 0x02
  10:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
  12:	19 82       	std	Y+1, r1	; 0x01

				if(Copy_u8PortID <= DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
  14:	8a 81       	ldd	r24, Y+2	; 0x02
  16:	84 30       	cpi	r24, 0x04	; 4
  18:	00 f4       	brcc	.+0      	; 0x1a <DIO_enuSetPortDirection+0x1a>
  1a:	8a 81       	ldd	r24, Y+2	; 0x02
  1c:	28 2f       	mov	r18, r24
  1e:	30 e0       	ldi	r19, 0x00	; 0
  20:	3d 83       	std	Y+5, r19	; 0x05
  22:	2c 83       	std	Y+4, r18	; 0x04
				{
					switch(Copy_u8PortID)
  24:	8c 81       	ldd	r24, Y+4	; 0x04
  26:	9d 81       	ldd	r25, Y+5	; 0x05
  28:	81 30       	cpi	r24, 0x01	; 1
  2a:	91 05       	cpc	r25, r1
  2c:	01 f0       	breq	.+0      	; 0x2e <DIO_enuSetPortDirection+0x2e>
  2e:	2c 81       	ldd	r18, Y+4	; 0x04
  30:	3d 81       	ldd	r19, Y+5	; 0x05
  32:	22 30       	cpi	r18, 0x02	; 2
  34:	31 05       	cpc	r19, r1
  36:	04 f4       	brge	.+0      	; 0x38 <DIO_enuSetPortDirection+0x38>
  38:	8c 81       	ldd	r24, Y+4	; 0x04
  3a:	9d 81       	ldd	r25, Y+5	; 0x05
  3c:	00 97       	sbiw	r24, 0x00	; 0
  3e:	01 f0       	breq	.+0      	; 0x40 <DIO_enuSetPortDirection+0x40>
  40:	00 c0       	rjmp	.+0      	; 0x42 <DIO_enuSetPortDirection+0x42>
  42:	2c 81       	ldd	r18, Y+4	; 0x04
  44:	3d 81       	ldd	r19, Y+5	; 0x05
  46:	22 30       	cpi	r18, 0x02	; 2
  48:	31 05       	cpc	r19, r1
  4a:	01 f0       	breq	.+0      	; 0x4c <DIO_enuSetPortDirection+0x4c>
  4c:	8c 81       	ldd	r24, Y+4	; 0x04
  4e:	9d 81       	ldd	r25, Y+5	; 0x05
  50:	83 30       	cpi	r24, 0x03	; 3
  52:	91 05       	cpc	r25, r1
  54:	01 f0       	breq	.+0      	; 0x56 <DIO_enuSetPortDirection+0x56>
  56:	00 c0       	rjmp	.+0      	; 0x58 <DIO_enuSetPortDirection+0x58>
  58:	ea e3       	ldi	r30, 0x3A	; 58
  5a:	f0 e0       	ldi	r31, 0x00	; 0
  5c:	8b 81       	ldd	r24, Y+3	; 0x03
  5e:	80 83       	st	Z, r24
  60:	00 c0       	rjmp	.+0      	; 0x62 <DIO_enuSetPortDirection+0x62>
					{
						case DIO_PORTA:
						 PORTA^=(1 << Copy_u8PinID);
  62:	e7 e3       	ldi	r30, 0x37	; 55
  64:	f0 e0       	ldi	r31, 0x00	; 0
  66:	8b 81       	ldd	r24, Y+3	; 0x03
  68:	80 83       	st	Z, r24
  6a:	00 c0       	rjmp	.+0      	; 0x6c <DIO_enuSetPortDirection+0x6c>
  6c:	e4 e3       	ldi	r30, 0x34	; 52
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	8b 81       	ldd	r24, Y+3	; 0x03
  72:	80 83       	st	Z, r24
  74:	00 c0       	rjmp	.+0      	; 0x76 <DIO_enuSetPortDirection+0x76>
  76:	e1 e3       	ldi	r30, 0x31	; 49
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	8b 81       	ldd	r24, Y+3	; 0x03
  7c:	80 83       	st	Z, r24
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	89 83       	std	Y+1, r24	; 0x01
  82:	00 c0       	rjmp	.+0      	; 0x84 <DIO_enuSetPortDirection+0x84>
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	89 83       	std	Y+1, r24	; 0x01
  88:	89 81       	ldd	r24, Y+1	; 0x01
						break;

						case DIO_PORTB:
						 PORTB^=(1 << Copy_u8PinID);
  8a:	0f 90       	pop	r0
  8c:	0f 90       	pop	r0
  8e:	0f 90       	pop	r0
  90:	0f 90       	pop	r0
  92:	0f 90       	pop	r0
  94:	cf 91       	pop	r28
  96:	df 91       	pop	r29
  98:	08 95       	ret

Disassembly of section .text.DIO_enuSetPortVal:

00000000 <DIO_enuSetPortVal>:
	 }
			return Local_enuErrorState;


}
ES_t DIO_enuTogPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID){
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <DIO_enuSetPortVal+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <DIO_enuSetPortVal+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	8a 83       	std	Y+2, r24	; 0x02
  10:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
  12:	19 82       	std	Y+1, r1	; 0x01

				if(Copy_u8PortID <= DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
  14:	8a 81       	ldd	r24, Y+2	; 0x02
  16:	84 30       	cpi	r24, 0x04	; 4
  18:	00 f4       	brcc	.+0      	; 0x1a <DIO_enuSetPortVal+0x1a>
  1a:	8a 81       	ldd	r24, Y+2	; 0x02
  1c:	28 2f       	mov	r18, r24
  1e:	30 e0       	ldi	r19, 0x00	; 0
  20:	3d 83       	std	Y+5, r19	; 0x05
  22:	2c 83       	std	Y+4, r18	; 0x04
				{
					switch(Copy_u8PortID)
  24:	8c 81       	ldd	r24, Y+4	; 0x04
  26:	9d 81       	ldd	r25, Y+5	; 0x05
  28:	81 30       	cpi	r24, 0x01	; 1
  2a:	91 05       	cpc	r25, r1
  2c:	01 f0       	breq	.+0      	; 0x2e <DIO_enuSetPortVal+0x2e>
  2e:	2c 81       	ldd	r18, Y+4	; 0x04
  30:	3d 81       	ldd	r19, Y+5	; 0x05
  32:	22 30       	cpi	r18, 0x02	; 2
  34:	31 05       	cpc	r19, r1
  36:	04 f4       	brge	.+0      	; 0x38 <DIO_enuSetPortVal+0x38>
  38:	8c 81       	ldd	r24, Y+4	; 0x04
  3a:	9d 81       	ldd	r25, Y+5	; 0x05
  3c:	00 97       	sbiw	r24, 0x00	; 0
  3e:	01 f0       	breq	.+0      	; 0x40 <DIO_enuSetPortVal+0x40>
  40:	00 c0       	rjmp	.+0      	; 0x42 <DIO_enuSetPortVal+0x42>
  42:	2c 81       	ldd	r18, Y+4	; 0x04
  44:	3d 81       	ldd	r19, Y+5	; 0x05
  46:	22 30       	cpi	r18, 0x02	; 2
  48:	31 05       	cpc	r19, r1
  4a:	01 f0       	breq	.+0      	; 0x4c <DIO_enuSetPortVal+0x4c>
  4c:	8c 81       	ldd	r24, Y+4	; 0x04
  4e:	9d 81       	ldd	r25, Y+5	; 0x05
  50:	83 30       	cpi	r24, 0x03	; 3
  52:	91 05       	cpc	r25, r1
  54:	01 f0       	breq	.+0      	; 0x56 <DIO_enuSetPortVal+0x56>
  56:	00 c0       	rjmp	.+0      	; 0x58 <DIO_enuSetPortVal+0x58>
  58:	eb e3       	ldi	r30, 0x3B	; 59
  5a:	f0 e0       	ldi	r31, 0x00	; 0
  5c:	8b 81       	ldd	r24, Y+3	; 0x03
  5e:	80 83       	st	Z, r24
  60:	00 c0       	rjmp	.+0      	; 0x62 <DIO_enuSetPortVal+0x62>
					{
						case DIO_PORTA:
						 PORTA^=(1 << Copy_u8PinID);
  62:	e8 e3       	ldi	r30, 0x38	; 56
  64:	f0 e0       	ldi	r31, 0x00	; 0
  66:	8b 81       	ldd	r24, Y+3	; 0x03
  68:	80 83       	st	Z, r24
  6a:	00 c0       	rjmp	.+0      	; 0x6c <DIO_enuSetPortVal+0x6c>
  6c:	e5 e3       	ldi	r30, 0x35	; 53
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	8b 81       	ldd	r24, Y+3	; 0x03
  72:	80 83       	st	Z, r24
  74:	00 c0       	rjmp	.+0      	; 0x76 <DIO_enuSetPortVal+0x76>
  76:	e2 e3       	ldi	r30, 0x32	; 50
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	8b 81       	ldd	r24, Y+3	; 0x03
  7c:	80 83       	st	Z, r24
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	89 83       	std	Y+1, r24	; 0x01
  82:	00 c0       	rjmp	.+0      	; 0x84 <DIO_enuSetPortVal+0x84>
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	89 83       	std	Y+1, r24	; 0x01
  88:	89 81       	ldd	r24, Y+1	; 0x01
						break;

						case DIO_PORTB:
						 PORTB^=(1 << Copy_u8PinID);
  8a:	0f 90       	pop	r0
  8c:	0f 90       	pop	r0
  8e:	0f 90       	pop	r0
  90:	0f 90       	pop	r0
  92:	0f 90       	pop	r0
  94:	cf 91       	pop	r28
  96:	df 91       	pop	r29
  98:	08 95       	ret

Disassembly of section .text.DIO_enuGetPortVal:

00000000 <DIO_enuGetPortVal>:
	 }
			return Local_enuErrorState;


}
ES_t DIO_enuTogPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID){
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <DIO_enuGetPortVal+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <DIO_enuGetPortVal+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <DIO_enuGetPortVal+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	8a 83       	std	Y+2, r24	; 0x02
  10:	7c 83       	std	Y+4, r23	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
  12:	6b 83       	std	Y+3, r22	; 0x03

				if(Copy_u8PortID <= DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
  14:	19 82       	std	Y+1, r1	; 0x01
  16:	8b 81       	ldd	r24, Y+3	; 0x03
  18:	9c 81       	ldd	r25, Y+4	; 0x04
  1a:	00 97       	sbiw	r24, 0x00	; 0
  1c:	01 f4       	brne	.+0      	; 0x1e <DIO_enuGetPortVal+0x1e>
  1e:	00 c0       	rjmp	.+0      	; 0x20 <DIO_enuGetPortVal+0x20>
  20:	8a 81       	ldd	r24, Y+2	; 0x02
  22:	84 30       	cpi	r24, 0x04	; 4
				{
					switch(Copy_u8PortID)
  24:	00 f4       	brcc	.+0      	; 0x26 <DIO_enuGetPortVal+0x26>
  26:	8a 81       	ldd	r24, Y+2	; 0x02
  28:	28 2f       	mov	r18, r24
  2a:	30 e0       	ldi	r19, 0x00	; 0
  2c:	3e 83       	std	Y+6, r19	; 0x06
  2e:	2d 83       	std	Y+5, r18	; 0x05
  30:	8d 81       	ldd	r24, Y+5	; 0x05
  32:	9e 81       	ldd	r25, Y+6	; 0x06
  34:	81 30       	cpi	r24, 0x01	; 1
  36:	91 05       	cpc	r25, r1
  38:	01 f0       	breq	.+0      	; 0x3a <DIO_enuGetPortVal+0x3a>
  3a:	2d 81       	ldd	r18, Y+5	; 0x05
  3c:	3e 81       	ldd	r19, Y+6	; 0x06
  3e:	22 30       	cpi	r18, 0x02	; 2
  40:	31 05       	cpc	r19, r1
  42:	04 f4       	brge	.+0      	; 0x44 <DIO_enuGetPortVal+0x44>
  44:	8d 81       	ldd	r24, Y+5	; 0x05
  46:	9e 81       	ldd	r25, Y+6	; 0x06
  48:	00 97       	sbiw	r24, 0x00	; 0
  4a:	01 f0       	breq	.+0      	; 0x4c <DIO_enuGetPortVal+0x4c>
  4c:	00 c0       	rjmp	.+0      	; 0x4e <DIO_enuGetPortVal+0x4e>
  4e:	2d 81       	ldd	r18, Y+5	; 0x05
  50:	3e 81       	ldd	r19, Y+6	; 0x06
  52:	22 30       	cpi	r18, 0x02	; 2
  54:	31 05       	cpc	r19, r1
  56:	01 f0       	breq	.+0      	; 0x58 <DIO_enuGetPortVal+0x58>
  58:	8d 81       	ldd	r24, Y+5	; 0x05
  5a:	9e 81       	ldd	r25, Y+6	; 0x06
  5c:	83 30       	cpi	r24, 0x03	; 3
  5e:	91 05       	cpc	r25, r1
  60:	01 f0       	breq	.+0      	; 0x62 <DIO_enuGetPortVal+0x62>
					{
						case DIO_PORTA:
						 PORTA^=(1 << Copy_u8PinID);
  62:	00 c0       	rjmp	.+0      	; 0x64 <DIO_enuGetPortVal+0x64>
  64:	e9 e3       	ldi	r30, 0x39	; 57
  66:	f0 e0       	ldi	r31, 0x00	; 0
  68:	80 81       	ld	r24, Z
  6a:	eb 81       	ldd	r30, Y+3	; 0x03
  6c:	fc 81       	ldd	r31, Y+4	; 0x04
  6e:	80 83       	st	Z, r24
  70:	00 c0       	rjmp	.+0      	; 0x72 <DIO_enuGetPortVal+0x72>
  72:	e6 e3       	ldi	r30, 0x36	; 54
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	80 81       	ld	r24, Z
  78:	eb 81       	ldd	r30, Y+3	; 0x03
  7a:	fc 81       	ldd	r31, Y+4	; 0x04
  7c:	80 83       	st	Z, r24
  7e:	00 c0       	rjmp	.+0      	; 0x80 <DIO_enuGetPortVal+0x80>
  80:	e3 e3       	ldi	r30, 0x33	; 51
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	eb 81       	ldd	r30, Y+3	; 0x03
  88:	fc 81       	ldd	r31, Y+4	; 0x04
						break;

						case DIO_PORTB:
						 PORTB^=(1 << Copy_u8PinID);
  8a:	80 83       	st	Z, r24
  8c:	00 c0       	rjmp	.+0      	; 0x8e <DIO_enuGetPortVal+0x8e>
  8e:	e0 e3       	ldi	r30, 0x30	; 48
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	eb 81       	ldd	r30, Y+3	; 0x03
  96:	fc 81       	ldd	r31, Y+4	; 0x04
  98:	80 83       	st	Z, r24
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <DIO_enuGetPortVal+0xa0>
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	89 83       	std	Y+1, r24	; 0x01
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <DIO_enuGetPortVal+0xa6>
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	89 83       	std	Y+1, r24	; 0x01
  aa:	89 81       	ldd	r24, Y+1	; 0x01
  ac:	26 96       	adiw	r28, 0x06	; 6
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	f8 94       	cli
						break;

						case DIO_PORTC:
						 PORTC^=(1 << Copy_u8PinID);
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	cf 91       	pop	r28
  ba:	df 91       	pop	r29
  bc:	08 95       	ret

Disassembly of section .text.DIO_enuTogPortVal:

00000000 <DIO_enuTogPortVal>:
	 }
			return Local_enuErrorState;


}
ES_t DIO_enuTogPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID){
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <DIO_enuTogPortVal+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <DIO_enuTogPortVal+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	8a 83       	std	Y+2, r24	; 0x02
   e:	19 82       	std	Y+1, r1	; 0x01
  10:	8a 81       	ldd	r24, Y+2	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
  12:	84 30       	cpi	r24, 0x04	; 4

				if(Copy_u8PortID <= DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
  14:	00 f0       	brcs	.+0      	; 0x16 <DIO_enuTogPortVal+0x16>
  16:	00 c0       	rjmp	.+0      	; 0x18 <DIO_enuTogPortVal+0x18>
  18:	8a 81       	ldd	r24, Y+2	; 0x02
  1a:	28 2f       	mov	r18, r24
  1c:	30 e0       	ldi	r19, 0x00	; 0
  1e:	3c 83       	std	Y+4, r19	; 0x04
  20:	2b 83       	std	Y+3, r18	; 0x03
  22:	8b 81       	ldd	r24, Y+3	; 0x03
				{
					switch(Copy_u8PortID)
  24:	9c 81       	ldd	r25, Y+4	; 0x04
  26:	81 30       	cpi	r24, 0x01	; 1
  28:	91 05       	cpc	r25, r1
  2a:	01 f0       	breq	.+0      	; 0x2c <DIO_enuTogPortVal+0x2c>
  2c:	2b 81       	ldd	r18, Y+3	; 0x03
  2e:	3c 81       	ldd	r19, Y+4	; 0x04
  30:	22 30       	cpi	r18, 0x02	; 2
  32:	31 05       	cpc	r19, r1
  34:	04 f4       	brge	.+0      	; 0x36 <DIO_enuTogPortVal+0x36>
  36:	8b 81       	ldd	r24, Y+3	; 0x03
  38:	9c 81       	ldd	r25, Y+4	; 0x04
  3a:	00 97       	sbiw	r24, 0x00	; 0
  3c:	01 f0       	breq	.+0      	; 0x3e <DIO_enuTogPortVal+0x3e>
  3e:	00 c0       	rjmp	.+0      	; 0x40 <DIO_enuTogPortVal+0x40>
  40:	2b 81       	ldd	r18, Y+3	; 0x03
  42:	3c 81       	ldd	r19, Y+4	; 0x04
  44:	22 30       	cpi	r18, 0x02	; 2
  46:	31 05       	cpc	r19, r1
  48:	01 f0       	breq	.+0      	; 0x4a <DIO_enuTogPortVal+0x4a>
  4a:	8b 81       	ldd	r24, Y+3	; 0x03
  4c:	9c 81       	ldd	r25, Y+4	; 0x04
  4e:	83 30       	cpi	r24, 0x03	; 3
  50:	91 05       	cpc	r25, r1
  52:	01 f0       	breq	.+0      	; 0x54 <DIO_enuTogPortVal+0x54>
  54:	00 c0       	rjmp	.+0      	; 0x56 <DIO_enuTogPortVal+0x56>
  56:	ab e3       	ldi	r26, 0x3B	; 59
  58:	b0 e0       	ldi	r27, 0x00	; 0
  5a:	eb e3       	ldi	r30, 0x3B	; 59
  5c:	f0 e0       	ldi	r31, 0x00	; 0
  5e:	80 81       	ld	r24, Z
  60:	80 95       	com	r24
					{
						case DIO_PORTA:
						 PORTA^=(1 << Copy_u8PinID);
  62:	8c 93       	st	X, r24
  64:	00 c0       	rjmp	.+0      	; 0x66 <DIO_enuTogPortVal+0x66>
  66:	a8 e3       	ldi	r26, 0x38	; 56
  68:	b0 e0       	ldi	r27, 0x00	; 0
  6a:	e8 e3       	ldi	r30, 0x38	; 56
  6c:	f0 e0       	ldi	r31, 0x00	; 0
  6e:	80 81       	ld	r24, Z
  70:	80 95       	com	r24
  72:	8c 93       	st	X, r24
  74:	00 c0       	rjmp	.+0      	; 0x76 <DIO_enuTogPortVal+0x76>
  76:	a5 e3       	ldi	r26, 0x35	; 53
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	e5 e3       	ldi	r30, 0x35	; 53
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	80 81       	ld	r24, Z
  80:	80 95       	com	r24
  82:	8c 93       	st	X, r24
  84:	00 c0       	rjmp	.+0      	; 0x86 <DIO_enuTogPortVal+0x86>
  86:	a2 e3       	ldi	r26, 0x32	; 50
  88:	b0 e0       	ldi	r27, 0x00	; 0
						break;

						case DIO_PORTB:
						 PORTB^=(1 << Copy_u8PinID);
  8a:	e2 e3       	ldi	r30, 0x32	; 50
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	80 95       	com	r24
  92:	8c 93       	st	X, r24
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	89 83       	std	Y+1, r24	; 0x01
  98:	00 c0       	rjmp	.+0      	; 0x9a <DIO_enuTogPortVal+0x9a>
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	89 81       	ldd	r24, Y+1	; 0x01
  a0:	0f 90       	pop	r0
  a2:	0f 90       	pop	r0
  a4:	0f 90       	pop	r0
  a6:	0f 90       	pop	r0
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	08 95       	ret

Disassembly of section .text.DIO_enuSetPinDirection:

00000000 <DIO_enuSetPinDirection>:
	 }
			return Local_enuErrorState;


}
ES_t DIO_enuTogPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID){
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <DIO_enuSetPinDirection+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <DIO_enuSetPinDirection+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <DIO_enuSetPinDirection+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	8a 83       	std	Y+2, r24	; 0x02
  10:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
  12:	4c 83       	std	Y+4, r20	; 0x04

				if(Copy_u8PortID <= DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
  14:	19 82       	std	Y+1, r1	; 0x01
  16:	8a 81       	ldd	r24, Y+2	; 0x02
  18:	84 30       	cpi	r24, 0x04	; 4
  1a:	00 f0       	brcs	.+0      	; 0x1c <DIO_enuSetPinDirection+0x1c>
  1c:	00 c0       	rjmp	.+0      	; 0x1e <DIO_enuSetPinDirection+0x1e>
  1e:	8b 81       	ldd	r24, Y+3	; 0x03
  20:	88 30       	cpi	r24, 0x08	; 8
  22:	00 f0       	brcs	.+0      	; 0x24 <DIO_enuSetPinDirection+0x24>
				{
					switch(Copy_u8PortID)
  24:	00 c0       	rjmp	.+0      	; 0x26 <DIO_enuSetPinDirection+0x26>
  26:	8c 81       	ldd	r24, Y+4	; 0x04
  28:	82 30       	cpi	r24, 0x02	; 2
  2a:	00 f0       	brcs	.+0      	; 0x2c <DIO_enuSetPinDirection+0x2c>
  2c:	00 c0       	rjmp	.+0      	; 0x2e <DIO_enuSetPinDirection+0x2e>
  2e:	8a 81       	ldd	r24, Y+2	; 0x02
  30:	28 2f       	mov	r18, r24
  32:	30 e0       	ldi	r19, 0x00	; 0
  34:	3e 83       	std	Y+6, r19	; 0x06
  36:	2d 83       	std	Y+5, r18	; 0x05
  38:	6d 81       	ldd	r22, Y+5	; 0x05
  3a:	7e 81       	ldd	r23, Y+6	; 0x06
  3c:	61 30       	cpi	r22, 0x01	; 1
  3e:	71 05       	cpc	r23, r1
  40:	01 f4       	brne	.+0      	; 0x42 <DIO_enuSetPinDirection+0x42>
  42:	00 c0       	rjmp	.+0      	; 0x44 <DIO_enuSetPinDirection+0x44>
  44:	8d 81       	ldd	r24, Y+5	; 0x05
  46:	9e 81       	ldd	r25, Y+6	; 0x06
  48:	82 30       	cpi	r24, 0x02	; 2
  4a:	91 05       	cpc	r25, r1
  4c:	04 f4       	brge	.+0      	; 0x4e <DIO_enuSetPinDirection+0x4e>
  4e:	2d 81       	ldd	r18, Y+5	; 0x05
  50:	3e 81       	ldd	r19, Y+6	; 0x06
  52:	21 15       	cp	r18, r1
  54:	31 05       	cpc	r19, r1
  56:	01 f0       	breq	.+0      	; 0x58 <DIO_enuSetPinDirection+0x58>
  58:	00 c0       	rjmp	.+0      	; 0x5a <DIO_enuSetPinDirection+0x5a>
  5a:	6d 81       	ldd	r22, Y+5	; 0x05
  5c:	7e 81       	ldd	r23, Y+6	; 0x06
  5e:	62 30       	cpi	r22, 0x02	; 2
  60:	71 05       	cpc	r23, r1
					{
						case DIO_PORTA:
						 PORTA^=(1 << Copy_u8PinID);
  62:	01 f4       	brne	.+0      	; 0x64 <DIO_enuSetPinDirection+0x64>
  64:	00 c0       	rjmp	.+0      	; 0x66 <DIO_enuSetPinDirection+0x66>
  66:	8d 81       	ldd	r24, Y+5	; 0x05
  68:	9e 81       	ldd	r25, Y+6	; 0x06
  6a:	83 30       	cpi	r24, 0x03	; 3
  6c:	91 05       	cpc	r25, r1
  6e:	01 f4       	brne	.+0      	; 0x70 <DIO_enuSetPinDirection+0x70>
  70:	00 c0       	rjmp	.+0      	; 0x72 <DIO_enuSetPinDirection+0x72>
  72:	00 c0       	rjmp	.+0      	; 0x74 <DIO_enuSetPinDirection+0x74>
  74:	aa e3       	ldi	r26, 0x3A	; 58
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	ea e3       	ldi	r30, 0x3A	; 58
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	48 2f       	mov	r20, r24
  80:	8b 81       	ldd	r24, Y+3	; 0x03
  82:	28 2f       	mov	r18, r24
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	90 e0       	ldi	r25, 0x00	; 0
						break;

						case DIO_PORTB:
						 PORTB^=(1 << Copy_u8PinID);
  8a:	00 c0       	rjmp	.+0      	; 0x8c <DIO_enuSetPinDirection+0x8c>
  8c:	88 0f       	add	r24, r24
  8e:	99 1f       	adc	r25, r25
  90:	2a 95       	dec	r18
  92:	02 f4       	brpl	.+0      	; 0x94 <DIO_enuSetPinDirection+0x94>
  94:	80 95       	com	r24
  96:	84 23       	and	r24, r20
  98:	8c 93       	st	X, r24
  9a:	aa e3       	ldi	r26, 0x3A	; 58
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	ea e3       	ldi	r30, 0x3A	; 58
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	48 2f       	mov	r20, r24
  a6:	8c 81       	ldd	r24, Y+4	; 0x04
  a8:	28 2f       	mov	r18, r24
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	8b 81       	ldd	r24, Y+3	; 0x03
  ae:	88 2f       	mov	r24, r24
  b0:	90 e0       	ldi	r25, 0x00	; 0
						break;

						case DIO_PORTC:
						 PORTC^=(1 << Copy_u8PinID);
  b2:	b9 01       	movw	r22, r18
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <DIO_enuSetPinDirection+0xb6>
  b6:	66 0f       	add	r22, r22
  b8:	77 1f       	adc	r23, r23
  ba:	8a 95       	dec	r24
  bc:	02 f4       	brpl	.+0      	; 0xbe <DIO_enuSetPinDirection+0xbe>
  be:	cb 01       	movw	r24, r22
  c0:	84 2b       	or	r24, r20
  c2:	8c 93       	st	X, r24
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <DIO_enuSetPinDirection+0xc6>
  c6:	a7 e3       	ldi	r26, 0x37	; 55
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	e7 e3       	ldi	r30, 0x37	; 55
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	48 2f       	mov	r20, r24
  d2:	8b 81       	ldd	r24, Y+3	; 0x03
  d4:	28 2f       	mov	r18, r24
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	81 e0       	ldi	r24, 0x01	; 1
						break;

						case DIO_PORTD:
						 PORTD^=(1 << Copy_u8PinID);
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	00 c0       	rjmp	.+0      	; 0xde <DIO_enuSetPinDirection+0xde>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	2a 95       	dec	r18
  e4:	02 f4       	brpl	.+0      	; 0xe6 <DIO_enuSetPinDirection+0xe6>
  e6:	80 95       	com	r24
  e8:	84 23       	and	r24, r20
  ea:	8c 93       	st	X, r24
  ec:	a7 e3       	ldi	r26, 0x37	; 55
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	e7 e3       	ldi	r30, 0x37	; 55
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	48 2f       	mov	r20, r24
  f8:	8c 81       	ldd	r24, Y+4	; 0x04
  fa:	28 2f       	mov	r18, r24
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	8b 81       	ldd	r24, Y+3	; 0x03
						break;
					}
					Local_enuErrorState = ES_OK;
 100:	88 2f       	mov	r24, r24
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	b9 01       	movw	r22, r18
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
 106:	00 c0       	rjmp	.+0      	; 0x108 <DIO_enuSetPinDirection+0x108>
 108:	66 0f       	add	r22, r22
				}

				return Local_enuErrorState;
 10a:	77 1f       	adc	r23, r23

	}
 10c:	8a 95       	dec	r24
 10e:	02 f4       	brpl	.+0      	; 0x110 <DIO_enuSetPinDirection+0x110>
 110:	cb 01       	movw	r24, r22
 112:	84 2b       	or	r24, r20
 114:	8c 93       	st	X, r24
 116:	00 c0       	rjmp	.+0      	; 0x118 <DIO_enuSetPinDirection+0x118>
 118:	a4 e3       	ldi	r26, 0x34	; 52
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	e4 e3       	ldi	r30, 0x34	; 52
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	48 2f       	mov	r20, r24
 124:	8b 81       	ldd	r24, Y+3	; 0x03
 126:	28 2f       	mov	r18, r24
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	00 c0       	rjmp	.+0      	; 0x130 <DIO_enuSetPinDirection+0x130>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	2a 95       	dec	r18
 136:	02 f4       	brpl	.+0      	; 0x138 <DIO_enuSetPinDirection+0x138>
 138:	80 95       	com	r24
 13a:	84 23       	and	r24, r20
 13c:	8c 93       	st	X, r24
 13e:	a4 e3       	ldi	r26, 0x34	; 52
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	e4 e3       	ldi	r30, 0x34	; 52
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	48 2f       	mov	r20, r24
 14a:	8c 81       	ldd	r24, Y+4	; 0x04
 14c:	28 2f       	mov	r18, r24
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	8b 81       	ldd	r24, Y+3	; 0x03
 152:	88 2f       	mov	r24, r24
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	b9 01       	movw	r22, r18
 158:	00 c0       	rjmp	.+0      	; 0x15a <DIO_enuSetPinDirection+0x15a>
 15a:	66 0f       	add	r22, r22
 15c:	77 1f       	adc	r23, r23
 15e:	8a 95       	dec	r24
 160:	02 f4       	brpl	.+0      	; 0x162 <DIO_enuSetPinDirection+0x162>
 162:	cb 01       	movw	r24, r22
 164:	84 2b       	or	r24, r20
 166:	8c 93       	st	X, r24
 168:	00 c0       	rjmp	.+0      	; 0x16a <DIO_enuSetPinDirection+0x16a>
 16a:	a1 e3       	ldi	r26, 0x31	; 49
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	e1 e3       	ldi	r30, 0x31	; 49
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	48 2f       	mov	r20, r24
 176:	8b 81       	ldd	r24, Y+3	; 0x03
 178:	28 2f       	mov	r18, r24
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	00 c0       	rjmp	.+0      	; 0x182 <DIO_enuSetPinDirection+0x182>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	2a 95       	dec	r18
 188:	02 f4       	brpl	.+0      	; 0x18a <DIO_enuSetPinDirection+0x18a>
 18a:	80 95       	com	r24
 18c:	84 23       	and	r24, r20
 18e:	8c 93       	st	X, r24
 190:	a1 e3       	ldi	r26, 0x31	; 49
 192:	b0 e0       	ldi	r27, 0x00	; 0
 194:	e1 e3       	ldi	r30, 0x31	; 49
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	48 2f       	mov	r20, r24
 19c:	8c 81       	ldd	r24, Y+4	; 0x04
 19e:	28 2f       	mov	r18, r24
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	8b 81       	ldd	r24, Y+3	; 0x03
 1a4:	88 2f       	mov	r24, r24
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	b9 01       	movw	r22, r18
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <DIO_enuSetPinDirection+0x1ac>
 1ac:	66 0f       	add	r22, r22
 1ae:	77 1f       	adc	r23, r23
 1b0:	8a 95       	dec	r24
 1b2:	02 f4       	brpl	.+0      	; 0x1b4 <DIO_enuSetPinDirection+0x1b4>
 1b4:	cb 01       	movw	r24, r22
 1b6:	84 2b       	or	r24, r20
 1b8:	8c 93       	st	X, r24
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	89 83       	std	Y+1, r24	; 0x01
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <DIO_enuSetPinDirection+0x1c0>
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	89 83       	std	Y+1, r24	; 0x01
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	26 96       	adiw	r28, 0x06	; 6
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	f8 94       	cli
 1cc:	de bf       	out	0x3e, r29	; 62
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	cd bf       	out	0x3d, r28	; 61
 1d2:	cf 91       	pop	r28
 1d4:	df 91       	pop	r29
 1d6:	08 95       	ret

Disassembly of section .text.DIO_enuSetPinVal:

00000000 <DIO_enuSetPinVal>:
	 }
			return Local_enuErrorState;


}
ES_t DIO_enuTogPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID){
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <DIO_enuSetPinVal+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <DIO_enuSetPinVal+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <DIO_enuSetPinVal+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	8a 83       	std	Y+2, r24	; 0x02
  10:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
  12:	4c 83       	std	Y+4, r20	; 0x04

				if(Copy_u8PortID <= DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
  14:	19 82       	std	Y+1, r1	; 0x01
  16:	8a 81       	ldd	r24, Y+2	; 0x02
  18:	84 30       	cpi	r24, 0x04	; 4
  1a:	00 f0       	brcs	.+0      	; 0x1c <DIO_enuSetPinVal+0x1c>
  1c:	00 c0       	rjmp	.+0      	; 0x1e <DIO_enuSetPinVal+0x1e>
  1e:	8b 81       	ldd	r24, Y+3	; 0x03
  20:	88 30       	cpi	r24, 0x08	; 8
  22:	00 f0       	brcs	.+0      	; 0x24 <DIO_enuSetPinVal+0x24>
				{
					switch(Copy_u8PortID)
  24:	00 c0       	rjmp	.+0      	; 0x26 <DIO_enuSetPinVal+0x26>
  26:	8c 81       	ldd	r24, Y+4	; 0x04
  28:	82 30       	cpi	r24, 0x02	; 2
  2a:	00 f0       	brcs	.+0      	; 0x2c <DIO_enuSetPinVal+0x2c>
  2c:	00 c0       	rjmp	.+0      	; 0x2e <DIO_enuSetPinVal+0x2e>
  2e:	8a 81       	ldd	r24, Y+2	; 0x02
  30:	28 2f       	mov	r18, r24
  32:	30 e0       	ldi	r19, 0x00	; 0
  34:	3e 83       	std	Y+6, r19	; 0x06
  36:	2d 83       	std	Y+5, r18	; 0x05
  38:	6d 81       	ldd	r22, Y+5	; 0x05
  3a:	7e 81       	ldd	r23, Y+6	; 0x06
  3c:	61 30       	cpi	r22, 0x01	; 1
  3e:	71 05       	cpc	r23, r1
  40:	01 f4       	brne	.+0      	; 0x42 <DIO_enuSetPinVal+0x42>
  42:	00 c0       	rjmp	.+0      	; 0x44 <DIO_enuSetPinVal+0x44>
  44:	8d 81       	ldd	r24, Y+5	; 0x05
  46:	9e 81       	ldd	r25, Y+6	; 0x06
  48:	82 30       	cpi	r24, 0x02	; 2
  4a:	91 05       	cpc	r25, r1
  4c:	04 f4       	brge	.+0      	; 0x4e <DIO_enuSetPinVal+0x4e>
  4e:	2d 81       	ldd	r18, Y+5	; 0x05
  50:	3e 81       	ldd	r19, Y+6	; 0x06
  52:	21 15       	cp	r18, r1
  54:	31 05       	cpc	r19, r1
  56:	01 f0       	breq	.+0      	; 0x58 <DIO_enuSetPinVal+0x58>
  58:	00 c0       	rjmp	.+0      	; 0x5a <DIO_enuSetPinVal+0x5a>
  5a:	6d 81       	ldd	r22, Y+5	; 0x05
  5c:	7e 81       	ldd	r23, Y+6	; 0x06
  5e:	62 30       	cpi	r22, 0x02	; 2
  60:	71 05       	cpc	r23, r1
					{
						case DIO_PORTA:
						 PORTA^=(1 << Copy_u8PinID);
  62:	01 f4       	brne	.+0      	; 0x64 <DIO_enuSetPinVal+0x64>
  64:	00 c0       	rjmp	.+0      	; 0x66 <DIO_enuSetPinVal+0x66>
  66:	8d 81       	ldd	r24, Y+5	; 0x05
  68:	9e 81       	ldd	r25, Y+6	; 0x06
  6a:	83 30       	cpi	r24, 0x03	; 3
  6c:	91 05       	cpc	r25, r1
  6e:	01 f4       	brne	.+0      	; 0x70 <DIO_enuSetPinVal+0x70>
  70:	00 c0       	rjmp	.+0      	; 0x72 <DIO_enuSetPinVal+0x72>
  72:	00 c0       	rjmp	.+0      	; 0x74 <DIO_enuSetPinVal+0x74>
  74:	ab e3       	ldi	r26, 0x3B	; 59
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	eb e3       	ldi	r30, 0x3B	; 59
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	48 2f       	mov	r20, r24
  80:	8b 81       	ldd	r24, Y+3	; 0x03
  82:	28 2f       	mov	r18, r24
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	90 e0       	ldi	r25, 0x00	; 0
						break;

						case DIO_PORTB:
						 PORTB^=(1 << Copy_u8PinID);
  8a:	00 c0       	rjmp	.+0      	; 0x8c <DIO_enuSetPinVal+0x8c>
  8c:	88 0f       	add	r24, r24
  8e:	99 1f       	adc	r25, r25
  90:	2a 95       	dec	r18
  92:	02 f4       	brpl	.+0      	; 0x94 <DIO_enuSetPinVal+0x94>
  94:	80 95       	com	r24
  96:	84 23       	and	r24, r20
  98:	8c 93       	st	X, r24
  9a:	ab e3       	ldi	r26, 0x3B	; 59
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	eb e3       	ldi	r30, 0x3B	; 59
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	48 2f       	mov	r20, r24
  a6:	8c 81       	ldd	r24, Y+4	; 0x04
  a8:	28 2f       	mov	r18, r24
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	8b 81       	ldd	r24, Y+3	; 0x03
  ae:	88 2f       	mov	r24, r24
  b0:	90 e0       	ldi	r25, 0x00	; 0
						break;

						case DIO_PORTC:
						 PORTC^=(1 << Copy_u8PinID);
  b2:	b9 01       	movw	r22, r18
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <DIO_enuSetPinVal+0xb6>
  b6:	66 0f       	add	r22, r22
  b8:	77 1f       	adc	r23, r23
  ba:	8a 95       	dec	r24
  bc:	02 f4       	brpl	.+0      	; 0xbe <DIO_enuSetPinVal+0xbe>
  be:	cb 01       	movw	r24, r22
  c0:	84 2b       	or	r24, r20
  c2:	8c 93       	st	X, r24
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <DIO_enuSetPinVal+0xc6>
  c6:	a8 e3       	ldi	r26, 0x38	; 56
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	e8 e3       	ldi	r30, 0x38	; 56
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	48 2f       	mov	r20, r24
  d2:	8b 81       	ldd	r24, Y+3	; 0x03
  d4:	28 2f       	mov	r18, r24
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	81 e0       	ldi	r24, 0x01	; 1
						break;

						case DIO_PORTD:
						 PORTD^=(1 << Copy_u8PinID);
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	00 c0       	rjmp	.+0      	; 0xde <DIO_enuSetPinVal+0xde>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	2a 95       	dec	r18
  e4:	02 f4       	brpl	.+0      	; 0xe6 <DIO_enuSetPinVal+0xe6>
  e6:	80 95       	com	r24
  e8:	84 23       	and	r24, r20
  ea:	8c 93       	st	X, r24
  ec:	a8 e3       	ldi	r26, 0x38	; 56
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	e8 e3       	ldi	r30, 0x38	; 56
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	48 2f       	mov	r20, r24
  f8:	8c 81       	ldd	r24, Y+4	; 0x04
  fa:	28 2f       	mov	r18, r24
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	8b 81       	ldd	r24, Y+3	; 0x03
						break;
					}
					Local_enuErrorState = ES_OK;
 100:	88 2f       	mov	r24, r24
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	b9 01       	movw	r22, r18
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
 106:	00 c0       	rjmp	.+0      	; 0x108 <DIO_enuSetPinVal+0x108>
 108:	66 0f       	add	r22, r22
				}

				return Local_enuErrorState;
 10a:	77 1f       	adc	r23, r23

	}
 10c:	8a 95       	dec	r24
 10e:	02 f4       	brpl	.+0      	; 0x110 <DIO_enuSetPinVal+0x110>
 110:	cb 01       	movw	r24, r22
 112:	84 2b       	or	r24, r20
 114:	8c 93       	st	X, r24
 116:	00 c0       	rjmp	.+0      	; 0x118 <DIO_enuSetPinVal+0x118>
 118:	a5 e3       	ldi	r26, 0x35	; 53
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	e5 e3       	ldi	r30, 0x35	; 53
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	48 2f       	mov	r20, r24
 124:	8b 81       	ldd	r24, Y+3	; 0x03
 126:	28 2f       	mov	r18, r24
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	00 c0       	rjmp	.+0      	; 0x130 <DIO_enuSetPinVal+0x130>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	2a 95       	dec	r18
 136:	02 f4       	brpl	.+0      	; 0x138 <DIO_enuSetPinVal+0x138>
 138:	80 95       	com	r24
 13a:	84 23       	and	r24, r20
 13c:	8c 93       	st	X, r24
 13e:	a5 e3       	ldi	r26, 0x35	; 53
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	e5 e3       	ldi	r30, 0x35	; 53
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	48 2f       	mov	r20, r24
 14a:	8c 81       	ldd	r24, Y+4	; 0x04
 14c:	28 2f       	mov	r18, r24
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	8b 81       	ldd	r24, Y+3	; 0x03
 152:	88 2f       	mov	r24, r24
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	b9 01       	movw	r22, r18
 158:	00 c0       	rjmp	.+0      	; 0x15a <DIO_enuSetPinVal+0x15a>
 15a:	66 0f       	add	r22, r22
 15c:	77 1f       	adc	r23, r23
 15e:	8a 95       	dec	r24
 160:	02 f4       	brpl	.+0      	; 0x162 <DIO_enuSetPinVal+0x162>
 162:	cb 01       	movw	r24, r22
 164:	84 2b       	or	r24, r20
 166:	8c 93       	st	X, r24
 168:	00 c0       	rjmp	.+0      	; 0x16a <DIO_enuSetPinVal+0x16a>
 16a:	a2 e3       	ldi	r26, 0x32	; 50
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	e2 e3       	ldi	r30, 0x32	; 50
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	48 2f       	mov	r20, r24
 176:	8b 81       	ldd	r24, Y+3	; 0x03
 178:	28 2f       	mov	r18, r24
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	00 c0       	rjmp	.+0      	; 0x182 <DIO_enuSetPinVal+0x182>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	2a 95       	dec	r18
 188:	02 f4       	brpl	.+0      	; 0x18a <DIO_enuSetPinVal+0x18a>
 18a:	80 95       	com	r24
 18c:	84 23       	and	r24, r20
 18e:	8c 93       	st	X, r24
 190:	a2 e3       	ldi	r26, 0x32	; 50
 192:	b0 e0       	ldi	r27, 0x00	; 0
 194:	e2 e3       	ldi	r30, 0x32	; 50
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	48 2f       	mov	r20, r24
 19c:	8c 81       	ldd	r24, Y+4	; 0x04
 19e:	28 2f       	mov	r18, r24
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	8b 81       	ldd	r24, Y+3	; 0x03
 1a4:	88 2f       	mov	r24, r24
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	b9 01       	movw	r22, r18
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <DIO_enuSetPinVal+0x1ac>
 1ac:	66 0f       	add	r22, r22
 1ae:	77 1f       	adc	r23, r23
 1b0:	8a 95       	dec	r24
 1b2:	02 f4       	brpl	.+0      	; 0x1b4 <DIO_enuSetPinVal+0x1b4>
 1b4:	cb 01       	movw	r24, r22
 1b6:	84 2b       	or	r24, r20
 1b8:	8c 93       	st	X, r24
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	89 83       	std	Y+1, r24	; 0x01
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <DIO_enuSetPinVal+0x1c0>
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	89 83       	std	Y+1, r24	; 0x01
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	26 96       	adiw	r28, 0x06	; 6
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	f8 94       	cli
 1cc:	de bf       	out	0x3e, r29	; 62
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	cd bf       	out	0x3d, r28	; 61
 1d2:	cf 91       	pop	r28
 1d4:	df 91       	pop	r29
 1d6:	08 95       	ret

Disassembly of section .text.DIO_enuGetPinVal:

00000000 <DIO_enuGetPinVal>:
	 }
			return Local_enuErrorState;


}
ES_t DIO_enuTogPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID){
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	27 97       	sbiw	r28, 0x07	; 7
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
	ES_t Local_enuErrorState = ES_NOK;
  12:	cd bf       	out	0x3d, r28	; 61

				if(Copy_u8PortID <= DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
  14:	8a 83       	std	Y+2, r24	; 0x02
  16:	6b 83       	std	Y+3, r22	; 0x03
  18:	5d 83       	std	Y+5, r21	; 0x05
  1a:	4c 83       	std	Y+4, r20	; 0x04
  1c:	19 82       	std	Y+1, r1	; 0x01
  1e:	8c 81       	ldd	r24, Y+4	; 0x04
  20:	9d 81       	ldd	r25, Y+5	; 0x05
  22:	00 97       	sbiw	r24, 0x00	; 0
				{
					switch(Copy_u8PortID)
  24:	01 f4       	brne	.+0      	; 0x26 <DIO_enuGetPinVal+0x26>
  26:	00 c0       	rjmp	.+0      	; 0x28 <DIO_enuGetPinVal+0x28>
  28:	8a 81       	ldd	r24, Y+2	; 0x02
  2a:	84 30       	cpi	r24, 0x04	; 4
  2c:	00 f0       	brcs	.+0      	; 0x2e <DIO_enuGetPinVal+0x2e>
  2e:	00 c0       	rjmp	.+0      	; 0x30 <DIO_enuGetPinVal+0x30>
  30:	8a 81       	ldd	r24, Y+2	; 0x02
  32:	28 2f       	mov	r18, r24
  34:	30 e0       	ldi	r19, 0x00	; 0
  36:	3f 83       	std	Y+7, r19	; 0x07
  38:	2e 83       	std	Y+6, r18	; 0x06
  3a:	4e 81       	ldd	r20, Y+6	; 0x06
  3c:	5f 81       	ldd	r21, Y+7	; 0x07
  3e:	41 30       	cpi	r20, 0x01	; 1
  40:	51 05       	cpc	r21, r1
  42:	01 f0       	breq	.+0      	; 0x44 <DIO_enuGetPinVal+0x44>
  44:	8e 81       	ldd	r24, Y+6	; 0x06
  46:	9f 81       	ldd	r25, Y+7	; 0x07
  48:	82 30       	cpi	r24, 0x02	; 2
  4a:	91 05       	cpc	r25, r1
  4c:	04 f4       	brge	.+0      	; 0x4e <DIO_enuGetPinVal+0x4e>
  4e:	2e 81       	ldd	r18, Y+6	; 0x06
  50:	3f 81       	ldd	r19, Y+7	; 0x07
  52:	21 15       	cp	r18, r1
  54:	31 05       	cpc	r19, r1
  56:	01 f0       	breq	.+0      	; 0x58 <DIO_enuGetPinVal+0x58>
  58:	00 c0       	rjmp	.+0      	; 0x5a <DIO_enuGetPinVal+0x5a>
  5a:	4e 81       	ldd	r20, Y+6	; 0x06
  5c:	5f 81       	ldd	r21, Y+7	; 0x07
  5e:	42 30       	cpi	r20, 0x02	; 2
  60:	51 05       	cpc	r21, r1
					{
						case DIO_PORTA:
						 PORTA^=(1 << Copy_u8PinID);
  62:	01 f0       	breq	.+0      	; 0x64 <DIO_enuGetPinVal+0x64>
  64:	8e 81       	ldd	r24, Y+6	; 0x06
  66:	9f 81       	ldd	r25, Y+7	; 0x07
  68:	83 30       	cpi	r24, 0x03	; 3
  6a:	91 05       	cpc	r25, r1
  6c:	01 f4       	brne	.+0      	; 0x6e <DIO_enuGetPinVal+0x6e>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <DIO_enuGetPinVal+0x70>
  70:	00 c0       	rjmp	.+0      	; 0x72 <DIO_enuGetPinVal+0x72>
  72:	e9 e3       	ldi	r30, 0x39	; 57
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	80 81       	ld	r24, Z
  78:	28 2f       	mov	r18, r24
  7a:	30 e0       	ldi	r19, 0x00	; 0
  7c:	8b 81       	ldd	r24, Y+3	; 0x03
  7e:	88 2f       	mov	r24, r24
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	a9 01       	movw	r20, r18
  84:	00 c0       	rjmp	.+0      	; 0x86 <DIO_enuGetPinVal+0x86>
  86:	55 95       	asr	r21
  88:	47 95       	ror	r20
						break;

						case DIO_PORTB:
						 PORTB^=(1 << Copy_u8PinID);
  8a:	8a 95       	dec	r24
  8c:	02 f4       	brpl	.+0      	; 0x8e <DIO_enuGetPinVal+0x8e>
  8e:	ca 01       	movw	r24, r20
  90:	81 70       	andi	r24, 0x01	; 1
  92:	ec 81       	ldd	r30, Y+4	; 0x04
  94:	fd 81       	ldd	r31, Y+5	; 0x05
  96:	80 83       	st	Z, r24
  98:	00 c0       	rjmp	.+0      	; 0x9a <DIO_enuGetPinVal+0x9a>
  9a:	e6 e3       	ldi	r30, 0x36	; 54
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	28 2f       	mov	r18, r24
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	8b 81       	ldd	r24, Y+3	; 0x03
  a6:	88 2f       	mov	r24, r24
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	a9 01       	movw	r20, r18
  ac:	00 c0       	rjmp	.+0      	; 0xae <DIO_enuGetPinVal+0xae>
  ae:	55 95       	asr	r21
  b0:	47 95       	ror	r20
						break;

						case DIO_PORTC:
						 PORTC^=(1 << Copy_u8PinID);
  b2:	8a 95       	dec	r24
  b4:	02 f4       	brpl	.+0      	; 0xb6 <DIO_enuGetPinVal+0xb6>
  b6:	ca 01       	movw	r24, r20
  b8:	81 70       	andi	r24, 0x01	; 1
  ba:	ec 81       	ldd	r30, Y+4	; 0x04
  bc:	fd 81       	ldd	r31, Y+5	; 0x05
  be:	80 83       	st	Z, r24
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <DIO_enuGetPinVal+0xc2>
  c2:	e3 e3       	ldi	r30, 0x33	; 51
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	28 2f       	mov	r18, r24
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	8b 81       	ldd	r24, Y+3	; 0x03
  ce:	88 2f       	mov	r24, r24
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	a9 01       	movw	r20, r18
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <DIO_enuGetPinVal+0xd6>
  d6:	55 95       	asr	r21
  d8:	47 95       	ror	r20
						break;

						case DIO_PORTD:
						 PORTD^=(1 << Copy_u8PinID);
  da:	8a 95       	dec	r24
  dc:	02 f4       	brpl	.+0      	; 0xde <DIO_enuGetPinVal+0xde>
  de:	ca 01       	movw	r24, r20
  e0:	81 70       	andi	r24, 0x01	; 1
  e2:	ec 81       	ldd	r30, Y+4	; 0x04
  e4:	fd 81       	ldd	r31, Y+5	; 0x05
  e6:	80 83       	st	Z, r24
  e8:	00 c0       	rjmp	.+0      	; 0xea <DIO_enuGetPinVal+0xea>
  ea:	e0 e3       	ldi	r30, 0x30	; 48
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	28 2f       	mov	r18, r24
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	88 2f       	mov	r24, r24
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	a9 01       	movw	r20, r18
  fc:	00 c0       	rjmp	.+0      	; 0xfe <DIO_enuGetPinVal+0xfe>
  fe:	55 95       	asr	r21
						break;
					}
					Local_enuErrorState = ES_OK;
 100:	47 95       	ror	r20
 102:	8a 95       	dec	r24
 104:	02 f4       	brpl	.+0      	; 0x106 <DIO_enuGetPinVal+0x106>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
 106:	ca 01       	movw	r24, r20
 108:	81 70       	andi	r24, 0x01	; 1
				}

				return Local_enuErrorState;
 10a:	ec 81       	ldd	r30, Y+4	; 0x04

	}
 10c:	fd 81       	ldd	r31, Y+5	; 0x05
 10e:	80 83       	st	Z, r24
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	89 83       	std	Y+1, r24	; 0x01
 114:	00 c0       	rjmp	.+0      	; 0x116 <DIO_enuGetPinVal+0x116>
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	89 83       	std	Y+1, r24	; 0x01
 11a:	00 c0       	rjmp	.+0      	; 0x11c <DIO_enuGetPinVal+0x11c>
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	89 83       	std	Y+1, r24	; 0x01
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	27 96       	adiw	r28, 0x07	; 7
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	f8 94       	cli
 128:	de bf       	out	0x3e, r29	; 62
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	cd bf       	out	0x3d, r28	; 61
 12e:	cf 91       	pop	r28
 130:	df 91       	pop	r29
 132:	08 95       	ret

Disassembly of section .text.DIO_enuTogPinVal:

00000000 <DIO_enuTogPinVal>:
	 }
			return Local_enuErrorState;


}
ES_t DIO_enuTogPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID){
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <DIO_enuTogPinVal+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <DIO_enuTogPinVal+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	8a 83       	std	Y+2, r24	; 0x02
  10:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
  12:	19 82       	std	Y+1, r1	; 0x01

				if(Copy_u8PortID <= DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
  14:	8a 81       	ldd	r24, Y+2	; 0x02
  16:	84 30       	cpi	r24, 0x04	; 4
  18:	00 f0       	brcs	.+0      	; 0x1a <DIO_enuTogPinVal+0x1a>
  1a:	00 c0       	rjmp	.+0      	; 0x1c <DIO_enuTogPinVal+0x1c>
  1c:	8b 81       	ldd	r24, Y+3	; 0x03
  1e:	88 30       	cpi	r24, 0x08	; 8
  20:	00 f0       	brcs	.+0      	; 0x22 <DIO_enuTogPinVal+0x22>
  22:	00 c0       	rjmp	.+0      	; 0x24 <DIO_enuTogPinVal+0x24>
				{
					switch(Copy_u8PortID)
  24:	8a 81       	ldd	r24, Y+2	; 0x02
  26:	28 2f       	mov	r18, r24
  28:	30 e0       	ldi	r19, 0x00	; 0
  2a:	3d 83       	std	Y+5, r19	; 0x05
  2c:	2c 83       	std	Y+4, r18	; 0x04
  2e:	8c 81       	ldd	r24, Y+4	; 0x04
  30:	9d 81       	ldd	r25, Y+5	; 0x05
  32:	81 30       	cpi	r24, 0x01	; 1
  34:	91 05       	cpc	r25, r1
  36:	01 f0       	breq	.+0      	; 0x38 <DIO_enuTogPinVal+0x38>
  38:	2c 81       	ldd	r18, Y+4	; 0x04
  3a:	3d 81       	ldd	r19, Y+5	; 0x05
  3c:	22 30       	cpi	r18, 0x02	; 2
  3e:	31 05       	cpc	r19, r1
  40:	04 f4       	brge	.+0      	; 0x42 <DIO_enuTogPinVal+0x42>
  42:	8c 81       	ldd	r24, Y+4	; 0x04
  44:	9d 81       	ldd	r25, Y+5	; 0x05
  46:	00 97       	sbiw	r24, 0x00	; 0
  48:	01 f0       	breq	.+0      	; 0x4a <DIO_enuTogPinVal+0x4a>
  4a:	00 c0       	rjmp	.+0      	; 0x4c <DIO_enuTogPinVal+0x4c>
  4c:	2c 81       	ldd	r18, Y+4	; 0x04
  4e:	3d 81       	ldd	r19, Y+5	; 0x05
  50:	22 30       	cpi	r18, 0x02	; 2
  52:	31 05       	cpc	r19, r1
  54:	01 f0       	breq	.+0      	; 0x56 <DIO_enuTogPinVal+0x56>
  56:	8c 81       	ldd	r24, Y+4	; 0x04
  58:	9d 81       	ldd	r25, Y+5	; 0x05
  5a:	83 30       	cpi	r24, 0x03	; 3
  5c:	91 05       	cpc	r25, r1
  5e:	01 f0       	breq	.+0      	; 0x60 <DIO_enuTogPinVal+0x60>
  60:	00 c0       	rjmp	.+0      	; 0x62 <DIO_enuTogPinVal+0x62>
					{
						case DIO_PORTA:
						 PORTA^=(1 << Copy_u8PinID);
  62:	ab e3       	ldi	r26, 0x3B	; 59
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	eb e3       	ldi	r30, 0x3B	; 59
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	80 81       	ld	r24, Z
  6c:	48 2f       	mov	r20, r24
  6e:	8b 81       	ldd	r24, Y+3	; 0x03
  70:	28 2f       	mov	r18, r24
  72:	30 e0       	ldi	r19, 0x00	; 0
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	02 2e       	mov	r0, r18
  7a:	00 c0       	rjmp	.+0      	; 0x7c <DIO_enuTogPinVal+0x7c>
  7c:	88 0f       	add	r24, r24
  7e:	99 1f       	adc	r25, r25
  80:	0a 94       	dec	r0
  82:	02 f4       	brpl	.+0      	; 0x84 <DIO_enuTogPinVal+0x84>
  84:	84 27       	eor	r24, r20
  86:	8c 93       	st	X, r24
  88:	00 c0       	rjmp	.+0      	; 0x8a <DIO_enuTogPinVal+0x8a>
						break;

						case DIO_PORTB:
						 PORTB^=(1 << Copy_u8PinID);
  8a:	a8 e3       	ldi	r26, 0x38	; 56
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	e8 e3       	ldi	r30, 0x38	; 56
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	48 2f       	mov	r20, r24
  96:	8b 81       	ldd	r24, Y+3	; 0x03
  98:	28 2f       	mov	r18, r24
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	02 2e       	mov	r0, r18
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <DIO_enuTogPinVal+0xa4>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	0a 94       	dec	r0
  aa:	02 f4       	brpl	.+0      	; 0xac <DIO_enuTogPinVal+0xac>
  ac:	84 27       	eor	r24, r20
  ae:	8c 93       	st	X, r24
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <DIO_enuTogPinVal+0xb2>
						break;

						case DIO_PORTC:
						 PORTC^=(1 << Copy_u8PinID);
  b2:	a5 e3       	ldi	r26, 0x35	; 53
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	e5 e3       	ldi	r30, 0x35	; 53
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	48 2f       	mov	r20, r24
  be:	8b 81       	ldd	r24, Y+3	; 0x03
  c0:	28 2f       	mov	r18, r24
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 2e       	mov	r0, r18
  ca:	00 c0       	rjmp	.+0      	; 0xcc <DIO_enuTogPinVal+0xcc>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	0a 94       	dec	r0
  d2:	02 f4       	brpl	.+0      	; 0xd4 <DIO_enuTogPinVal+0xd4>
  d4:	84 27       	eor	r24, r20
  d6:	8c 93       	st	X, r24
  d8:	00 c0       	rjmp	.+0      	; 0xda <DIO_enuTogPinVal+0xda>
						break;

						case DIO_PORTD:
						 PORTD^=(1 << Copy_u8PinID);
  da:	a2 e3       	ldi	r26, 0x32	; 50
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	e2 e3       	ldi	r30, 0x32	; 50
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	48 2f       	mov	r20, r24
  e6:	8b 81       	ldd	r24, Y+3	; 0x03
  e8:	28 2f       	mov	r18, r24
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 2e       	mov	r0, r18
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <DIO_enuTogPinVal+0xf4>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	0a 94       	dec	r0
  fa:	02 f4       	brpl	.+0      	; 0xfc <DIO_enuTogPinVal+0xfc>
  fc:	84 27       	eor	r24, r20
  fe:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorState = ES_OK;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	89 83       	std	Y+1, r24	; 0x01
 104:	00 c0       	rjmp	.+0      	; 0x106 <DIO_enuTogPinVal+0x106>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	89 83       	std	Y+1, r24	; 0x01
				}

				return Local_enuErrorState;
 10a:	89 81       	ldd	r24, Y+1	; 0x01

	}
 10c:	0f 90       	pop	r0
 10e:	0f 90       	pop	r0
 110:	0f 90       	pop	r0
 112:	0f 90       	pop	r0
 114:	0f 90       	pop	r0
 116:	cf 91       	pop	r28
 118:	df 91       	pop	r29
 11a:	08 95       	ret

LED_config.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000001c8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000420  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .data.LED_AstrLedConfig 0000000c  00000000  00000000  0000061c  2**0
                  CONTENTS, ALLOC, LOAD, DATA

LED_prog.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000004b0  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000004d5  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.LED_enuInit 00000280  00000000  00000000  000009b9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.LED_enuTurnON 00000076  00000000  00000000  00000c39  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.LED_enuTurnOFF 00000076  00000000  00000000  00000caf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.LED_enuInit:

00000000 <LED_enuInit>:
#include "LED_priv.h"

#include "../MCAL/DIO/DIO_int.h"

ES_t LED_enuInit(LED_t * Copy_pstrLedConfig)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <LED_enuInit+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <LED_enuInit+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	9c 83       	std	Y+4, r25	; 0x04
  10:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
  12:	1a 82       	std	Y+2, r1	; 0x02

	if (Copy_pstrLedConfig != NULL)
  14:	8b 81       	ldd	r24, Y+3	; 0x03
  16:	9c 81       	ldd	r25, Y+4	; 0x04
  18:	00 97       	sbiw	r24, 0x00	; 0
  1a:	01 f4       	brne	.+0      	; 0x1c <LED_enuInit+0x1c>
  1c:	00 c0       	rjmp	.+0      	; 0x1e <LED_enuInit+0x1e>
	{
		u8 Local_enuIterator=0;
  1e:	19 82       	std	Y+1, r1	; 0x01
		for (Local_enuIterator=0; Local_enuIterator < LED_NUM ; Local_enuIterator++)
  20:	19 82       	std	Y+1, r1	; 0x01
  22:	00 c0       	rjmp	.+0      	; 0x24 <LED_enuInit+0x24>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8OUTPUT );
  24:	89 81       	ldd	r24, Y+1	; 0x01
  26:	88 2f       	mov	r24, r24
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	9c 01       	movw	r18, r24
  2c:	22 0f       	add	r18, r18
  2e:	33 1f       	adc	r19, r19
  30:	22 0f       	add	r18, r18
  32:	33 1f       	adc	r19, r19
  34:	8b 81       	ldd	r24, Y+3	; 0x03
  36:	9c 81       	ldd	r25, Y+4	; 0x04
  38:	fc 01       	movw	r30, r24
  3a:	e2 0f       	add	r30, r18
  3c:	f3 1f       	adc	r31, r19
  3e:	40 81       	ld	r20, Z
  40:	89 81       	ldd	r24, Y+1	; 0x01
  42:	88 2f       	mov	r24, r24
  44:	90 e0       	ldi	r25, 0x00	; 0
  46:	9c 01       	movw	r18, r24
  48:	22 0f       	add	r18, r18
  4a:	33 1f       	adc	r19, r19
  4c:	22 0f       	add	r18, r18
  4e:	33 1f       	adc	r19, r19
  50:	8b 81       	ldd	r24, Y+3	; 0x03
  52:	9c 81       	ldd	r25, Y+4	; 0x04
  54:	fc 01       	movw	r30, r24
  56:	e2 0f       	add	r30, r18
  58:	f3 1f       	adc	r31, r19
  5a:	91 81       	ldd	r25, Z+1	; 0x01
  5c:	84 2f       	mov	r24, r20
  5e:	69 2f       	mov	r22, r25
  60:	41 e0       	ldi	r20, 0x01	; 1
  62:	0e 94 00 00 	call	0	; 0x0 <LED_enuInit>
  66:	8a 83       	std	Y+2, r24	; 0x02
			if (Copy_pstrLedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
  68:	89 81       	ldd	r24, Y+1	; 0x01
  6a:	88 2f       	mov	r24, r24
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	9c 01       	movw	r18, r24
  70:	22 0f       	add	r18, r18
  72:	33 1f       	adc	r19, r19
  74:	22 0f       	add	r18, r18
  76:	33 1f       	adc	r19, r19
  78:	8b 81       	ldd	r24, Y+3	; 0x03
  7a:	9c 81       	ldd	r25, Y+4	; 0x04
  7c:	fc 01       	movw	r30, r24
  7e:	e2 0f       	add	r30, r18
  80:	f3 1f       	adc	r31, r19
  82:	82 81       	ldd	r24, Z+2	; 0x02
  84:	82 30       	cpi	r24, 0x02	; 2
  86:	01 f0       	breq	.+0      	; 0x88 <LED_enuInit+0x88>
  88:	00 c0       	rjmp	.+0      	; 0x8a <LED_enuInit+0x8a>
			{
				if (Copy_pstrLedConfig[Local_enuIterator].LED_u8Status == LED_ON)
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	88 2f       	mov	r24, r24
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	9c 01       	movw	r18, r24
  92:	22 0f       	add	r18, r18
  94:	33 1f       	adc	r19, r19
  96:	22 0f       	add	r18, r18
  98:	33 1f       	adc	r19, r19
  9a:	8b 81       	ldd	r24, Y+3	; 0x03
  9c:	9c 81       	ldd	r25, Y+4	; 0x04
  9e:	fc 01       	movw	r30, r24
  a0:	e2 0f       	add	r30, r18
  a2:	f3 1f       	adc	r31, r19
  a4:	83 81       	ldd	r24, Z+3	; 0x03
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	01 f4       	brne	.+0      	; 0xaa <LED_enuInit+0xaa>
				{
					Local_enuErrorState =DIO_enuSetPinVal(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8LOW);
  aa:	89 81       	ldd	r24, Y+1	; 0x01
  ac:	88 2f       	mov	r24, r24
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	9c 01       	movw	r18, r24
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	22 0f       	add	r18, r18
  b8:	33 1f       	adc	r19, r19
  ba:	8b 81       	ldd	r24, Y+3	; 0x03
  bc:	9c 81       	ldd	r25, Y+4	; 0x04
  be:	fc 01       	movw	r30, r24
  c0:	e2 0f       	add	r30, r18
  c2:	f3 1f       	adc	r31, r19
  c4:	40 81       	ld	r20, Z
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	88 2f       	mov	r24, r24
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	9c 01       	movw	r18, r24
  ce:	22 0f       	add	r18, r18
  d0:	33 1f       	adc	r19, r19
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	8b 81       	ldd	r24, Y+3	; 0x03
  d8:	9c 81       	ldd	r25, Y+4	; 0x04
  da:	fc 01       	movw	r30, r24
  dc:	e2 0f       	add	r30, r18
  de:	f3 1f       	adc	r31, r19
  e0:	91 81       	ldd	r25, Z+1	; 0x01
  e2:	84 2f       	mov	r24, r20
  e4:	69 2f       	mov	r22, r25
  e6:	40 e0       	ldi	r20, 0x00	; 0
  e8:	0e 94 00 00 	call	0	; 0x0 <LED_enuInit>
  ec:	8a 83       	std	Y+2, r24	; 0x02
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LED_enuInit+0xf0>
				}
				else if(Copy_pstrLedConfig[Local_enuIterator].LED_u8Status == LED_OFF)
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	88 2f       	mov	r24, r24
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	9c 01       	movw	r18, r24
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	22 0f       	add	r18, r18
  fe:	33 1f       	adc	r19, r19
 100:	8b 81       	ldd	r24, Y+3	; 0x03
 102:	9c 81       	ldd	r25, Y+4	; 0x04
 104:	fc 01       	movw	r30, r24
 106:	e2 0f       	add	r30, r18
 108:	f3 1f       	adc	r31, r19
 10a:	83 81       	ldd	r24, Z+3	; 0x03
 10c:	88 23       	and	r24, r24
 10e:	01 f4       	brne	.+0      	; 0x110 <LED_enuInit+0x110>
				{
					Local_enuErrorState =DIO_enuSetPinVal(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8HIGH);
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	88 2f       	mov	r24, r24
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	9c 01       	movw	r18, r24
 118:	22 0f       	add	r18, r18
 11a:	33 1f       	adc	r19, r19
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	8b 81       	ldd	r24, Y+3	; 0x03
 122:	9c 81       	ldd	r25, Y+4	; 0x04
 124:	fc 01       	movw	r30, r24
 126:	e2 0f       	add	r30, r18
 128:	f3 1f       	adc	r31, r19
 12a:	40 81       	ld	r20, Z
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	88 2f       	mov	r24, r24
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	9c 01       	movw	r18, r24
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	22 0f       	add	r18, r18
 13a:	33 1f       	adc	r19, r19
 13c:	8b 81       	ldd	r24, Y+3	; 0x03
 13e:	9c 81       	ldd	r25, Y+4	; 0x04
 140:	fc 01       	movw	r30, r24
 142:	e2 0f       	add	r30, r18
 144:	f3 1f       	adc	r31, r19
 146:	91 81       	ldd	r25, Z+1	; 0x01
 148:	84 2f       	mov	r24, r20
 14a:	69 2f       	mov	r22, r25
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	0e 94 00 00 	call	0	; 0x0 <LED_enuInit>
 152:	8a 83       	std	Y+2, r24	; 0x02
 154:	00 c0       	rjmp	.+0      	; 0x156 <LED_enuInit+0x156>
				}
				else
				{
					return ES_OUT_OF_RANGE;
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	8d 83       	std	Y+5, r24	; 0x05
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LED_enuInit+0x15c>
				}
			}
			else if (Copy_pstrLedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	88 2f       	mov	r24, r24
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	9c 01       	movw	r18, r24
 164:	22 0f       	add	r18, r18
 166:	33 1f       	adc	r19, r19
 168:	22 0f       	add	r18, r18
 16a:	33 1f       	adc	r19, r19
 16c:	8b 81       	ldd	r24, Y+3	; 0x03
 16e:	9c 81       	ldd	r25, Y+4	; 0x04
 170:	fc 01       	movw	r30, r24
 172:	e2 0f       	add	r30, r18
 174:	f3 1f       	adc	r31, r19
 176:	82 81       	ldd	r24, Z+2	; 0x02
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	01 f0       	breq	.+0      	; 0x17c <LED_enuInit+0x17c>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LED_enuInit+0x17e>
			{
				if (Copy_pstrLedConfig[Local_enuIterator].LED_u8Status == LED_ON)
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	88 2f       	mov	r24, r24
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	9c 01       	movw	r18, r24
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
 18a:	22 0f       	add	r18, r18
 18c:	33 1f       	adc	r19, r19
 18e:	8b 81       	ldd	r24, Y+3	; 0x03
 190:	9c 81       	ldd	r25, Y+4	; 0x04
 192:	fc 01       	movw	r30, r24
 194:	e2 0f       	add	r30, r18
 196:	f3 1f       	adc	r31, r19
 198:	83 81       	ldd	r24, Z+3	; 0x03
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	01 f4       	brne	.+0      	; 0x19e <LED_enuInit+0x19e>
				{
					Local_enuErrorState =DIO_enuSetPinVal(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8HIGH);
 19e:	89 81       	ldd	r24, Y+1	; 0x01
 1a0:	88 2f       	mov	r24, r24
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	9c 01       	movw	r18, r24
 1a6:	22 0f       	add	r18, r18
 1a8:	33 1f       	adc	r19, r19
 1aa:	22 0f       	add	r18, r18
 1ac:	33 1f       	adc	r19, r19
 1ae:	8b 81       	ldd	r24, Y+3	; 0x03
 1b0:	9c 81       	ldd	r25, Y+4	; 0x04
 1b2:	fc 01       	movw	r30, r24
 1b4:	e2 0f       	add	r30, r18
 1b6:	f3 1f       	adc	r31, r19
 1b8:	40 81       	ld	r20, Z
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	88 2f       	mov	r24, r24
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	9c 01       	movw	r18, r24
 1c2:	22 0f       	add	r18, r18
 1c4:	33 1f       	adc	r19, r19
 1c6:	22 0f       	add	r18, r18
 1c8:	33 1f       	adc	r19, r19
 1ca:	8b 81       	ldd	r24, Y+3	; 0x03
 1cc:	9c 81       	ldd	r25, Y+4	; 0x04
 1ce:	fc 01       	movw	r30, r24
 1d0:	e2 0f       	add	r30, r18
 1d2:	f3 1f       	adc	r31, r19
 1d4:	91 81       	ldd	r25, Z+1	; 0x01
 1d6:	84 2f       	mov	r24, r20
 1d8:	69 2f       	mov	r22, r25
 1da:	41 e0       	ldi	r20, 0x01	; 1
 1dc:	0e 94 00 00 	call	0	; 0x0 <LED_enuInit>
 1e0:	8a 83       	std	Y+2, r24	; 0x02
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <LED_enuInit+0x1e4>
				}
				else if(Copy_pstrLedConfig[Local_enuIterator].LED_u8Status == LED_OFF)
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
 1e6:	88 2f       	mov	r24, r24
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	9c 01       	movw	r18, r24
 1ec:	22 0f       	add	r18, r18
 1ee:	33 1f       	adc	r19, r19
 1f0:	22 0f       	add	r18, r18
 1f2:	33 1f       	adc	r19, r19
 1f4:	8b 81       	ldd	r24, Y+3	; 0x03
 1f6:	9c 81       	ldd	r25, Y+4	; 0x04
 1f8:	fc 01       	movw	r30, r24
 1fa:	e2 0f       	add	r30, r18
 1fc:	f3 1f       	adc	r31, r19
 1fe:	83 81       	ldd	r24, Z+3	; 0x03
 200:	88 23       	and	r24, r24
 202:	01 f4       	brne	.+0      	; 0x204 <LED_enuInit+0x204>
				{
					Local_enuErrorState =DIO_enuSetPinVal(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8LOW);
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	88 2f       	mov	r24, r24
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	9c 01       	movw	r18, r24
 20c:	22 0f       	add	r18, r18
 20e:	33 1f       	adc	r19, r19
 210:	22 0f       	add	r18, r18
 212:	33 1f       	adc	r19, r19
 214:	8b 81       	ldd	r24, Y+3	; 0x03
 216:	9c 81       	ldd	r25, Y+4	; 0x04
 218:	fc 01       	movw	r30, r24
 21a:	e2 0f       	add	r30, r18
 21c:	f3 1f       	adc	r31, r19
 21e:	40 81       	ld	r20, Z
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	88 2f       	mov	r24, r24
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	9c 01       	movw	r18, r24
 228:	22 0f       	add	r18, r18
 22a:	33 1f       	adc	r19, r19
 22c:	22 0f       	add	r18, r18
 22e:	33 1f       	adc	r19, r19
 230:	8b 81       	ldd	r24, Y+3	; 0x03
 232:	9c 81       	ldd	r25, Y+4	; 0x04
 234:	fc 01       	movw	r30, r24
 236:	e2 0f       	add	r30, r18
 238:	f3 1f       	adc	r31, r19
 23a:	91 81       	ldd	r25, Z+1	; 0x01
 23c:	84 2f       	mov	r24, r20
 23e:	69 2f       	mov	r22, r25
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	0e 94 00 00 	call	0	; 0x0 <LED_enuInit>
 246:	8a 83       	std	Y+2, r24	; 0x02
 248:	00 c0       	rjmp	.+0      	; 0x24a <LED_enuInit+0x24a>
				}
				else
				{
					return ES_OUT_OF_RANGE;
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	8d 83       	std	Y+5, r24	; 0x05
 24e:	00 c0       	rjmp	.+0      	; 0x250 <LED_enuInit+0x250>
				}
			}
			else
			{
				return ES_OUT_OF_RANGE;
 250:	83 e0       	ldi	r24, 0x03	; 3
 252:	8d 83       	std	Y+5, r24	; 0x05
 254:	00 c0       	rjmp	.+0      	; 0x256 <LED_enuInit+0x256>
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_pstrLedConfig != NULL)
	{
		u8 Local_enuIterator=0;
		for (Local_enuIterator=0; Local_enuIterator < LED_NUM ; Local_enuIterator++)
 256:	89 81       	ldd	r24, Y+1	; 0x01
 258:	8f 5f       	subi	r24, 0xFF	; 255
 25a:	89 83       	std	Y+1, r24	; 0x01
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	83 30       	cpi	r24, 0x03	; 3
 260:	00 f4       	brcc	.+0      	; 0x262 <LED_enuInit+0x262>
 262:	00 c0       	rjmp	.+0      	; 0x264 <LED_enuInit+0x264>
 264:	00 c0       	rjmp	.+0      	; 0x266 <LED_enuInit+0x266>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
 26a:	8a 81       	ldd	r24, Y+2	; 0x02
 26c:	8d 83       	std	Y+5, r24	; 0x05
 26e:	8d 81       	ldd	r24, Y+5	; 0x05
}
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	cf 91       	pop	r28
 27c:	df 91       	pop	r29
 27e:	08 95       	ret

Disassembly of section .text.LED_enuTurnON:

00000000 <LED_enuTurnON>:
#include "LED_priv.h"

#include "../MCAL/DIO/DIO_int.h"

ES_t LED_enuInit(LED_t * Copy_pstrLedConfig)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <LED_enuTurnON+0x6>
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9b 83       	std	Y+3, r25	; 0x03
   e:	8a 83       	std	Y+2, r24	; 0x02
  10:	19 82       	std	Y+1, r1	; 0x01
	ES_t Local_enuErrorState = ES_NOK;
  12:	8a 81       	ldd	r24, Y+2	; 0x02

	if (Copy_pstrLedConfig != NULL)
  14:	9b 81       	ldd	r25, Y+3	; 0x03
  16:	00 97       	sbiw	r24, 0x00	; 0
  18:	01 f0       	breq	.+0      	; 0x1a <LED_enuTurnON+0x1a>
  1a:	ea 81       	ldd	r30, Y+2	; 0x02
  1c:	fb 81       	ldd	r31, Y+3	; 0x03
	{
		u8 Local_enuIterator=0;
  1e:	82 81       	ldd	r24, Z+2	; 0x02
		for (Local_enuIterator=0; Local_enuIterator < LED_NUM ; Local_enuIterator++)
  20:	82 30       	cpi	r24, 0x02	; 2
  22:	01 f4       	brne	.+0      	; 0x24 <LED_enuTurnON+0x24>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8OUTPUT );
  24:	ea 81       	ldd	r30, Y+2	; 0x02
  26:	fb 81       	ldd	r31, Y+3	; 0x03
  28:	80 81       	ld	r24, Z
  2a:	ea 81       	ldd	r30, Y+2	; 0x02
  2c:	fb 81       	ldd	r31, Y+3	; 0x03
  2e:	91 81       	ldd	r25, Z+1	; 0x01
  30:	69 2f       	mov	r22, r25
  32:	40 e0       	ldi	r20, 0x00	; 0
  34:	0e 94 00 00 	call	0	; 0x0 <LED_enuTurnON>
  38:	89 83       	std	Y+1, r24	; 0x01
  3a:	00 c0       	rjmp	.+0      	; 0x3c <LED_enuTurnON+0x3c>
  3c:	ea 81       	ldd	r30, Y+2	; 0x02
  3e:	fb 81       	ldd	r31, Y+3	; 0x03
  40:	82 81       	ldd	r24, Z+2	; 0x02
  42:	83 30       	cpi	r24, 0x03	; 3
  44:	01 f4       	brne	.+0      	; 0x46 <LED_enuTurnON+0x46>
  46:	ea 81       	ldd	r30, Y+2	; 0x02
  48:	fb 81       	ldd	r31, Y+3	; 0x03
  4a:	80 81       	ld	r24, Z
  4c:	ea 81       	ldd	r30, Y+2	; 0x02
  4e:	fb 81       	ldd	r31, Y+3	; 0x03
  50:	91 81       	ldd	r25, Z+1	; 0x01
  52:	69 2f       	mov	r22, r25
  54:	41 e0       	ldi	r20, 0x01	; 1
  56:	0e 94 00 00 	call	0	; 0x0 <LED_enuTurnON>
  5a:	89 83       	std	Y+1, r24	; 0x01
  5c:	00 c0       	rjmp	.+0      	; 0x5e <LED_enuTurnON+0x5e>
  5e:	83 e0       	ldi	r24, 0x03	; 3
  60:	89 83       	std	Y+1, r24	; 0x01
  62:	00 c0       	rjmp	.+0      	; 0x64 <LED_enuTurnON+0x64>
  64:	82 e0       	ldi	r24, 0x02	; 2
  66:	89 83       	std	Y+1, r24	; 0x01
			if (Copy_pstrLedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
  68:	89 81       	ldd	r24, Y+1	; 0x01
  6a:	0f 90       	pop	r0
  6c:	0f 90       	pop	r0
  6e:	0f 90       	pop	r0
  70:	cf 91       	pop	r28
  72:	df 91       	pop	r29
  74:	08 95       	ret

Disassembly of section .text.LED_enuTurnOFF:

00000000 <LED_enuTurnOFF>:
#include "LED_priv.h"

#include "../MCAL/DIO/DIO_int.h"

ES_t LED_enuInit(LED_t * Copy_pstrLedConfig)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <LED_enuTurnOFF+0x6>
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	9b 83       	std	Y+3, r25	; 0x03
   e:	8a 83       	std	Y+2, r24	; 0x02
  10:	19 82       	std	Y+1, r1	; 0x01
	ES_t Local_enuErrorState = ES_NOK;
  12:	8a 81       	ldd	r24, Y+2	; 0x02

	if (Copy_pstrLedConfig != NULL)
  14:	9b 81       	ldd	r25, Y+3	; 0x03
  16:	00 97       	sbiw	r24, 0x00	; 0
  18:	01 f0       	breq	.+0      	; 0x1a <LED_enuTurnOFF+0x1a>
  1a:	ea 81       	ldd	r30, Y+2	; 0x02
  1c:	fb 81       	ldd	r31, Y+3	; 0x03
	{
		u8 Local_enuIterator=0;
  1e:	82 81       	ldd	r24, Z+2	; 0x02
		for (Local_enuIterator=0; Local_enuIterator < LED_NUM ; Local_enuIterator++)
  20:	82 30       	cpi	r24, 0x02	; 2
  22:	01 f4       	brne	.+0      	; 0x24 <LED_enuTurnOFF+0x24>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8OUTPUT );
  24:	ea 81       	ldd	r30, Y+2	; 0x02
  26:	fb 81       	ldd	r31, Y+3	; 0x03
  28:	80 81       	ld	r24, Z
  2a:	ea 81       	ldd	r30, Y+2	; 0x02
  2c:	fb 81       	ldd	r31, Y+3	; 0x03
  2e:	91 81       	ldd	r25, Z+1	; 0x01
  30:	69 2f       	mov	r22, r25
  32:	41 e0       	ldi	r20, 0x01	; 1
  34:	0e 94 00 00 	call	0	; 0x0 <LED_enuTurnOFF>
  38:	89 83       	std	Y+1, r24	; 0x01
  3a:	00 c0       	rjmp	.+0      	; 0x3c <LED_enuTurnOFF+0x3c>
  3c:	ea 81       	ldd	r30, Y+2	; 0x02
  3e:	fb 81       	ldd	r31, Y+3	; 0x03
  40:	82 81       	ldd	r24, Z+2	; 0x02
  42:	83 30       	cpi	r24, 0x03	; 3
  44:	01 f4       	brne	.+0      	; 0x46 <LED_enuTurnOFF+0x46>
  46:	ea 81       	ldd	r30, Y+2	; 0x02
  48:	fb 81       	ldd	r31, Y+3	; 0x03
  4a:	80 81       	ld	r24, Z
  4c:	ea 81       	ldd	r30, Y+2	; 0x02
  4e:	fb 81       	ldd	r31, Y+3	; 0x03
  50:	91 81       	ldd	r25, Z+1	; 0x01
  52:	69 2f       	mov	r22, r25
  54:	40 e0       	ldi	r20, 0x00	; 0
  56:	0e 94 00 00 	call	0	; 0x0 <LED_enuTurnOFF>
  5a:	89 83       	std	Y+1, r24	; 0x01
  5c:	00 c0       	rjmp	.+0      	; 0x5e <LED_enuTurnOFF+0x5e>
  5e:	83 e0       	ldi	r24, 0x03	; 3
  60:	89 83       	std	Y+1, r24	; 0x01
  62:	00 c0       	rjmp	.+0      	; 0x64 <LED_enuTurnOFF+0x64>
  64:	82 e0       	ldi	r24, 0x02	; 2
  66:	89 83       	std	Y+1, r24	; 0x01
			if (Copy_pstrLedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
  68:	89 81       	ldd	r24, Y+1	; 0x01
  6a:	0f 90       	pop	r0
  6c:	0f 90       	pop	r0
  6e:	0f 90       	pop	r0
  70:	cf 91       	pop	r28
  72:	df 91       	pop	r29
  74:	08 95       	ret

App.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000004c8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000050c  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .bss.GlobalCounter 00000002  00000000  00000000  00000a08  2**0
                  ALLOC
  6 .data.state   00000002  00000000  00000000  00000a08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .text.APP_Init 00000050  00000000  00000000  00000a0a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.NormalModeForCar 000000d4  00000000  00000000  00000a5a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.pedestrianMode 000000e2  00000000  00000000  00000b2e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.TRAFFIC_CONTROL_enuRunSystem 00000040  00000000  00000000  00000c10  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.SWitchingforNormalmodetopedestrianMode 0000001a  00000000  00000000  00000c50  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.APP_Init:

00000000 <APP_Init>:
#include "../MCAL/interrupt.h"
static int GlobalCounter=0;
static int state =NormalMode;
extern LED_t LED_AstrLedConfig [LED_NUM];
extern EXTI_t EXTI_AstrEXTIConfig[3];
void APP_Init(){
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <APP_Init+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62

	/*PIN for leds*/

	/*PIN for interrupt */
			DIO_enuSetPinDirection(DIO_u8PORTD, DIO_u8PIN2, DIO_u8INPUT);
   a:	83 e0       	ldi	r24, 0x03	; 3
   c:	62 e0       	ldi	r22, 0x02	; 2
   e:	40 e0       	ldi	r20, 0x00	; 0
  10:	0e 94 00 00 	call	0	; 0x0 <APP_Init>
			DIO_enuSetPinVal(DIO_u8PORTD, DIO_u8PIN2, DIO_u8PULLUP);
  14:	83 e0       	ldi	r24, 0x03	; 3
  16:	62 e0       	ldi	r22, 0x02	; 2
  18:	41 e0       	ldi	r20, 0x01	; 1
  1a:	0e 94 00 00 	call	0	; 0x0 <APP_Init>




		 EXTI_enuInit(EXTI_AstrEXTIConfig);
  1e:	80 e0       	ldi	r24, 0x00	; 0
  20:	90 e0       	ldi	r25, 0x00	; 0
  22:	0e 94 00 00 	call	0	; 0x0 <APP_Init>


		 int ptr=0;
  26:	1a 82       	std	Y+2, r1	; 0x02
  28:	19 82       	std	Y+1, r1	; 0x01
			 EXTI_enuCallBack(SWitchingforNormalmodetopedestrianMode(),&ptr , 0);
  2a:	0e 94 00 00 	call	0	; 0x0 <APP_Init>
  2e:	9e 01       	movw	r18, r28
  30:	2f 5f       	subi	r18, 0xFF	; 255
  32:	3f 4f       	sbci	r19, 0xFF	; 255
  34:	b9 01       	movw	r22, r18
  36:	40 e0       	ldi	r20, 0x00	; 0
  38:	0e 94 00 00 	call	0	; 0x0 <APP_Init>


			/* Enable INT0 ,*/
			EXTI_enuEnableINT(0);
  3c:	80 e0       	ldi	r24, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <APP_Init>


			/* enable global interrupt */
			GIE_enuGloable_Interrupt_Enable();
  42:	0e 94 00 00 	call	0	; 0x0 <APP_Init>

}
  46:	0f 90       	pop	r0
  48:	0f 90       	pop	r0
  4a:	cf 91       	pop	r28
  4c:	df 91       	pop	r29
  4e:	08 95       	ret

Disassembly of section .text.NormalModeForCar:

00000000 <NormalModeForCar>:
#include "../MCAL/interrupt.h"
static int GlobalCounter=0;
static int state =NormalMode;
extern LED_t LED_AstrLedConfig [LED_NUM];
extern EXTI_t EXTI_AstrEXTIConfig[3];
void APP_Init(){
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	10 92 00 00 	sts	0x0000, r1

	/*PIN for leds*/

	/*PIN for interrupt */
			DIO_enuSetPinDirection(DIO_u8PORTD, DIO_u8PIN2, DIO_u8INPUT);
   c:	10 92 00 00 	sts	0x0000, r1
  10:	00 c0       	rjmp	.+0      	; 0x12 <NormalModeForCar+0x12>
  12:	80 91 00 00 	lds	r24, 0x0000
			DIO_enuSetPinVal(DIO_u8PORTD, DIO_u8PIN2, DIO_u8PULLUP);
  16:	90 91 00 00 	lds	r25, 0x0000
  1a:	88 0f       	add	r24, r24
  1c:	99 1f       	adc	r25, r25




		 EXTI_enuInit(EXTI_AstrEXTIConfig);
  1e:	88 0f       	add	r24, r24
  20:	99 1f       	adc	r25, r25
  22:	80 50       	subi	r24, 0x00	; 0
  24:	90 40       	sbci	r25, 0x00	; 0


		 int ptr=0;
  26:	0e 94 00 00 	call	0	; 0x0 <NormalModeForCar>
			 EXTI_enuCallBack(SWitchingforNormalmodetopedestrianMode(),&ptr , 0);
  2a:	88 e8       	ldi	r24, 0x88	; 136
  2c:	93 e1       	ldi	r25, 0x13	; 19
  2e:	0e 94 00 00 	call	0	; 0x0 <NormalModeForCar>
  32:	80 91 00 00 	lds	r24, 0x0000
  36:	90 91 00 00 	lds	r25, 0x0000
  3a:	88 0f       	add	r24, r24


			/* Enable INT0 ,*/
			EXTI_enuEnableINT(0);
  3c:	99 1f       	adc	r25, r25
  3e:	88 0f       	add	r24, r24
  40:	99 1f       	adc	r25, r25


			/* enable global interrupt */
			GIE_enuGloable_Interrupt_Enable();
  42:	80 50       	subi	r24, 0x00	; 0
  44:	90 40       	sbci	r25, 0x00	; 0

}
  46:	0e 94 00 00 	call	0	; 0x0 <NormalModeForCar>
  4a:	80 91 00 00 	lds	r24, 0x0000
  4e:	90 91 00 00 	lds	r25, 0x0000
  52:	01 96       	adiw	r24, 0x01	; 1
  54:	90 93 00 00 	sts	0x0000, r25
  58:	80 93 00 00 	sts	0x0000, r24
  5c:	80 91 00 00 	lds	r24, 0x0000
  60:	90 91 00 00 	lds	r25, 0x0000
  64:	83 30       	cpi	r24, 0x03	; 3
  66:	91 05       	cpc	r25, r1
  68:	04 f0       	brlt	.+0      	; 0x6a <NormalModeForCar+0x6a>
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	90 93 00 00 	sts	0x0000, r25
  72:	80 93 00 00 	sts	0x0000, r24
  76:	00 c0       	rjmp	.+0      	; 0x78 <NormalModeForCar+0x78>
  78:	80 91 00 00 	lds	r24, 0x0000
  7c:	90 91 00 00 	lds	r25, 0x0000
  80:	88 0f       	add	r24, r24
  82:	99 1f       	adc	r25, r25
  84:	88 0f       	add	r24, r24
  86:	99 1f       	adc	r25, r25
  88:	80 50       	subi	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	0e 94 00 00 	call	0	; 0x0 <NormalModeForCar>
  90:	88 e8       	ldi	r24, 0x88	; 136
  92:	93 e1       	ldi	r25, 0x13	; 19
  94:	0e 94 00 00 	call	0	; 0x0 <NormalModeForCar>
  98:	80 91 00 00 	lds	r24, 0x0000
  9c:	90 91 00 00 	lds	r25, 0x0000
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	80 50       	subi	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	0e 94 00 00 	call	0	; 0x0 <NormalModeForCar>
  b0:	80 91 00 00 	lds	r24, 0x0000
  b4:	90 91 00 00 	lds	r25, 0x0000
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	90 93 00 00 	sts	0x0000, r25
  be:	80 93 00 00 	sts	0x0000, r24
  c2:	80 91 00 00 	lds	r24, 0x0000
  c6:	90 91 00 00 	lds	r25, 0x0000
  ca:	99 23       	and	r25, r25
  cc:	04 f4       	brge	.+0      	; 0xce <NormalModeForCar+0xce>
  ce:	cf 91       	pop	r28
  d0:	df 91       	pop	r29
  d2:	08 95       	ret

Disassembly of section .text.pedestrianMode:

00000000 <pedestrianMode>:
#include "../MCAL/interrupt.h"
static int GlobalCounter=0;
static int state =NormalMode;
extern LED_t LED_AstrLedConfig [LED_NUM];
extern EXTI_t EXTI_AstrEXTIConfig[3];
void APP_Init(){
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <pedestrianMode+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62

	/*PIN for leds*/

	/*PIN for interrupt */
			DIO_enuSetPinDirection(DIO_u8PORTD, DIO_u8PIN2, DIO_u8INPUT);
   a:	80 91 00 00 	lds	r24, 0x0000
   e:	90 91 00 00 	lds	r25, 0x0000
  12:	9a 83       	std	Y+2, r25	; 0x02
			DIO_enuSetPinVal(DIO_u8PORTD, DIO_u8PIN2, DIO_u8PULLUP);
  14:	89 83       	std	Y+1, r24	; 0x01
  16:	89 81       	ldd	r24, Y+1	; 0x01
  18:	9a 81       	ldd	r25, Y+2	; 0x02
  1a:	00 97       	sbiw	r24, 0x00	; 0
  1c:	01 f0       	breq	.+0      	; 0x1e <pedestrianMode+0x1e>




		 EXTI_enuInit(EXTI_AstrEXTIConfig);
  1e:	89 81       	ldd	r24, Y+1	; 0x01
  20:	9a 81       	ldd	r25, Y+2	; 0x02
  22:	99 23       	and	r25, r25
  24:	04 f4       	brge	.+0      	; 0x26 <pedestrianMode+0x26>


		 int ptr=0;
  26:	00 c0       	rjmp	.+0      	; 0x28 <pedestrianMode+0x28>
  28:	89 81       	ldd	r24, Y+1	; 0x01
			 EXTI_enuCallBack(SWitchingforNormalmodetopedestrianMode(),&ptr , 0);
  2a:	9a 81       	ldd	r25, Y+2	; 0x02
  2c:	83 30       	cpi	r24, 0x03	; 3
  2e:	91 05       	cpc	r25, r1
  30:	04 f0       	brlt	.+0      	; 0x32 <pedestrianMode+0x32>
  32:	00 c0       	rjmp	.+0      	; 0x34 <pedestrianMode+0x34>
  34:	00 c0       	rjmp	.+0      	; 0x36 <pedestrianMode+0x36>
  36:	80 e0       	ldi	r24, 0x00	; 0
  38:	90 e0       	ldi	r25, 0x00	; 0
  3a:	0e 94 00 00 	call	0	; 0x0 <pedestrianMode>


			/* Enable INT0 ,*/
			EXTI_enuEnableINT(0);
  3e:	80 e0       	ldi	r24, 0x00	; 0
  40:	90 e0       	ldi	r25, 0x00	; 0


			/* enable global interrupt */
			GIE_enuGloable_Interrupt_Enable();
  42:	0e 94 00 00 	call	0	; 0x0 <pedestrianMode>

}
  46:	88 e8       	ldi	r24, 0x88	; 136
  48:	93 e1       	ldi	r25, 0x13	; 19
  4a:	0e 94 00 00 	call	0	; 0x0 <pedestrianMode>
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	0e 94 00 00 	call	0	; 0x0 <pedestrianMode>
  56:	80 e0       	ldi	r24, 0x00	; 0
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	0e 94 00 00 	call	0	; 0x0 <pedestrianMode>
  5e:	00 c0       	rjmp	.+0      	; 0x60 <pedestrianMode+0x60>
  60:	80 e0       	ldi	r24, 0x00	; 0
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	0e 94 00 00 	call	0	; 0x0 <pedestrianMode>
  68:	80 ed       	ldi	r24, 0xD0	; 208
  6a:	97 e0       	ldi	r25, 0x07	; 7
  6c:	0e 94 00 00 	call	0	; 0x0 <pedestrianMode>
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	0e 94 00 00 	call	0	; 0x0 <pedestrianMode>
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	0e 94 00 00 	call	0	; 0x0 <pedestrianMode>
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	0e 94 00 00 	call	0	; 0x0 <pedestrianMode>
  88:	88 e8       	ldi	r24, 0x88	; 136
  8a:	93 e1       	ldi	r25, 0x13	; 19
  8c:	0e 94 00 00 	call	0	; 0x0 <pedestrianMode>
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 00 00 	call	0	; 0x0 <pedestrianMode>
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 00 00 	call	0	; 0x0 <pedestrianMode>
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 00 00 	call	0	; 0x0 <pedestrianMode>
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 00 00 	call	0	; 0x0 <pedestrianMode>
  b0:	88 e8       	ldi	r24, 0x88	; 136
  b2:	93 e1       	ldi	r25, 0x13	; 19
  b4:	0e 94 00 00 	call	0	; 0x0 <pedestrianMode>
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 00 00 	call	0	; 0x0 <pedestrianMode>
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 00 00 	call	0	; 0x0 <pedestrianMode>
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 00 00 	call	0	; 0x0 <pedestrianMode>
  d0:	88 e8       	ldi	r24, 0x88	; 136
  d2:	93 e1       	ldi	r25, 0x13	; 19
  d4:	0e 94 00 00 	call	0	; 0x0 <pedestrianMode>
  d8:	0f 90       	pop	r0
  da:	0f 90       	pop	r0
  dc:	cf 91       	pop	r28
  de:	df 91       	pop	r29
  e0:	08 95       	ret

Disassembly of section .text.TRAFFIC_CONTROL_enuRunSystem:

00000000 <TRAFFIC_CONTROL_enuRunSystem>:
#include "../MCAL/interrupt.h"
static int GlobalCounter=0;
static int state =NormalMode;
extern LED_t LED_AstrLedConfig [LED_NUM];
extern EXTI_t EXTI_AstrEXTIConfig[3];
void APP_Init(){
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <TRAFFIC_CONTROL_enuRunSystem+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62

	/*PIN for leds*/

	/*PIN for interrupt */
			DIO_enuSetPinDirection(DIO_u8PORTD, DIO_u8PIN2, DIO_u8INPUT);
   a:	80 91 00 00 	lds	r24, 0x0000
   e:	90 91 00 00 	lds	r25, 0x0000
  12:	9a 83       	std	Y+2, r25	; 0x02
			DIO_enuSetPinVal(DIO_u8PORTD, DIO_u8PIN2, DIO_u8PULLUP);
  14:	89 83       	std	Y+1, r24	; 0x01
  16:	89 81       	ldd	r24, Y+1	; 0x01
  18:	9a 81       	ldd	r25, Y+2	; 0x02
  1a:	88 30       	cpi	r24, 0x08	; 8
  1c:	91 05       	cpc	r25, r1




		 EXTI_enuInit(EXTI_AstrEXTIConfig);
  1e:	01 f0       	breq	.+0      	; 0x20 <TRAFFIC_CONTROL_enuRunSystem+0x20>
  20:	89 81       	ldd	r24, Y+1	; 0x01
  22:	9a 81       	ldd	r25, Y+2	; 0x02
  24:	82 34       	cpi	r24, 0x42	; 66


		 int ptr=0;
  26:	91 05       	cpc	r25, r1
  28:	01 f0       	breq	.+0      	; 0x2a <TRAFFIC_CONTROL_enuRunSystem+0x2a>
			 EXTI_enuCallBack(SWitchingforNormalmodetopedestrianMode(),&ptr , 0);
  2a:	00 c0       	rjmp	.+0      	; 0x2c <TRAFFIC_CONTROL_enuRunSystem+0x2c>
  2c:	0e 94 00 00 	call	0	; 0x0 <TRAFFIC_CONTROL_enuRunSystem>
  30:	00 c0       	rjmp	.+0      	; 0x32 <TRAFFIC_CONTROL_enuRunSystem+0x32>
  32:	0e 94 00 00 	call	0	; 0x0 <TRAFFIC_CONTROL_enuRunSystem>
  36:	0f 90       	pop	r0
  38:	0f 90       	pop	r0
  3a:	cf 91       	pop	r28


			/* Enable INT0 ,*/
			EXTI_enuEnableINT(0);
  3c:	df 91       	pop	r29
  3e:	08 95       	ret

Disassembly of section .text.SWitchingforNormalmodetopedestrianMode:

00000000 <SWitchingforNormalmodetopedestrianMode>:
#include "../MCAL/interrupt.h"
static int GlobalCounter=0;
static int state =NormalMode;
extern LED_t LED_AstrLedConfig [LED_NUM];
extern EXTI_t EXTI_AstrEXTIConfig[3];
void APP_Init(){
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	82 e4       	ldi	r24, 0x42	; 66

	/*PIN for leds*/

	/*PIN for interrupt */
			DIO_enuSetPinDirection(DIO_u8PORTD, DIO_u8PIN2, DIO_u8INPUT);
   a:	90 e0       	ldi	r25, 0x00	; 0
   c:	90 93 00 00 	sts	0x0000, r25
  10:	80 93 00 00 	sts	0x0000, r24
			DIO_enuSetPinVal(DIO_u8PORTD, DIO_u8PIN2, DIO_u8PULLUP);
  14:	cf 91       	pop	r28
  16:	df 91       	pop	r29
  18:	08 95       	ret

main.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000114  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000236  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.main    00000012  00000000  00000000  0000037e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.main:

00000000 <main>:
 *  Created on: Mar 15, 2024
 *      Author: samar ibrahim
 */


void main(void){
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62

	APP_Init();
   8:	0e 94 00 00 	call	0	; 0x0 <main>

	while(1){
		 TRAFFIC_CONTROL_enuRunSystem();
   c:	0e 94 00 00 	call	0	; 0x0 <main>
  10:	00 c0       	rjmp	.+0      	; 0x12 <__zero_reg__+0x11>
