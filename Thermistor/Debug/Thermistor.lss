
Thermistor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003170  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  00003170  00003204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800170  00800170  00003314  2**0
                  ALLOC
  3 .stab         000034c8  00000000  00000000  00003314  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016dd  00000000  00000000  000067dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008059  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000824b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a656  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b9dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000cbb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000cd74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d06a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d9d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__vector_1>
       8:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__vector_2>
       c:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <main>
      8a:	0c 94 b6 18 	jmp	0x316c	; 0x316c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9b 18 	jmp	0x3136	; 0x3136 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9b 18 	jmp	0x3136	; 0x3136 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 87 18 	jmp	0x310e	; 0x310e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 87 18 	jmp	0x310e	; 0x310e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <GIE_enuGloable_Interrupt_Enable>:
#include "../../LIB/errorStates.h"

#include "GIE_priv.h"

ES_t GIE_enuGloable_Interrupt_Enable(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     e38:	19 82       	std	Y+1, r1	; 0x01

	SREG &= ~(1 << GIE_I);
     e3a:	af e5       	ldi	r26, 0x5F	; 95
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	ef e5       	ldi	r30, 0x5F	; 95
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	8f 77       	andi	r24, 0x7F	; 127
     e46:	8c 93       	st	X, r24
	SREG |= (1 << GIE_I);
     e48:	af e5       	ldi	r26, 0x5F	; 95
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	ef e5       	ldi	r30, 0x5F	; 95
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	80 68       	ori	r24, 0x80	; 128
     e54:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <GIE_enuGloable_Interrupt_Disable>:

ES_t GIE_enuGloable_Interrupt_Disable(void)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	0f 92       	push	r0
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     e6e:	19 82       	std	Y+1, r1	; 0x01

	SREG &= ~(1<< GIE_I);
     e70:	af e5       	ldi	r26, 0x5F	; 95
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	ef e5       	ldi	r30, 0x5F	; 95
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	8f 77       	andi	r24, 0x7F	; 127
     e7c:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     e82:	89 81       	ldd	r24, Y+1	; 0x01
}
     e84:	0f 90       	pop	r0
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret

00000e8c <EXTI_enuInit>:
static volatile void (*EXTI_ApfunINTFun[3])(void*) = {NULL,NULL,NULL};
void * EXTI_ApvidGenericparameter[3] = {NULL,NULL,NULL};

// fun to initialize the external interrupt take pointer to  id of interrupt

ES_t EXTI_enuInit (EXTI_t * Copy_pstrEXTIConfig){
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	2d 97       	sbiw	r28, 0x0d	; 13
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	9d 83       	std	Y+5, r25	; 0x05
     ea2:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     ea4:	1b 82       	std	Y+3, r1	; 0x03
	if(Copy_pstrEXTIConfig!=NULL){
     ea6:	8c 81       	ldd	r24, Y+4	; 0x04
     ea8:	9d 81       	ldd	r25, Y+5	; 0x05
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	09 f4       	brne	.+2      	; 0xeb0 <EXTI_enuInit+0x24>
     eae:	10 c1       	rjmp	.+544    	; 0x10d0 <EXTI_enuInit+0x244>
		u8 Local_u8Iter=0;
     eb0:	1a 82       	std	Y+2, r1	; 0x02
    for (Local_u8Iter =0; Local_u8Iter < 3 ; Local_u8Iter++)
     eb2:	1a 82       	std	Y+2, r1	; 0x02
     eb4:	08 c1       	rjmp	.+528    	; 0x10c6 <EXTI_enuInit+0x23a>
    {
    	if (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8State == ENABLE)
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	88 2f       	mov	r24, r24
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	9c 01       	movw	r18, r24
     ebe:	22 0f       	add	r18, r18
     ec0:	33 1f       	adc	r19, r19
     ec2:	8c 81       	ldd	r24, Y+4	; 0x04
     ec4:	9d 81       	ldd	r25, Y+5	; 0x05
     ec6:	fc 01       	movw	r30, r24
     ec8:	e2 0f       	add	r30, r18
     eca:	f3 1f       	adc	r31, r19
     ecc:	80 81       	ld	r24, Z
     ece:	81 30       	cpi	r24, 0x01	; 1
     ed0:	09 f0       	breq	.+2      	; 0xed4 <EXTI_enuInit+0x48>
     ed2:	f6 c0       	rjmp	.+492    	; 0x10c0 <EXTI_enuInit+0x234>
    	{
    		switch (Local_u8Iter)
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	3d 87       	std	Y+13, r19	; 0x0d
     edc:	2c 87       	std	Y+12, r18	; 0x0c
     ede:	8c 85       	ldd	r24, Y+12	; 0x0c
     ee0:	9d 85       	ldd	r25, Y+13	; 0x0d
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	91 05       	cpc	r25, r1
     ee6:	09 f4       	brne	.+2      	; 0xeea <EXTI_enuInit+0x5e>
     ee8:	60 c0       	rjmp	.+192    	; 0xfaa <EXTI_enuInit+0x11e>
     eea:	2c 85       	ldd	r18, Y+12	; 0x0c
     eec:	3d 85       	ldd	r19, Y+13	; 0x0d
     eee:	22 30       	cpi	r18, 0x02	; 2
     ef0:	31 05       	cpc	r19, r1
     ef2:	09 f4       	brne	.+2      	; 0xef6 <EXTI_enuInit+0x6a>
     ef4:	af c0       	rjmp	.+350    	; 0x1054 <EXTI_enuInit+0x1c8>
     ef6:	8c 85       	ldd	r24, Y+12	; 0x0c
     ef8:	9d 85       	ldd	r25, Y+13	; 0x0d
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	09 f0       	breq	.+2      	; 0xf00 <EXTI_enuInit+0x74>
     efe:	de c0       	rjmp	.+444    	; 0x10bc <EXTI_enuInit+0x230>
    						{
    		case INT0:
    			 MCUCR &=~ (3<<0);
     f00:	a5 e5       	ldi	r26, 0x55	; 85
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e5 e5       	ldi	r30, 0x55	; 85
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	8c 7f       	andi	r24, 0xFC	; 252
     f0c:	8c 93       	st	X, r24
    			 GICR|=(1<<6);
     f0e:	ab e5       	ldi	r26, 0x5B	; 91
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	eb e5       	ldi	r30, 0x5B	; 91
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	80 64       	ori	r24, 0x40	; 64
     f1a:	8c 93       	st	X, r24

    			switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenseLevel)
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	9c 01       	movw	r18, r24
     f24:	22 0f       	add	r18, r18
     f26:	33 1f       	adc	r19, r19
     f28:	8c 81       	ldd	r24, Y+4	; 0x04
     f2a:	9d 81       	ldd	r25, Y+5	; 0x05
     f2c:	fc 01       	movw	r30, r24
     f2e:	e2 0f       	add	r30, r18
     f30:	f3 1f       	adc	r31, r19
     f32:	81 81       	ldd	r24, Z+1	; 0x01
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	3b 87       	std	Y+11, r19	; 0x0b
     f3a:	2a 87       	std	Y+10, r18	; 0x0a
     f3c:	8a 85       	ldd	r24, Y+10	; 0x0a
     f3e:	9b 85       	ldd	r25, Y+11	; 0x0b
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	91 05       	cpc	r25, r1
     f44:	f9 f0       	breq	.+62     	; 0xf84 <EXTI_enuInit+0xf8>
     f46:	2a 85       	ldd	r18, Y+10	; 0x0a
     f48:	3b 85       	ldd	r19, Y+11	; 0x0b
     f4a:	23 30       	cpi	r18, 0x03	; 3
     f4c:	31 05       	cpc	r19, r1
     f4e:	34 f4       	brge	.+12     	; 0xf5c <EXTI_enuInit+0xd0>
     f50:	8a 85       	ldd	r24, Y+10	; 0x0a
     f52:	9b 85       	ldd	r25, Y+11	; 0x0b
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	91 05       	cpc	r25, r1
     f58:	e9 f0       	breq	.+58     	; 0xf94 <EXTI_enuInit+0x108>
     f5a:	24 c0       	rjmp	.+72     	; 0xfa4 <EXTI_enuInit+0x118>
     f5c:	2a 85       	ldd	r18, Y+10	; 0x0a
     f5e:	3b 85       	ldd	r19, Y+11	; 0x0b
     f60:	23 30       	cpi	r18, 0x03	; 3
     f62:	31 05       	cpc	r19, r1
     f64:	39 f0       	breq	.+14     	; 0xf74 <EXTI_enuInit+0xe8>
     f66:	8a 85       	ldd	r24, Y+10	; 0x0a
     f68:	9b 85       	ldd	r25, Y+11	; 0x0b
     f6a:	84 30       	cpi	r24, 0x04	; 4
     f6c:	91 05       	cpc	r25, r1
     f6e:	09 f4       	brne	.+2      	; 0xf72 <EXTI_enuInit+0xe6>
     f70:	a7 c0       	rjmp	.+334    	; 0x10c0 <EXTI_enuInit+0x234>
     f72:	18 c0       	rjmp	.+48     	; 0xfa4 <EXTI_enuInit+0x118>
    			{
                     case LOW_LEVEL:
                    	 break;
                     case ANY_LOGIC:
                    	 MCUCR |=(1<<0);
     f74:	a5 e5       	ldi	r26, 0x55	; 85
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e5 e5       	ldi	r30, 0x55	; 85
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	81 60       	ori	r24, 0x01	; 1
     f80:	8c 93       	st	X, r24
     f82:	9e c0       	rjmp	.+316    	; 0x10c0 <EXTI_enuInit+0x234>
                    	 break;
                     case FALLING_EDGE:
                    	 MCUCR |=(1<<1);
     f84:	a5 e5       	ldi	r26, 0x55	; 85
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e5 e5       	ldi	r30, 0x55	; 85
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	82 60       	ori	r24, 0x02	; 2
     f90:	8c 93       	st	X, r24
     f92:	96 c0       	rjmp	.+300    	; 0x10c0 <EXTI_enuInit+0x234>
                    	 break;
                     case RISING_EDGE:
                    	 MCUCR |=(3<<0);
     f94:	a5 e5       	ldi	r26, 0x55	; 85
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e5 e5       	ldi	r30, 0x55	; 85
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	83 60       	ori	r24, 0x03	; 3
     fa0:	8c 93       	st	X, r24
     fa2:	8e c0       	rjmp	.+284    	; 0x10c0 <EXTI_enuInit+0x234>
                    	 break;
                    default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
     fa4:	83 e0       	ldi	r24, 0x03	; 3
     fa6:	8b 83       	std	Y+3, r24	; 0x03
     fa8:	8b c0       	rjmp	.+278    	; 0x10c0 <EXTI_enuInit+0x234>
					}
					break;

    		case INT1:
    			MCUCR &=~ (3<<2);
     faa:	a5 e5       	ldi	r26, 0x55	; 85
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e5 e5       	ldi	r30, 0x55	; 85
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	83 7f       	andi	r24, 0xF3	; 243
     fb6:	8c 93       	st	X, r24
    			GICR |= (1<<7);
     fb8:	ab e5       	ldi	r26, 0x5B	; 91
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	eb e5       	ldi	r30, 0x5B	; 91
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	80 68       	ori	r24, 0x80	; 128
     fc4:	8c 93       	st	X, r24

    			switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenseLevel)
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	88 2f       	mov	r24, r24
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	9c 01       	movw	r18, r24
     fce:	22 0f       	add	r18, r18
     fd0:	33 1f       	adc	r19, r19
     fd2:	8c 81       	ldd	r24, Y+4	; 0x04
     fd4:	9d 81       	ldd	r25, Y+5	; 0x05
     fd6:	fc 01       	movw	r30, r24
     fd8:	e2 0f       	add	r30, r18
     fda:	f3 1f       	adc	r31, r19
     fdc:	81 81       	ldd	r24, Z+1	; 0x01
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	39 87       	std	Y+9, r19	; 0x09
     fe4:	28 87       	std	Y+8, r18	; 0x08
     fe6:	88 85       	ldd	r24, Y+8	; 0x08
     fe8:	99 85       	ldd	r25, Y+9	; 0x09
     fea:	82 30       	cpi	r24, 0x02	; 2
     fec:	91 05       	cpc	r25, r1
     fee:	f9 f0       	breq	.+62     	; 0x102e <EXTI_enuInit+0x1a2>
     ff0:	28 85       	ldd	r18, Y+8	; 0x08
     ff2:	39 85       	ldd	r19, Y+9	; 0x09
     ff4:	23 30       	cpi	r18, 0x03	; 3
     ff6:	31 05       	cpc	r19, r1
     ff8:	34 f4       	brge	.+12     	; 0x1006 <EXTI_enuInit+0x17a>
     ffa:	88 85       	ldd	r24, Y+8	; 0x08
     ffc:	99 85       	ldd	r25, Y+9	; 0x09
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	91 05       	cpc	r25, r1
    1002:	e9 f0       	breq	.+58     	; 0x103e <EXTI_enuInit+0x1b2>
    1004:	24 c0       	rjmp	.+72     	; 0x104e <EXTI_enuInit+0x1c2>
    1006:	28 85       	ldd	r18, Y+8	; 0x08
    1008:	39 85       	ldd	r19, Y+9	; 0x09
    100a:	23 30       	cpi	r18, 0x03	; 3
    100c:	31 05       	cpc	r19, r1
    100e:	39 f0       	breq	.+14     	; 0x101e <EXTI_enuInit+0x192>
    1010:	88 85       	ldd	r24, Y+8	; 0x08
    1012:	99 85       	ldd	r25, Y+9	; 0x09
    1014:	84 30       	cpi	r24, 0x04	; 4
    1016:	91 05       	cpc	r25, r1
    1018:	09 f4       	brne	.+2      	; 0x101c <EXTI_enuInit+0x190>
    101a:	52 c0       	rjmp	.+164    	; 0x10c0 <EXTI_enuInit+0x234>
    101c:	18 c0       	rjmp	.+48     	; 0x104e <EXTI_enuInit+0x1c2>
    			{
    	         case LOW_LEVEL:
    	        	 break;
    	         case ANY_LOGIC:
    	        	 MCUCR |=(1<<2);
    101e:	a5 e5       	ldi	r26, 0x55	; 85
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e5 e5       	ldi	r30, 0x55	; 85
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	84 60       	ori	r24, 0x04	; 4
    102a:	8c 93       	st	X, r24
    102c:	49 c0       	rjmp	.+146    	; 0x10c0 <EXTI_enuInit+0x234>
    	        	 break;

    	         case FALLING_EDGE:
    	        	 MCUCR |=(1<<3);
    102e:	a5 e5       	ldi	r26, 0x55	; 85
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e5 e5       	ldi	r30, 0x55	; 85
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	88 60       	ori	r24, 0x08	; 8
    103a:	8c 93       	st	X, r24
    103c:	41 c0       	rjmp	.+130    	; 0x10c0 <EXTI_enuInit+0x234>
    	        	 break;

    	         case RISING_EDGE:
    	        	 MCUCR |=(3<<2);
    103e:	a5 e5       	ldi	r26, 0x55	; 85
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e5 e5       	ldi	r30, 0x55	; 85
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	8c 60       	ori	r24, 0x0C	; 12
    104a:	8c 93       	st	X, r24
    104c:	39 c0       	rjmp	.+114    	; 0x10c0 <EXTI_enuInit+0x234>
    	        	 break;

    	        default:
    				Local_enuErrorState = ES_OUT_OF_RANGE;
    104e:	83 e0       	ldi	r24, 0x03	; 3
    1050:	8b 83       	std	Y+3, r24	; 0x03
    1052:	36 c0       	rjmp	.+108    	; 0x10c0 <EXTI_enuInit+0x234>
    			}
    			break;

    		case INT2:
    			MCUCSR &=~(1<<6);
    1054:	a4 e5       	ldi	r26, 0x54	; 84
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e4 e5       	ldi	r30, 0x54	; 84
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	8f 7b       	andi	r24, 0xBF	; 191
    1060:	8c 93       	st	X, r24
    			GICR |= (1<<5);
    1062:	ab e5       	ldi	r26, 0x5B	; 91
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	eb e5       	ldi	r30, 0x5B	; 91
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	80 62       	ori	r24, 0x20	; 32
    106e:	8c 93       	st	X, r24

    			switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenseLevel)
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	9c 01       	movw	r18, r24
    1078:	22 0f       	add	r18, r18
    107a:	33 1f       	adc	r19, r19
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	9d 81       	ldd	r25, Y+5	; 0x05
    1080:	fc 01       	movw	r30, r24
    1082:	e2 0f       	add	r30, r18
    1084:	f3 1f       	adc	r31, r19
    1086:	81 81       	ldd	r24, Z+1	; 0x01
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	3f 83       	std	Y+7, r19	; 0x07
    108e:	2e 83       	std	Y+6, r18	; 0x06
    1090:	8e 81       	ldd	r24, Y+6	; 0x06
    1092:	9f 81       	ldd	r25, Y+7	; 0x07
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	91 05       	cpc	r25, r1
    1098:	31 f0       	breq	.+12     	; 0x10a6 <EXTI_enuInit+0x21a>
    109a:	2e 81       	ldd	r18, Y+6	; 0x06
    109c:	3f 81       	ldd	r19, Y+7	; 0x07
    109e:	22 30       	cpi	r18, 0x02	; 2
    10a0:	31 05       	cpc	r19, r1
    10a2:	71 f0       	breq	.+28     	; 0x10c0 <EXTI_enuInit+0x234>
    10a4:	08 c0       	rjmp	.+16     	; 0x10b6 <EXTI_enuInit+0x22a>
    		   	{
                 case FALLING_EDGE:
                	 break;

                 case RISING_EDGE:
                	 MCUCSR |= (1<<6);
    10a6:	a4 e5       	ldi	r26, 0x54	; 84
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e4 e5       	ldi	r30, 0x54	; 84
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	80 64       	ori	r24, 0x40	; 64
    10b2:	8c 93       	st	X, r24
    10b4:	05 c0       	rjmp	.+10     	; 0x10c0 <EXTI_enuInit+0x234>
                	 break;

                default:
  			    Local_enuErrorState = ES_OUT_OF_RANGE;
    10b6:	83 e0       	ldi	r24, 0x03	; 3
    10b8:	8b 83       	std	Y+3, r24	; 0x03
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <EXTI_enuInit+0x234>
  		        }
  		        break;

              default:
              Local_enuErrorState = ES_OUT_OF_RANGE;
    10bc:	83 e0       	ldi	r24, 0x03	; 3
    10be:	8b 83       	std	Y+3, r24	; 0x03

ES_t EXTI_enuInit (EXTI_t * Copy_pstrEXTIConfig){
	ES_t Local_enuErrorState = ES_NOK;
	if(Copy_pstrEXTIConfig!=NULL){
		u8 Local_u8Iter=0;
    for (Local_u8Iter =0; Local_u8Iter < 3 ; Local_u8Iter++)
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	8f 5f       	subi	r24, 0xFF	; 255
    10c4:	8a 83       	std	Y+2, r24	; 0x02
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	83 30       	cpi	r24, 0x03	; 3
    10ca:	08 f4       	brcc	.+2      	; 0x10ce <EXTI_enuInit+0x242>
    10cc:	f4 ce       	rjmp	.-536    	; 0xeb6 <EXTI_enuInit+0x2a>
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <EXTI_enuInit+0x248>

              default:
              Local_enuErrorState = ES_OUT_OF_RANGE;
    						}}}}
	else {
		ES_t Local_enuErrorState = ES_NULL_POINTER;
    10d0:	82 e0       	ldi	r24, 0x02	; 2
    10d2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10d6:	2d 96       	adiw	r28, 0x0d	; 13
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	de bf       	out	0x3e, r29	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	cd bf       	out	0x3d, r28	; 61
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <EXTI_enuSetSenseLevel>:


/*** fun to set sense level
     take id ,sense level                              ***/
ES_t EXTI_enuSetSenseLevel(u8 Copy_u8EXTI_ID , u8 Copy_u8SenseLevel){
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	2a 97       	sbiw	r28, 0x0a	; 10
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	de bf       	out	0x3e, r29	; 62
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	cd bf       	out	0x3d, r28	; 61
    10fc:	8b 83       	std	Y+3, r24	; 0x03
    10fe:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1100:	1a 82       	std	Y+2, r1	; 0x02
 if(Copy_u8EXTI_ID < 3){
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	08 f0       	brcs	.+2      	; 0x110a <EXTI_enuSetSenseLevel+0x22>
    1108:	ba c0       	rjmp	.+372    	; 0x127e <EXTI_enuSetSenseLevel+0x196>
	 if(Copy_u8EXTI_ID ==INT0){
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	88 23       	and	r24, r24
    110e:	09 f0       	breq	.+2      	; 0x1112 <EXTI_enuSetSenseLevel+0x2a>
    1110:	43 c0       	rjmp	.+134    	; 0x1198 <EXTI_enuSetSenseLevel+0xb0>
		 MCUCR &=~ (3<<0);
    1112:	a5 e5       	ldi	r26, 0x55	; 85
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e5 e5       	ldi	r30, 0x55	; 85
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	8c 7f       	andi	r24, 0xFC	; 252
    111e:	8c 93       	st	X, r24
			switch (Copy_u8SenseLevel)
    1120:	8c 81       	ldd	r24, Y+4	; 0x04
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	3a 87       	std	Y+10, r19	; 0x0a
    1128:	29 87       	std	Y+9, r18	; 0x09
    112a:	89 85       	ldd	r24, Y+9	; 0x09
    112c:	9a 85       	ldd	r25, Y+10	; 0x0a
    112e:	82 30       	cpi	r24, 0x02	; 2
    1130:	91 05       	cpc	r25, r1
    1132:	f9 f0       	breq	.+62     	; 0x1172 <EXTI_enuSetSenseLevel+0x8a>
    1134:	29 85       	ldd	r18, Y+9	; 0x09
    1136:	3a 85       	ldd	r19, Y+10	; 0x0a
    1138:	23 30       	cpi	r18, 0x03	; 3
    113a:	31 05       	cpc	r19, r1
    113c:	34 f4       	brge	.+12     	; 0x114a <EXTI_enuSetSenseLevel+0x62>
    113e:	89 85       	ldd	r24, Y+9	; 0x09
    1140:	9a 85       	ldd	r25, Y+10	; 0x0a
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	91 05       	cpc	r25, r1
    1146:	e9 f0       	breq	.+58     	; 0x1182 <EXTI_enuSetSenseLevel+0x9a>
    1148:	24 c0       	rjmp	.+72     	; 0x1192 <EXTI_enuSetSenseLevel+0xaa>
    114a:	29 85       	ldd	r18, Y+9	; 0x09
    114c:	3a 85       	ldd	r19, Y+10	; 0x0a
    114e:	23 30       	cpi	r18, 0x03	; 3
    1150:	31 05       	cpc	r19, r1
    1152:	39 f0       	breq	.+14     	; 0x1162 <EXTI_enuSetSenseLevel+0x7a>
    1154:	89 85       	ldd	r24, Y+9	; 0x09
    1156:	9a 85       	ldd	r25, Y+10	; 0x0a
    1158:	84 30       	cpi	r24, 0x04	; 4
    115a:	91 05       	cpc	r25, r1
    115c:	09 f4       	brne	.+2      	; 0x1160 <EXTI_enuSetSenseLevel+0x78>
    115e:	91 c0       	rjmp	.+290    	; 0x1282 <EXTI_enuSetSenseLevel+0x19a>
    1160:	18 c0       	rjmp	.+48     	; 0x1192 <EXTI_enuSetSenseLevel+0xaa>
		    			{
		                     case LOW_LEVEL:
		                    	 break;
		                     case ANY_LOGIC:
		                    	 MCUCR |=(1<<0);
    1162:	a5 e5       	ldi	r26, 0x55	; 85
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e5 e5       	ldi	r30, 0x55	; 85
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	81 60       	ori	r24, 0x01	; 1
    116e:	8c 93       	st	X, r24
    1170:	88 c0       	rjmp	.+272    	; 0x1282 <EXTI_enuSetSenseLevel+0x19a>
		                    	 break;
		                     case FALLING_EDGE:
		                    	 MCUCR |=(1<<1);
    1172:	a5 e5       	ldi	r26, 0x55	; 85
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e5 e5       	ldi	r30, 0x55	; 85
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	82 60       	ori	r24, 0x02	; 2
    117e:	8c 93       	st	X, r24
    1180:	80 c0       	rjmp	.+256    	; 0x1282 <EXTI_enuSetSenseLevel+0x19a>
		                    	 break;
		                     case RISING_EDGE:
		                    	 MCUCR |=(3<<0);
    1182:	a5 e5       	ldi	r26, 0x55	; 85
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e5 e5       	ldi	r30, 0x55	; 85
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	83 60       	ori	r24, 0x03	; 3
    118e:	8c 93       	st	X, r24
    1190:	78 c0       	rjmp	.+240    	; 0x1282 <EXTI_enuSetSenseLevel+0x19a>
		                    	 break;
		                    default:
								Local_enuErrorState = ES_OUT_OF_RANGE;
    1192:	83 e0       	ldi	r24, 0x03	; 3
    1194:	8a 83       	std	Y+2, r24	; 0x02
    1196:	75 c0       	rjmp	.+234    	; 0x1282 <EXTI_enuSetSenseLevel+0x19a>
							}
	 }
	 else if(Copy_u8EXTI_ID ==INT1){
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	09 f0       	breq	.+2      	; 0x11a0 <EXTI_enuSetSenseLevel+0xb8>
    119e:	43 c0       	rjmp	.+134    	; 0x1226 <EXTI_enuSetSenseLevel+0x13e>
		 MCUCR &=~ (3<<2);
    11a0:	a5 e5       	ldi	r26, 0x55	; 85
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e5 e5       	ldi	r30, 0x55	; 85
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	83 7f       	andi	r24, 0xF3	; 243
    11ac:	8c 93       	st	X, r24

		     			switch (Copy_u8SenseLevel)
    11ae:	8c 81       	ldd	r24, Y+4	; 0x04
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	38 87       	std	Y+8, r19	; 0x08
    11b6:	2f 83       	std	Y+7, r18	; 0x07
    11b8:	8f 81       	ldd	r24, Y+7	; 0x07
    11ba:	98 85       	ldd	r25, Y+8	; 0x08
    11bc:	82 30       	cpi	r24, 0x02	; 2
    11be:	91 05       	cpc	r25, r1
    11c0:	f9 f0       	breq	.+62     	; 0x1200 <EXTI_enuSetSenseLevel+0x118>
    11c2:	2f 81       	ldd	r18, Y+7	; 0x07
    11c4:	38 85       	ldd	r19, Y+8	; 0x08
    11c6:	23 30       	cpi	r18, 0x03	; 3
    11c8:	31 05       	cpc	r19, r1
    11ca:	34 f4       	brge	.+12     	; 0x11d8 <EXTI_enuSetSenseLevel+0xf0>
    11cc:	8f 81       	ldd	r24, Y+7	; 0x07
    11ce:	98 85       	ldd	r25, Y+8	; 0x08
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	91 05       	cpc	r25, r1
    11d4:	e9 f0       	breq	.+58     	; 0x1210 <EXTI_enuSetSenseLevel+0x128>
    11d6:	24 c0       	rjmp	.+72     	; 0x1220 <EXTI_enuSetSenseLevel+0x138>
    11d8:	2f 81       	ldd	r18, Y+7	; 0x07
    11da:	38 85       	ldd	r19, Y+8	; 0x08
    11dc:	23 30       	cpi	r18, 0x03	; 3
    11de:	31 05       	cpc	r19, r1
    11e0:	39 f0       	breq	.+14     	; 0x11f0 <EXTI_enuSetSenseLevel+0x108>
    11e2:	8f 81       	ldd	r24, Y+7	; 0x07
    11e4:	98 85       	ldd	r25, Y+8	; 0x08
    11e6:	84 30       	cpi	r24, 0x04	; 4
    11e8:	91 05       	cpc	r25, r1
    11ea:	09 f4       	brne	.+2      	; 0x11ee <EXTI_enuSetSenseLevel+0x106>
    11ec:	4a c0       	rjmp	.+148    	; 0x1282 <EXTI_enuSetSenseLevel+0x19a>
    11ee:	18 c0       	rjmp	.+48     	; 0x1220 <EXTI_enuSetSenseLevel+0x138>
		     			{
		     	         case LOW_LEVEL:
		     	        	 break;
		     	         case ANY_LOGIC:
		     	        	 MCUCR |=(1<<2);
    11f0:	a5 e5       	ldi	r26, 0x55	; 85
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e5 e5       	ldi	r30, 0x55	; 85
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	84 60       	ori	r24, 0x04	; 4
    11fc:	8c 93       	st	X, r24
    11fe:	41 c0       	rjmp	.+130    	; 0x1282 <EXTI_enuSetSenseLevel+0x19a>
		     	        	 break;

		     	         case FALLING_EDGE:
		     	        	 MCUCR |=(1<<3);
    1200:	a5 e5       	ldi	r26, 0x55	; 85
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e5 e5       	ldi	r30, 0x55	; 85
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	88 60       	ori	r24, 0x08	; 8
    120c:	8c 93       	st	X, r24
    120e:	39 c0       	rjmp	.+114    	; 0x1282 <EXTI_enuSetSenseLevel+0x19a>
		     	        	 break;

		     	         case RISING_EDGE:
		     	        	 MCUCR |=(3<<2);
    1210:	a5 e5       	ldi	r26, 0x55	; 85
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e5 e5       	ldi	r30, 0x55	; 85
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	8c 60       	ori	r24, 0x0C	; 12
    121c:	8c 93       	st	X, r24
    121e:	31 c0       	rjmp	.+98     	; 0x1282 <EXTI_enuSetSenseLevel+0x19a>
		     	        	 break;

		     	        default:
		     				Local_enuErrorState = ES_OUT_OF_RANGE;
    1220:	83 e0       	ldi	r24, 0x03	; 3
    1222:	8a 83       	std	Y+2, r24	; 0x02
    1224:	2e c0       	rjmp	.+92     	; 0x1282 <EXTI_enuSetSenseLevel+0x19a>
		     			}
	 }
	 else if(Copy_u8EXTI_ID ==INT2){
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	59 f5       	brne	.+86     	; 0x1282 <EXTI_enuSetSenseLevel+0x19a>
		 MCUCSR &=~(1<<6);
    122c:	a4 e5       	ldi	r26, 0x54	; 84
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e4 e5       	ldi	r30, 0x54	; 84
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8f 7b       	andi	r24, 0xBF	; 191
    1238:	8c 93       	st	X, r24
		     			GICR |= (1<<5);
    123a:	ab e5       	ldi	r26, 0x5B	; 91
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	eb e5       	ldi	r30, 0x5B	; 91
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	80 62       	ori	r24, 0x20	; 32
    1246:	8c 93       	st	X, r24

		     			switch (Copy_u8SenseLevel)
    1248:	8c 81       	ldd	r24, Y+4	; 0x04
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	3e 83       	std	Y+6, r19	; 0x06
    1250:	2d 83       	std	Y+5, r18	; 0x05
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
    1254:	9e 81       	ldd	r25, Y+6	; 0x06
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	91 05       	cpc	r25, r1
    125a:	31 f0       	breq	.+12     	; 0x1268 <EXTI_enuSetSenseLevel+0x180>
    125c:	2d 81       	ldd	r18, Y+5	; 0x05
    125e:	3e 81       	ldd	r19, Y+6	; 0x06
    1260:	22 30       	cpi	r18, 0x02	; 2
    1262:	31 05       	cpc	r19, r1
    1264:	71 f0       	breq	.+28     	; 0x1282 <EXTI_enuSetSenseLevel+0x19a>
    1266:	08 c0       	rjmp	.+16     	; 0x1278 <EXTI_enuSetSenseLevel+0x190>
		     		   	{
		                  case FALLING_EDGE:
		                 	 break;

		                  case RISING_EDGE:
		                 	 MCUCSR |= (1<<6);
    1268:	a4 e5       	ldi	r26, 0x54	; 84
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e4 e5       	ldi	r30, 0x54	; 84
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	80 64       	ori	r24, 0x40	; 64
    1274:	8c 93       	st	X, r24
    1276:	05 c0       	rjmp	.+10     	; 0x1282 <EXTI_enuSetSenseLevel+0x19a>
		                 	 break;

		                 default:
		   			    Local_enuErrorState = ES_OUT_OF_RANGE;
    1278:	83 e0       	ldi	r24, 0x03	; 3
    127a:	8a 83       	std	Y+2, r24	; 0x02
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <EXTI_enuSetSenseLevel+0x19a>
		   		        }
		 }
 }
 else{
	 ES_t Local_enuErrorState = ES_OUT_OF_RANGE;
    127e:	83 e0       	ldi	r24, 0x03	; 3
    1280:	89 83       	std	Y+1, r24	; 0x01
 }
	return Local_enuErrorState;
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1284:	2a 96       	adiw	r28, 0x0a	; 10
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	f8 94       	cli
    128a:	de bf       	out	0x3e, r29	; 62
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	cd bf       	out	0x3d, r28	; 61
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <EXTI_enuEnableINT>:

/*** fun to enable specific the interrupt
                      ***/
ES_t EXTI_enuEnableINT(u8 Copy_u8EXTI_ID){
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	00 d0       	rcall	.+0      	; 0x129c <EXTI_enuEnableINT+0x6>
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    12a2:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8EXTI_ID < 3)
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	83 30       	cpi	r24, 0x03	; 3
    12a8:	00 f5       	brcc	.+64     	; 0x12ea <EXTI_enuEnableINT+0x54>
		{
			if (Copy_u8EXTI_ID ==INT0)
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	88 23       	and	r24, r24
    12ae:	41 f4       	brne	.+16     	; 0x12c0 <EXTI_enuEnableINT+0x2a>
			{
				GICR |= (1<<6);
    12b0:	ab e5       	ldi	r26, 0x5B	; 91
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	eb e5       	ldi	r30, 0x5B	; 91
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	80 64       	ori	r24, 0x40	; 64
    12bc:	8c 93       	st	X, r24
    12be:	15 c0       	rjmp	.+42     	; 0x12ea <EXTI_enuEnableINT+0x54>
			}
			else if (Copy_u8EXTI_ID ==INT1)
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	81 30       	cpi	r24, 0x01	; 1
    12c4:	41 f4       	brne	.+16     	; 0x12d6 <EXTI_enuEnableINT+0x40>
			{
				GICR |= (1<<7);
    12c6:	ab e5       	ldi	r26, 0x5B	; 91
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	eb e5       	ldi	r30, 0x5B	; 91
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	80 68       	ori	r24, 0x80	; 128
    12d2:	8c 93       	st	X, r24
    12d4:	0a c0       	rjmp	.+20     	; 0x12ea <EXTI_enuEnableINT+0x54>
			}
			else if (Copy_u8EXTI_ID ==INT2)
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	82 30       	cpi	r24, 0x02	; 2
    12da:	39 f4       	brne	.+14     	; 0x12ea <EXTI_enuEnableINT+0x54>
			{
				GICR |= (1<<5);
    12dc:	ab e5       	ldi	r26, 0x5B	; 91
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	eb e5       	ldi	r30, 0x5B	; 91
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	80 62       	ori	r24, 0x20	; 32
    12e8:	8c 93       	st	X, r24
			}
		}

	return Local_enuErrorState;
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <EXTI_enuDisableINT>:

/***   fun to disable specific interrupt
                      ***/
ES_t EXTI_enuDisableINT(u8 Copy_u8EXTI_ID){
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <EXTI_enuDisableINT+0x6>
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1302:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8EXTI_ID < 3)
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	83 30       	cpi	r24, 0x03	; 3
    1308:	00 f5       	brcc	.+64     	; 0x134a <EXTI_enuDisableINT+0x54>
		{
			if (Copy_u8EXTI_ID ==INT0)
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	88 23       	and	r24, r24
    130e:	41 f4       	brne	.+16     	; 0x1320 <EXTI_enuDisableINT+0x2a>
			{
				GICR &= ~(1<<6);
    1310:	ab e5       	ldi	r26, 0x5B	; 91
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	eb e5       	ldi	r30, 0x5B	; 91
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	8f 7b       	andi	r24, 0xBF	; 191
    131c:	8c 93       	st	X, r24
    131e:	15 c0       	rjmp	.+42     	; 0x134a <EXTI_enuDisableINT+0x54>
			}
			else if (Copy_u8EXTI_ID ==INT1)
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	41 f4       	brne	.+16     	; 0x1336 <EXTI_enuDisableINT+0x40>
			{
				GICR&= ~(1<<7);
    1326:	ab e5       	ldi	r26, 0x5B	; 91
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	eb e5       	ldi	r30, 0x5B	; 91
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	8f 77       	andi	r24, 0x7F	; 127
    1332:	8c 93       	st	X, r24
    1334:	0a c0       	rjmp	.+20     	; 0x134a <EXTI_enuDisableINT+0x54>
			}
			else if (Copy_u8EXTI_ID ==INT2)
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	82 30       	cpi	r24, 0x02	; 2
    133a:	39 f4       	brne	.+14     	; 0x134a <EXTI_enuDisableINT+0x54>
			{
				GICR &= ~(1<<5);
    133c:	ab e5       	ldi	r26, 0x5B	; 91
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	eb e5       	ldi	r30, 0x5B	; 91
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	8f 7d       	andi	r24, 0xDF	; 223
    1348:	8c 93       	st	X, r24
			}
		}

	return Local_enuErrorState;
    134a:	89 81       	ldd	r24, Y+1	; 0x01
}
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <EXTI_enuCallBack>:

 /***  call back fun to use function that exist in application level
                          ***/

ES_t EXTI_enuCallBack(volatile void (*Copy_pfunAppFun)(void*) , volatile void * Copy_pvidParameter , u8 Copy_u8EXTI_ID)
{
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <EXTI_enuCallBack+0x6>
    135c:	00 d0       	rcall	.+0      	; 0x135e <EXTI_enuCallBack+0x8>
    135e:	00 d0       	rcall	.+0      	; 0x1360 <EXTI_enuCallBack+0xa>
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	9b 83       	std	Y+3, r25	; 0x03
    1366:	8a 83       	std	Y+2, r24	; 0x02
    1368:	7d 83       	std	Y+5, r23	; 0x05
    136a:	6c 83       	std	Y+4, r22	; 0x04
    136c:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    136e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pfunAppFun != NULL && Copy_u8EXTI_ID <3)
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	9b 81       	ldd	r25, Y+3	; 0x03
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	d9 f0       	breq	.+54     	; 0x13ae <EXTI_enuCallBack+0x58>
    1378:	8e 81       	ldd	r24, Y+6	; 0x06
    137a:	83 30       	cpi	r24, 0x03	; 3
    137c:	c0 f4       	brcc	.+48     	; 0x13ae <EXTI_enuCallBack+0x58>
	{
		EXTI_ApfunINTFun[Copy_u8EXTI_ID]=Copy_pfunAppFun;
    137e:	8e 81       	ldd	r24, Y+6	; 0x06
    1380:	88 2f       	mov	r24, r24
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	fc 01       	movw	r30, r24
    138a:	e0 59       	subi	r30, 0x90	; 144
    138c:	fe 4f       	sbci	r31, 0xFE	; 254
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	9b 81       	ldd	r25, Y+3	; 0x03
    1392:	91 83       	std	Z+1, r25	; 0x01
    1394:	80 83       	st	Z, r24
		EXTI_ApvidGenericparameter[Copy_u8EXTI_ID] = Copy_pvidParameter;
    1396:	8e 81       	ldd	r24, Y+6	; 0x06
    1398:	88 2f       	mov	r24, r24
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	fc 01       	movw	r30, r24
    13a2:	ea 58       	subi	r30, 0x8A	; 138
    13a4:	fe 4f       	sbci	r31, 0xFE	; 254
    13a6:	8c 81       	ldd	r24, Y+4	; 0x04
    13a8:	9d 81       	ldd	r25, Y+5	; 0x05
    13aa:	91 83       	std	Z+1, r25	; 0x01
    13ac:	80 83       	st	Z, r24
	}

	return Local_enuErrorState;
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b0:	26 96       	adiw	r28, 0x06	; 6
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	f8 94       	cli
    13b6:	de bf       	out	0x3e, r29	; 62
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	cd bf       	out	0x3d, r28	; 61
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	08 95       	ret

000013c2 <__vector_1>:



ISR(VECT_INT0)
{
    13c2:	1f 92       	push	r1
    13c4:	0f 92       	push	r0
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	0f 92       	push	r0
    13ca:	11 24       	eor	r1, r1
    13cc:	2f 93       	push	r18
    13ce:	3f 93       	push	r19
    13d0:	4f 93       	push	r20
    13d2:	5f 93       	push	r21
    13d4:	6f 93       	push	r22
    13d6:	7f 93       	push	r23
    13d8:	8f 93       	push	r24
    13da:	9f 93       	push	r25
    13dc:	af 93       	push	r26
    13de:	bf 93       	push	r27
    13e0:	ef 93       	push	r30
    13e2:	ff 93       	push	r31
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[0] != NULL)
    13ec:	80 91 70 01 	lds	r24, 0x0170
    13f0:	90 91 71 01 	lds	r25, 0x0171
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	49 f0       	breq	.+18     	; 0x140a <__vector_1+0x48>
	{
		EXTI_ApfunINTFun[0] (EXTI_ApvidGenericparameter[0]);
    13f8:	e0 91 70 01 	lds	r30, 0x0170
    13fc:	f0 91 71 01 	lds	r31, 0x0171
    1400:	80 91 76 01 	lds	r24, 0x0176
    1404:	90 91 77 01 	lds	r25, 0x0177
    1408:	09 95       	icall
	}
}
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	ff 91       	pop	r31
    1410:	ef 91       	pop	r30
    1412:	bf 91       	pop	r27
    1414:	af 91       	pop	r26
    1416:	9f 91       	pop	r25
    1418:	8f 91       	pop	r24
    141a:	7f 91       	pop	r23
    141c:	6f 91       	pop	r22
    141e:	5f 91       	pop	r21
    1420:	4f 91       	pop	r20
    1422:	3f 91       	pop	r19
    1424:	2f 91       	pop	r18
    1426:	0f 90       	pop	r0
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	0f 90       	pop	r0
    142c:	1f 90       	pop	r1
    142e:	18 95       	reti

00001430 <__vector_2>:

ISR(VECT_INT1)
{
    1430:	1f 92       	push	r1
    1432:	0f 92       	push	r0
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	0f 92       	push	r0
    1438:	11 24       	eor	r1, r1
    143a:	2f 93       	push	r18
    143c:	3f 93       	push	r19
    143e:	4f 93       	push	r20
    1440:	5f 93       	push	r21
    1442:	6f 93       	push	r22
    1444:	7f 93       	push	r23
    1446:	8f 93       	push	r24
    1448:	9f 93       	push	r25
    144a:	af 93       	push	r26
    144c:	bf 93       	push	r27
    144e:	ef 93       	push	r30
    1450:	ff 93       	push	r31
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[1] != NULL)
    145a:	80 91 72 01 	lds	r24, 0x0172
    145e:	90 91 73 01 	lds	r25, 0x0173
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	49 f0       	breq	.+18     	; 0x1478 <__vector_2+0x48>
	{
		EXTI_ApfunINTFun[1] (EXTI_ApvidGenericparameter[1]);
    1466:	e0 91 72 01 	lds	r30, 0x0172
    146a:	f0 91 73 01 	lds	r31, 0x0173
    146e:	80 91 78 01 	lds	r24, 0x0178
    1472:	90 91 79 01 	lds	r25, 0x0179
    1476:	09 95       	icall
	}
}
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	ff 91       	pop	r31
    147e:	ef 91       	pop	r30
    1480:	bf 91       	pop	r27
    1482:	af 91       	pop	r26
    1484:	9f 91       	pop	r25
    1486:	8f 91       	pop	r24
    1488:	7f 91       	pop	r23
    148a:	6f 91       	pop	r22
    148c:	5f 91       	pop	r21
    148e:	4f 91       	pop	r20
    1490:	3f 91       	pop	r19
    1492:	2f 91       	pop	r18
    1494:	0f 90       	pop	r0
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	0f 90       	pop	r0
    149a:	1f 90       	pop	r1
    149c:	18 95       	reti

0000149e <__vector_3>:

ISR(VECT_INT2)
{
    149e:	1f 92       	push	r1
    14a0:	0f 92       	push	r0
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	0f 92       	push	r0
    14a6:	11 24       	eor	r1, r1
    14a8:	2f 93       	push	r18
    14aa:	3f 93       	push	r19
    14ac:	4f 93       	push	r20
    14ae:	5f 93       	push	r21
    14b0:	6f 93       	push	r22
    14b2:	7f 93       	push	r23
    14b4:	8f 93       	push	r24
    14b6:	9f 93       	push	r25
    14b8:	af 93       	push	r26
    14ba:	bf 93       	push	r27
    14bc:	ef 93       	push	r30
    14be:	ff 93       	push	r31
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[2] != NULL)
    14c8:	80 91 74 01 	lds	r24, 0x0174
    14cc:	90 91 75 01 	lds	r25, 0x0175
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	49 f0       	breq	.+18     	; 0x14e6 <__vector_3+0x48>
	{
		EXTI_ApfunINTFun[2] (EXTI_ApvidGenericparameter[2]);
    14d4:	e0 91 74 01 	lds	r30, 0x0174
    14d8:	f0 91 75 01 	lds	r31, 0x0175
    14dc:	80 91 7a 01 	lds	r24, 0x017A
    14e0:	90 91 7b 01 	lds	r25, 0x017B
    14e4:	09 95       	icall
	}
}
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	ff 91       	pop	r31
    14ec:	ef 91       	pop	r30
    14ee:	bf 91       	pop	r27
    14f0:	af 91       	pop	r26
    14f2:	9f 91       	pop	r25
    14f4:	8f 91       	pop	r24
    14f6:	7f 91       	pop	r23
    14f8:	6f 91       	pop	r22
    14fa:	5f 91       	pop	r21
    14fc:	4f 91       	pop	r20
    14fe:	3f 91       	pop	r19
    1500:	2f 91       	pop	r18
    1502:	0f 90       	pop	r0
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	0f 90       	pop	r0
    1508:	1f 90       	pop	r1
    150a:	18 95       	reti

0000150c <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"


ES_t DIO_enuInit(void){
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	0f 92       	push	r0
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1516:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    1518:	ea e3       	ldi	r30, 0x3A	; 58
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	8f ef       	ldi	r24, 0xFF	; 255
    151e:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    1520:	e7 e3       	ldi	r30, 0x37	; 55
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	8f ef       	ldi	r24, 0xFF	; 255
    1526:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    1528:	e4 e3       	ldi	r30, 0x34	; 52
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	8d ec       	ldi	r24, 0xCD	; 205
    152e:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    1530:	e1 e3       	ldi	r30, 0x31	; 49
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	8d ec       	ldi	r24, 0xCD	; 205
    1536:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    1538:	eb e3       	ldi	r30, 0x3B	; 59
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	10 82       	st	Z, r1
    PORTB = CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
    153e:	e8 e3       	ldi	r30, 0x38	; 56
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	89 e8       	ldi	r24, 0x89	; 137
    1544:	80 83       	st	Z, r24
	PORTC = CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
    1546:	e5 e3       	ldi	r30, 0x35	; 53
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	89 e2       	ldi	r24, 0x29	; 41
    154c:	80 83       	st	Z, r24
	PORTD = CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
    154e:	e2 e3       	ldi	r30, 0x32	; 50
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	89 e2       	ldi	r24, 0x29	; 41
    1554:	80 83       	st	Z, r24
	 Local_enuErrorState = ES_OK;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    155a:	89 81       	ldd	r24, Y+1	; 0x01
}
    155c:	0f 90       	pop	r0
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <DIO_enuSetPortDirection>:


ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value){
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	00 d0       	rcall	.+0      	; 0x156a <DIO_enuSetPortDirection+0x6>
    156a:	00 d0       	rcall	.+0      	; 0x156c <DIO_enuSetPortDirection+0x8>
    156c:	0f 92       	push	r0
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	8a 83       	std	Y+2, r24	; 0x02
    1574:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1576:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	84 30       	cpi	r24, 0x04	; 4
    157c:	a8 f5       	brcc	.+106    	; 0x15e8 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	3d 83       	std	Y+5, r19	; 0x05
    1586:	2c 83       	std	Y+4, r18	; 0x04
    1588:	8c 81       	ldd	r24, Y+4	; 0x04
    158a:	9d 81       	ldd	r25, Y+5	; 0x05
    158c:	81 30       	cpi	r24, 0x01	; 1
    158e:	91 05       	cpc	r25, r1
    1590:	d1 f0       	breq	.+52     	; 0x15c6 <DIO_enuSetPortDirection+0x62>
    1592:	2c 81       	ldd	r18, Y+4	; 0x04
    1594:	3d 81       	ldd	r19, Y+5	; 0x05
    1596:	22 30       	cpi	r18, 0x02	; 2
    1598:	31 05       	cpc	r19, r1
    159a:	2c f4       	brge	.+10     	; 0x15a6 <DIO_enuSetPortDirection+0x42>
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	9d 81       	ldd	r25, Y+5	; 0x05
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	61 f0       	breq	.+24     	; 0x15bc <DIO_enuSetPortDirection+0x58>
    15a4:	1e c0       	rjmp	.+60     	; 0x15e2 <DIO_enuSetPortDirection+0x7e>
    15a6:	2c 81       	ldd	r18, Y+4	; 0x04
    15a8:	3d 81       	ldd	r19, Y+5	; 0x05
    15aa:	22 30       	cpi	r18, 0x02	; 2
    15ac:	31 05       	cpc	r19, r1
    15ae:	81 f0       	breq	.+32     	; 0x15d0 <DIO_enuSetPortDirection+0x6c>
    15b0:	8c 81       	ldd	r24, Y+4	; 0x04
    15b2:	9d 81       	ldd	r25, Y+5	; 0x05
    15b4:	83 30       	cpi	r24, 0x03	; 3
    15b6:	91 05       	cpc	r25, r1
    15b8:	81 f0       	breq	.+32     	; 0x15da <DIO_enuSetPortDirection+0x76>
    15ba:	13 c0       	rjmp	.+38     	; 0x15e2 <DIO_enuSetPortDirection+0x7e>
		{
			case DIO_PORTA:
			DDRA = Copy_u8Value;
    15bc:	ea e3       	ldi	r30, 0x3A	; 58
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	80 83       	st	Z, r24
    15c4:	0e c0       	rjmp	.+28     	; 0x15e2 <DIO_enuSetPortDirection+0x7e>
			break;

			case DIO_PORTB:
			DDRB = Copy_u8Value;
    15c6:	e7 e3       	ldi	r30, 0x37	; 55
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	80 83       	st	Z, r24
    15ce:	09 c0       	rjmp	.+18     	; 0x15e2 <DIO_enuSetPortDirection+0x7e>
			break;

			case DIO_PORTC:
			DDRC = Copy_u8Value;
    15d0:	e4 e3       	ldi	r30, 0x34	; 52
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	80 83       	st	Z, r24
    15d8:	04 c0       	rjmp	.+8      	; 0x15e2 <DIO_enuSetPortDirection+0x7e>
			break;

			case DIO_PORTD:
			DDRD = Copy_u8Value;
    15da:	e1 e3       	ldi	r30, 0x31	; 49
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	89 83       	std	Y+1, r24	; 0x01
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    15e8:	83 e0       	ldi	r24, 0x03	; 3
    15ea:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    15ec:	89 81       	ldd	r24, Y+1	; 0x01

}
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	08 95       	ret

000015fe <DIO_enuSetPortVal>:
ES_t DIO_enuSetPortVal(u8 Copy_u8PortID, u8 Copy_u8Value){
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	00 d0       	rcall	.+0      	; 0x1604 <DIO_enuSetPortVal+0x6>
    1604:	00 d0       	rcall	.+0      	; 0x1606 <DIO_enuSetPortVal+0x8>
    1606:	0f 92       	push	r0
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	8a 83       	std	Y+2, r24	; 0x02
    160e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1610:	19 82       	std	Y+1, r1	; 0x01

		if(Copy_u8PortID <= DIO_PORTD)
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	84 30       	cpi	r24, 0x04	; 4
    1616:	a8 f5       	brcc	.+106    	; 0x1682 <DIO_enuSetPortVal+0x84>
		{
			switch(Copy_u8PortID)
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	3d 83       	std	Y+5, r19	; 0x05
    1620:	2c 83       	std	Y+4, r18	; 0x04
    1622:	8c 81       	ldd	r24, Y+4	; 0x04
    1624:	9d 81       	ldd	r25, Y+5	; 0x05
    1626:	81 30       	cpi	r24, 0x01	; 1
    1628:	91 05       	cpc	r25, r1
    162a:	d1 f0       	breq	.+52     	; 0x1660 <DIO_enuSetPortVal+0x62>
    162c:	2c 81       	ldd	r18, Y+4	; 0x04
    162e:	3d 81       	ldd	r19, Y+5	; 0x05
    1630:	22 30       	cpi	r18, 0x02	; 2
    1632:	31 05       	cpc	r19, r1
    1634:	2c f4       	brge	.+10     	; 0x1640 <DIO_enuSetPortVal+0x42>
    1636:	8c 81       	ldd	r24, Y+4	; 0x04
    1638:	9d 81       	ldd	r25, Y+5	; 0x05
    163a:	00 97       	sbiw	r24, 0x00	; 0
    163c:	61 f0       	breq	.+24     	; 0x1656 <DIO_enuSetPortVal+0x58>
    163e:	1e c0       	rjmp	.+60     	; 0x167c <DIO_enuSetPortVal+0x7e>
    1640:	2c 81       	ldd	r18, Y+4	; 0x04
    1642:	3d 81       	ldd	r19, Y+5	; 0x05
    1644:	22 30       	cpi	r18, 0x02	; 2
    1646:	31 05       	cpc	r19, r1
    1648:	81 f0       	breq	.+32     	; 0x166a <DIO_enuSetPortVal+0x6c>
    164a:	8c 81       	ldd	r24, Y+4	; 0x04
    164c:	9d 81       	ldd	r25, Y+5	; 0x05
    164e:	83 30       	cpi	r24, 0x03	; 3
    1650:	91 05       	cpc	r25, r1
    1652:	81 f0       	breq	.+32     	; 0x1674 <DIO_enuSetPortVal+0x76>
    1654:	13 c0       	rjmp	.+38     	; 0x167c <DIO_enuSetPortVal+0x7e>
			{
				case DIO_PORTA:
				PORTA = Copy_u8Value;
    1656:	eb e3       	ldi	r30, 0x3B	; 59
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	80 83       	st	Z, r24
    165e:	0e c0       	rjmp	.+28     	; 0x167c <DIO_enuSetPortVal+0x7e>
				break;

				case DIO_PORTB:
				PORTB = Copy_u8Value;
    1660:	e8 e3       	ldi	r30, 0x38	; 56
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	80 83       	st	Z, r24
    1668:	09 c0       	rjmp	.+18     	; 0x167c <DIO_enuSetPortVal+0x7e>
				break;

				case DIO_PORTC:
				PORTC = Copy_u8Value;
    166a:	e5 e3       	ldi	r30, 0x35	; 53
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	80 83       	st	Z, r24
    1672:	04 c0       	rjmp	.+8      	; 0x167c <DIO_enuSetPortVal+0x7e>
				break;

				case DIO_PORTD:
				PORTD = Copy_u8Value;
    1674:	e2 e3       	ldi	r30, 0x32	; 50
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	89 83       	std	Y+1, r24	; 0x01
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <DIO_enuSetPortVal+0x88>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1682:	83 e0       	ldi	r24, 0x03	; 3
    1684:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorState;
    1686:	89 81       	ldd	r24, Y+1	; 0x01

}
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <DIO_enuGetPortVal>:
ES_t DIO_enuGetPortVal(u8 Copy_u8PortID, u8 *Copy_pu8Value){
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	00 d0       	rcall	.+0      	; 0x169e <DIO_enuGetPortVal+0x6>
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <DIO_enuGetPortVal+0x8>
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <DIO_enuGetPortVal+0xa>
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	8a 83       	std	Y+2, r24	; 0x02
    16a8:	7c 83       	std	Y+4, r23	; 0x04
    16aa:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    16ac:	19 82       	std	Y+1, r1	; 0x01
 if(Copy_pu8Value!=NULL){
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	9c 81       	ldd	r25, Y+4	; 0x04
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <DIO_enuGetPortVal+0x20>
    16b6:	43 c0       	rjmp	.+134    	; 0x173e <DIO_enuGetPortVal+0xa6>
		if(Copy_u8PortID <= DIO_PORTD)
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	84 30       	cpi	r24, 0x04	; 4
    16bc:	e8 f5       	brcc	.+122    	; 0x1738 <DIO_enuGetPortVal+0xa0>
		{
			switch(Copy_u8PortID)
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	3e 83       	std	Y+6, r19	; 0x06
    16c6:	2d 83       	std	Y+5, r18	; 0x05
    16c8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ca:	9e 81       	ldd	r25, Y+6	; 0x06
    16cc:	81 30       	cpi	r24, 0x01	; 1
    16ce:	91 05       	cpc	r25, r1
    16d0:	e1 f0       	breq	.+56     	; 0x170a <DIO_enuGetPortVal+0x72>
    16d2:	2d 81       	ldd	r18, Y+5	; 0x05
    16d4:	3e 81       	ldd	r19, Y+6	; 0x06
    16d6:	22 30       	cpi	r18, 0x02	; 2
    16d8:	31 05       	cpc	r19, r1
    16da:	2c f4       	brge	.+10     	; 0x16e6 <DIO_enuGetPortVal+0x4e>
    16dc:	8d 81       	ldd	r24, Y+5	; 0x05
    16de:	9e 81       	ldd	r25, Y+6	; 0x06
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	61 f0       	breq	.+24     	; 0x16fc <DIO_enuGetPortVal+0x64>
    16e4:	26 c0       	rjmp	.+76     	; 0x1732 <DIO_enuGetPortVal+0x9a>
    16e6:	2d 81       	ldd	r18, Y+5	; 0x05
    16e8:	3e 81       	ldd	r19, Y+6	; 0x06
    16ea:	22 30       	cpi	r18, 0x02	; 2
    16ec:	31 05       	cpc	r19, r1
    16ee:	a1 f0       	breq	.+40     	; 0x1718 <DIO_enuGetPortVal+0x80>
    16f0:	8d 81       	ldd	r24, Y+5	; 0x05
    16f2:	9e 81       	ldd	r25, Y+6	; 0x06
    16f4:	83 30       	cpi	r24, 0x03	; 3
    16f6:	91 05       	cpc	r25, r1
    16f8:	b1 f0       	breq	.+44     	; 0x1726 <DIO_enuGetPortVal+0x8e>
    16fa:	1b c0       	rjmp	.+54     	; 0x1732 <DIO_enuGetPortVal+0x9a>
			{
				case DIO_PORTA:
				 *Copy_pu8Value=PINA; //PINA is a reg not pin
    16fc:	e9 e3       	ldi	r30, 0x39	; 57
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	eb 81       	ldd	r30, Y+3	; 0x03
    1704:	fc 81       	ldd	r31, Y+4	; 0x04
    1706:	80 83       	st	Z, r24
    1708:	14 c0       	rjmp	.+40     	; 0x1732 <DIO_enuGetPortVal+0x9a>
				break;

				case DIO_PORTB:
				 *Copy_pu8Value=PINB;
    170a:	e6 e3       	ldi	r30, 0x36	; 54
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	eb 81       	ldd	r30, Y+3	; 0x03
    1712:	fc 81       	ldd	r31, Y+4	; 0x04
    1714:	80 83       	st	Z, r24
    1716:	0d c0       	rjmp	.+26     	; 0x1732 <DIO_enuGetPortVal+0x9a>
				break;

				case DIO_PORTC:
				 *Copy_pu8Value=PINC;
    1718:	e3 e3       	ldi	r30, 0x33	; 51
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	eb 81       	ldd	r30, Y+3	; 0x03
    1720:	fc 81       	ldd	r31, Y+4	; 0x04
    1722:	80 83       	st	Z, r24
    1724:	06 c0       	rjmp	.+12     	; 0x1732 <DIO_enuGetPortVal+0x9a>
				break;

				case DIO_PORTD:
			    *Copy_pu8Value=PIND;
    1726:	e0 e3       	ldi	r30, 0x30	; 48
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	eb 81       	ldd	r30, Y+3	; 0x03
    172e:	fc 81       	ldd	r31, Y+4	; 0x04
    1730:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	89 83       	std	Y+1, r24	; 0x01
    1736:	05 c0       	rjmp	.+10     	; 0x1742 <DIO_enuGetPortVal+0xaa>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1738:	83 e0       	ldi	r24, 0x03	; 3
    173a:	89 83       	std	Y+1, r24	; 0x01
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <DIO_enuGetPortVal+0xaa>
		}
 }
 else{
	 Local_enuErrorState = ES_NULL_POINTER;
    173e:	82 e0       	ldi	r24, 0x02	; 2
    1740:	89 83       	std	Y+1, r24	; 0x01
 }
		return Local_enuErrorState;
    1742:	89 81       	ldd	r24, Y+1	; 0x01


}
    1744:	26 96       	adiw	r28, 0x06	; 6
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	cd bf       	out	0x3d, r28	; 61
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <DIO_enuTogPortVal>:
ES_t DIO_enuTogPortVal(u8 Copy_u8PortID){
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	00 d0       	rcall	.+0      	; 0x175c <DIO_enuTogPortVal+0x6>
    175c:	00 d0       	rcall	.+0      	; 0x175e <DIO_enuTogPortVal+0x8>
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1764:	19 82       	std	Y+1, r1	; 0x01

			if(Copy_u8PortID <= DIO_PORTD)
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	84 30       	cpi	r24, 0x04	; 4
    176a:	08 f0       	brcs	.+2      	; 0x176e <DIO_enuTogPortVal+0x18>
    176c:	41 c0       	rjmp	.+130    	; 0x17f0 <DIO_enuTogPortVal+0x9a>
			{
				switch(Copy_u8PortID)
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	3c 83       	std	Y+4, r19	; 0x04
    1776:	2b 83       	std	Y+3, r18	; 0x03
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	9c 81       	ldd	r25, Y+4	; 0x04
    177c:	81 30       	cpi	r24, 0x01	; 1
    177e:	91 05       	cpc	r25, r1
    1780:	e9 f0       	breq	.+58     	; 0x17bc <DIO_enuTogPortVal+0x66>
    1782:	2b 81       	ldd	r18, Y+3	; 0x03
    1784:	3c 81       	ldd	r19, Y+4	; 0x04
    1786:	22 30       	cpi	r18, 0x02	; 2
    1788:	31 05       	cpc	r19, r1
    178a:	2c f4       	brge	.+10     	; 0x1796 <DIO_enuTogPortVal+0x40>
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	9c 81       	ldd	r25, Y+4	; 0x04
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	61 f0       	breq	.+24     	; 0x17ac <DIO_enuTogPortVal+0x56>
    1794:	2a c0       	rjmp	.+84     	; 0x17ea <DIO_enuTogPortVal+0x94>
    1796:	2b 81       	ldd	r18, Y+3	; 0x03
    1798:	3c 81       	ldd	r19, Y+4	; 0x04
    179a:	22 30       	cpi	r18, 0x02	; 2
    179c:	31 05       	cpc	r19, r1
    179e:	b1 f0       	breq	.+44     	; 0x17cc <DIO_enuTogPortVal+0x76>
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	9c 81       	ldd	r25, Y+4	; 0x04
    17a4:	83 30       	cpi	r24, 0x03	; 3
    17a6:	91 05       	cpc	r25, r1
    17a8:	c9 f0       	breq	.+50     	; 0x17dc <DIO_enuTogPortVal+0x86>
    17aa:	1f c0       	rjmp	.+62     	; 0x17ea <DIO_enuTogPortVal+0x94>
				{
					case DIO_PORTA:
					 PORTA=~PORTA;
    17ac:	ab e3       	ldi	r26, 0x3B	; 59
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	eb e3       	ldi	r30, 0x3B	; 59
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	80 95       	com	r24
    17b8:	8c 93       	st	X, r24
    17ba:	17 c0       	rjmp	.+46     	; 0x17ea <DIO_enuTogPortVal+0x94>
					break;

					case DIO_PORTB:
					 PORTB=~PORTB;
    17bc:	a8 e3       	ldi	r26, 0x38	; 56
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e8 e3       	ldi	r30, 0x38	; 56
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	80 95       	com	r24
    17c8:	8c 93       	st	X, r24
    17ca:	0f c0       	rjmp	.+30     	; 0x17ea <DIO_enuTogPortVal+0x94>
					break;

					case DIO_PORTC:
					 PORTC=~PORTC;
    17cc:	a5 e3       	ldi	r26, 0x35	; 53
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e5 e3       	ldi	r30, 0x35	; 53
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	80 95       	com	r24
    17d8:	8c 93       	st	X, r24
    17da:	07 c0       	rjmp	.+14     	; 0x17ea <DIO_enuTogPortVal+0x94>
					break;

					case DIO_PORTD:
					 PORTD=~PORTD;
    17dc:	a2 e3       	ldi	r26, 0x32	; 50
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e2 e3       	ldi	r30, 0x32	; 50
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	80 95       	com	r24
    17e8:	8c 93       	st	X, r24
					break;
				}
				Local_enuErrorState = ES_OK;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <DIO_enuTogPortVal+0x9e>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    17f0:	83 e0       	ldi	r24, 0x03	; 3
    17f2:	89 83       	std	Y+1, r24	; 0x01
			}

			return Local_enuErrorState;
    17f4:	89 81       	ldd	r24, Y+1	; 0x01

}
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <DIO_enuSetPinDirection>:


ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID, u8  Copy_u8Value){
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	00 d0       	rcall	.+0      	; 0x180a <DIO_enuSetPinDirection+0x6>
    180a:	00 d0       	rcall	.+0      	; 0x180c <DIO_enuSetPinDirection+0x8>
    180c:	00 d0       	rcall	.+0      	; 0x180e <DIO_enuSetPinDirection+0xa>
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	8a 83       	std	Y+2, r24	; 0x02
    1814:	6b 83       	std	Y+3, r22	; 0x03
    1816:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1818:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8PortID <= DIO_PORTD	&& Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT){
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	84 30       	cpi	r24, 0x04	; 4
    181e:	08 f0       	brcs	.+2      	; 0x1822 <DIO_enuSetPinDirection+0x1e>
    1820:	d1 c0       	rjmp	.+418    	; 0x19c4 <DIO_enuSetPinDirection+0x1c0>
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	88 30       	cpi	r24, 0x08	; 8
    1826:	08 f0       	brcs	.+2      	; 0x182a <DIO_enuSetPinDirection+0x26>
    1828:	cd c0       	rjmp	.+410    	; 0x19c4 <DIO_enuSetPinDirection+0x1c0>
    182a:	8c 81       	ldd	r24, Y+4	; 0x04
    182c:	82 30       	cpi	r24, 0x02	; 2
    182e:	08 f0       	brcs	.+2      	; 0x1832 <DIO_enuSetPinDirection+0x2e>
    1830:	c9 c0       	rjmp	.+402    	; 0x19c4 <DIO_enuSetPinDirection+0x1c0>
	switch(Copy_u8PortID)
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	3e 83       	std	Y+6, r19	; 0x06
    183a:	2d 83       	std	Y+5, r18	; 0x05
    183c:	6d 81       	ldd	r22, Y+5	; 0x05
    183e:	7e 81       	ldd	r23, Y+6	; 0x06
    1840:	61 30       	cpi	r22, 0x01	; 1
    1842:	71 05       	cpc	r23, r1
    1844:	09 f4       	brne	.+2      	; 0x1848 <DIO_enuSetPinDirection+0x44>
    1846:	41 c0       	rjmp	.+130    	; 0x18ca <DIO_enuSetPinDirection+0xc6>
    1848:	8d 81       	ldd	r24, Y+5	; 0x05
    184a:	9e 81       	ldd	r25, Y+6	; 0x06
    184c:	82 30       	cpi	r24, 0x02	; 2
    184e:	91 05       	cpc	r25, r1
    1850:	34 f4       	brge	.+12     	; 0x185e <DIO_enuSetPinDirection+0x5a>
    1852:	2d 81       	ldd	r18, Y+5	; 0x05
    1854:	3e 81       	ldd	r19, Y+6	; 0x06
    1856:	21 15       	cp	r18, r1
    1858:	31 05       	cpc	r19, r1
    185a:	71 f0       	breq	.+28     	; 0x1878 <DIO_enuSetPinDirection+0x74>
    185c:	b0 c0       	rjmp	.+352    	; 0x19be <DIO_enuSetPinDirection+0x1ba>
    185e:	6d 81       	ldd	r22, Y+5	; 0x05
    1860:	7e 81       	ldd	r23, Y+6	; 0x06
    1862:	62 30       	cpi	r22, 0x02	; 2
    1864:	71 05       	cpc	r23, r1
    1866:	09 f4       	brne	.+2      	; 0x186a <DIO_enuSetPinDirection+0x66>
    1868:	59 c0       	rjmp	.+178    	; 0x191c <DIO_enuSetPinDirection+0x118>
    186a:	8d 81       	ldd	r24, Y+5	; 0x05
    186c:	9e 81       	ldd	r25, Y+6	; 0x06
    186e:	83 30       	cpi	r24, 0x03	; 3
    1870:	91 05       	cpc	r25, r1
    1872:	09 f4       	brne	.+2      	; 0x1876 <DIO_enuSetPinDirection+0x72>
    1874:	7c c0       	rjmp	.+248    	; 0x196e <DIO_enuSetPinDirection+0x16a>
    1876:	a3 c0       	rjmp	.+326    	; 0x19be <DIO_enuSetPinDirection+0x1ba>
				{
					case DIO_PORTA:
						DDRA &=~(1 << Copy_u8PinID);
    1878:	aa e3       	ldi	r26, 0x3A	; 58
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	ea e3       	ldi	r30, 0x3A	; 58
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	48 2f       	mov	r20, r24
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <DIO_enuSetPinDirection+0x90>
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	2a 95       	dec	r18
    1896:	e2 f7       	brpl	.-8      	; 0x1890 <DIO_enuSetPinDirection+0x8c>
    1898:	80 95       	com	r24
    189a:	84 23       	and	r24, r20
    189c:	8c 93       	st	X, r24
						DDRA |= (Copy_u8Value << Copy_u8PinID);
    189e:	aa e3       	ldi	r26, 0x3A	; 58
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	ea e3       	ldi	r30, 0x3A	; 58
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	48 2f       	mov	r20, r24
    18aa:	8c 81       	ldd	r24, Y+4	; 0x04
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	88 2f       	mov	r24, r24
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	b9 01       	movw	r22, r18
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <DIO_enuSetPinDirection+0xba>
    18ba:	66 0f       	add	r22, r22
    18bc:	77 1f       	adc	r23, r23
    18be:	8a 95       	dec	r24
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <DIO_enuSetPinDirection+0xb6>
    18c2:	cb 01       	movw	r24, r22
    18c4:	84 2b       	or	r24, r20
    18c6:	8c 93       	st	X, r24
    18c8:	7a c0       	rjmp	.+244    	; 0x19be <DIO_enuSetPinDirection+0x1ba>
					break;

					case DIO_PORTB:
						DDRB &=~(1 << Copy_u8PinID);
    18ca:	a7 e3       	ldi	r26, 0x37	; 55
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	e7 e3       	ldi	r30, 0x37	; 55
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	48 2f       	mov	r20, r24
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <DIO_enuSetPinDirection+0xe2>
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	2a 95       	dec	r18
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <DIO_enuSetPinDirection+0xde>
    18ea:	80 95       	com	r24
    18ec:	84 23       	and	r24, r20
    18ee:	8c 93       	st	X, r24
					    DDRB |= (Copy_u8Value << Copy_u8PinID);
    18f0:	a7 e3       	ldi	r26, 0x37	; 55
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e7 e3       	ldi	r30, 0x37	; 55
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	48 2f       	mov	r20, r24
    18fc:	8c 81       	ldd	r24, Y+4	; 0x04
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	88 2f       	mov	r24, r24
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	b9 01       	movw	r22, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <DIO_enuSetPinDirection+0x10c>
    190c:	66 0f       	add	r22, r22
    190e:	77 1f       	adc	r23, r23
    1910:	8a 95       	dec	r24
    1912:	e2 f7       	brpl	.-8      	; 0x190c <DIO_enuSetPinDirection+0x108>
    1914:	cb 01       	movw	r24, r22
    1916:	84 2b       	or	r24, r20
    1918:	8c 93       	st	X, r24
    191a:	51 c0       	rjmp	.+162    	; 0x19be <DIO_enuSetPinDirection+0x1ba>
					break;

					case DIO_PORTC:
						DDRC &=~(1 << Copy_u8PinID);
    191c:	a4 e3       	ldi	r26, 0x34	; 52
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e4 e3       	ldi	r30, 0x34	; 52
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	48 2f       	mov	r20, r24
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <DIO_enuSetPinDirection+0x134>
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	2a 95       	dec	r18
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <DIO_enuSetPinDirection+0x130>
    193c:	80 95       	com	r24
    193e:	84 23       	and	r24, r20
    1940:	8c 93       	st	X, r24
						DDRC|= (Copy_u8Value << Copy_u8PinID);
    1942:	a4 e3       	ldi	r26, 0x34	; 52
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e4 e3       	ldi	r30, 0x34	; 52
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	48 2f       	mov	r20, r24
    194e:	8c 81       	ldd	r24, Y+4	; 0x04
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	88 2f       	mov	r24, r24
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	b9 01       	movw	r22, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <DIO_enuSetPinDirection+0x15e>
    195e:	66 0f       	add	r22, r22
    1960:	77 1f       	adc	r23, r23
    1962:	8a 95       	dec	r24
    1964:	e2 f7       	brpl	.-8      	; 0x195e <DIO_enuSetPinDirection+0x15a>
    1966:	cb 01       	movw	r24, r22
    1968:	84 2b       	or	r24, r20
    196a:	8c 93       	st	X, r24
    196c:	28 c0       	rjmp	.+80     	; 0x19be <DIO_enuSetPinDirection+0x1ba>
					break;

					case DIO_PORTD:
						DDRD &=~(1 << Copy_u8PinID);
    196e:	a1 e3       	ldi	r26, 0x31	; 49
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e1 e3       	ldi	r30, 0x31	; 49
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	48 2f       	mov	r20, r24
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	02 c0       	rjmp	.+4      	; 0x198a <DIO_enuSetPinDirection+0x186>
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	2a 95       	dec	r18
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <DIO_enuSetPinDirection+0x182>
    198e:	80 95       	com	r24
    1990:	84 23       	and	r24, r20
    1992:	8c 93       	st	X, r24
						DDRD |= (Copy_u8Value << Copy_u8PinID);
    1994:	a1 e3       	ldi	r26, 0x31	; 49
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e1 e3       	ldi	r30, 0x31	; 49
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	48 2f       	mov	r20, r24
    19a0:	8c 81       	ldd	r24, Y+4	; 0x04
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	88 2f       	mov	r24, r24
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	b9 01       	movw	r22, r18
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <DIO_enuSetPinDirection+0x1b0>
    19b0:	66 0f       	add	r22, r22
    19b2:	77 1f       	adc	r23, r23
    19b4:	8a 95       	dec	r24
    19b6:	e2 f7       	brpl	.-8      	; 0x19b0 <DIO_enuSetPinDirection+0x1ac>
    19b8:	cb 01       	movw	r24, r22
    19ba:	84 2b       	or	r24, r20
    19bc:	8c 93       	st	X, r24
					break;
				}
				Local_enuErrorState = ES_OK;
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <DIO_enuSetPinDirection+0x1c4>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    19c4:	83 e0       	ldi	r24, 0x03	; 3
    19c6:	89 83       	std	Y+1, r24	; 0x01
			}

			return Local_enuErrorState;
    19c8:	89 81       	ldd	r24, Y+1	; 0x01

}
    19ca:	26 96       	adiw	r28, 0x06	; 6
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <DIO_enuSetPinVal>:

ES_t DIO_enuSetPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID, u8 Copy_u8Value){
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <DIO_enuSetPinVal+0x6>
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <DIO_enuSetPinVal+0x8>
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <DIO_enuSetPinVal+0xa>
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	8a 83       	std	Y+2, r24	; 0x02
    19ec:	6b 83       	std	Y+3, r22	; 0x03
    19ee:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    19f0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_PORTD	&& Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= HIGH){
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	84 30       	cpi	r24, 0x04	; 4
    19f6:	08 f0       	brcs	.+2      	; 0x19fa <DIO_enuSetPinVal+0x1e>
    19f8:	d1 c0       	rjmp	.+418    	; 0x1b9c <DIO_enuSetPinVal+0x1c0>
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	88 30       	cpi	r24, 0x08	; 8
    19fe:	08 f0       	brcs	.+2      	; 0x1a02 <DIO_enuSetPinVal+0x26>
    1a00:	cd c0       	rjmp	.+410    	; 0x1b9c <DIO_enuSetPinVal+0x1c0>
    1a02:	8c 81       	ldd	r24, Y+4	; 0x04
    1a04:	82 30       	cpi	r24, 0x02	; 2
    1a06:	08 f0       	brcs	.+2      	; 0x1a0a <DIO_enuSetPinVal+0x2e>
    1a08:	c9 c0       	rjmp	.+402    	; 0x1b9c <DIO_enuSetPinVal+0x1c0>
		switch(Copy_u8PortID)
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	3e 83       	std	Y+6, r19	; 0x06
    1a12:	2d 83       	std	Y+5, r18	; 0x05
    1a14:	6d 81       	ldd	r22, Y+5	; 0x05
    1a16:	7e 81       	ldd	r23, Y+6	; 0x06
    1a18:	61 30       	cpi	r22, 0x01	; 1
    1a1a:	71 05       	cpc	r23, r1
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <DIO_enuSetPinVal+0x44>
    1a1e:	41 c0       	rjmp	.+130    	; 0x1aa2 <DIO_enuSetPinVal+0xc6>
    1a20:	8d 81       	ldd	r24, Y+5	; 0x05
    1a22:	9e 81       	ldd	r25, Y+6	; 0x06
    1a24:	82 30       	cpi	r24, 0x02	; 2
    1a26:	91 05       	cpc	r25, r1
    1a28:	34 f4       	brge	.+12     	; 0x1a36 <DIO_enuSetPinVal+0x5a>
    1a2a:	2d 81       	ldd	r18, Y+5	; 0x05
    1a2c:	3e 81       	ldd	r19, Y+6	; 0x06
    1a2e:	21 15       	cp	r18, r1
    1a30:	31 05       	cpc	r19, r1
    1a32:	71 f0       	breq	.+28     	; 0x1a50 <DIO_enuSetPinVal+0x74>
    1a34:	b0 c0       	rjmp	.+352    	; 0x1b96 <DIO_enuSetPinVal+0x1ba>
    1a36:	6d 81       	ldd	r22, Y+5	; 0x05
    1a38:	7e 81       	ldd	r23, Y+6	; 0x06
    1a3a:	62 30       	cpi	r22, 0x02	; 2
    1a3c:	71 05       	cpc	r23, r1
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <DIO_enuSetPinVal+0x66>
    1a40:	59 c0       	rjmp	.+178    	; 0x1af4 <DIO_enuSetPinVal+0x118>
    1a42:	8d 81       	ldd	r24, Y+5	; 0x05
    1a44:	9e 81       	ldd	r25, Y+6	; 0x06
    1a46:	83 30       	cpi	r24, 0x03	; 3
    1a48:	91 05       	cpc	r25, r1
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <DIO_enuSetPinVal+0x72>
    1a4c:	7c c0       	rjmp	.+248    	; 0x1b46 <DIO_enuSetPinVal+0x16a>
    1a4e:	a3 c0       	rjmp	.+326    	; 0x1b96 <DIO_enuSetPinVal+0x1ba>
					{
						case DIO_PORTA:
							PORTA &=~(1 << Copy_u8PinID);
    1a50:	ab e3       	ldi	r26, 0x3B	; 59
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	eb e3       	ldi	r30, 0x3B	; 59
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	48 2f       	mov	r20, r24
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <DIO_enuSetPinVal+0x90>
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	2a 95       	dec	r18
    1a6e:	e2 f7       	brpl	.-8      	; 0x1a68 <DIO_enuSetPinVal+0x8c>
    1a70:	80 95       	com	r24
    1a72:	84 23       	and	r24, r20
    1a74:	8c 93       	st	X, r24
							PORTA |= (Copy_u8Value << Copy_u8PinID);
    1a76:	ab e3       	ldi	r26, 0x3B	; 59
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	eb e3       	ldi	r30, 0x3B	; 59
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	48 2f       	mov	r20, r24
    1a82:	8c 81       	ldd	r24, Y+4	; 0x04
    1a84:	28 2f       	mov	r18, r24
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	88 2f       	mov	r24, r24
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	b9 01       	movw	r22, r18
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <DIO_enuSetPinVal+0xba>
    1a92:	66 0f       	add	r22, r22
    1a94:	77 1f       	adc	r23, r23
    1a96:	8a 95       	dec	r24
    1a98:	e2 f7       	brpl	.-8      	; 0x1a92 <DIO_enuSetPinVal+0xb6>
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	84 2b       	or	r24, r20
    1a9e:	8c 93       	st	X, r24
    1aa0:	7a c0       	rjmp	.+244    	; 0x1b96 <DIO_enuSetPinVal+0x1ba>
						break;

						case DIO_PORTB:
							PORTB &=~(1 << Copy_u8PinID);
    1aa2:	a8 e3       	ldi	r26, 0x38	; 56
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	e8 e3       	ldi	r30, 0x38	; 56
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	48 2f       	mov	r20, r24
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <DIO_enuSetPinVal+0xe2>
    1aba:	88 0f       	add	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	2a 95       	dec	r18
    1ac0:	e2 f7       	brpl	.-8      	; 0x1aba <DIO_enuSetPinVal+0xde>
    1ac2:	80 95       	com	r24
    1ac4:	84 23       	and	r24, r20
    1ac6:	8c 93       	st	X, r24
							PORTB |= (Copy_u8Value << Copy_u8PinID);
    1ac8:	a8 e3       	ldi	r26, 0x38	; 56
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e8 e3       	ldi	r30, 0x38	; 56
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	48 2f       	mov	r20, r24
    1ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	88 2f       	mov	r24, r24
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	b9 01       	movw	r22, r18
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <DIO_enuSetPinVal+0x10c>
    1ae4:	66 0f       	add	r22, r22
    1ae6:	77 1f       	adc	r23, r23
    1ae8:	8a 95       	dec	r24
    1aea:	e2 f7       	brpl	.-8      	; 0x1ae4 <DIO_enuSetPinVal+0x108>
    1aec:	cb 01       	movw	r24, r22
    1aee:	84 2b       	or	r24, r20
    1af0:	8c 93       	st	X, r24
    1af2:	51 c0       	rjmp	.+162    	; 0x1b96 <DIO_enuSetPinVal+0x1ba>
						break;

						case DIO_PORTC:
							PORTC &=~(1 << Copy_u8PinID);
    1af4:	a5 e3       	ldi	r26, 0x35	; 53
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e5 e3       	ldi	r30, 0x35	; 53
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	48 2f       	mov	r20, r24
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <DIO_enuSetPinVal+0x134>
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	2a 95       	dec	r18
    1b12:	e2 f7       	brpl	.-8      	; 0x1b0c <DIO_enuSetPinVal+0x130>
    1b14:	80 95       	com	r24
    1b16:	84 23       	and	r24, r20
    1b18:	8c 93       	st	X, r24
							PORTC|= (Copy_u8Value << Copy_u8PinID);
    1b1a:	a5 e3       	ldi	r26, 0x35	; 53
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e5 e3       	ldi	r30, 0x35	; 53
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	48 2f       	mov	r20, r24
    1b26:	8c 81       	ldd	r24, Y+4	; 0x04
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	88 2f       	mov	r24, r24
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	b9 01       	movw	r22, r18
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <DIO_enuSetPinVal+0x15e>
    1b36:	66 0f       	add	r22, r22
    1b38:	77 1f       	adc	r23, r23
    1b3a:	8a 95       	dec	r24
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <DIO_enuSetPinVal+0x15a>
    1b3e:	cb 01       	movw	r24, r22
    1b40:	84 2b       	or	r24, r20
    1b42:	8c 93       	st	X, r24
    1b44:	28 c0       	rjmp	.+80     	; 0x1b96 <DIO_enuSetPinVal+0x1ba>
						break;

						case DIO_PORTD:
							PORTD &=~(1 << Copy_u8PinID);
    1b46:	a2 e3       	ldi	r26, 0x32	; 50
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e2 e3       	ldi	r30, 0x32	; 50
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	48 2f       	mov	r20, r24
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	28 2f       	mov	r18, r24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <DIO_enuSetPinVal+0x186>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	2a 95       	dec	r18
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <DIO_enuSetPinVal+0x182>
    1b66:	80 95       	com	r24
    1b68:	84 23       	and	r24, r20
    1b6a:	8c 93       	st	X, r24
							PORTD |= (Copy_u8Value << Copy_u8PinID);
    1b6c:	a2 e3       	ldi	r26, 0x32	; 50
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e2 e3       	ldi	r30, 0x32	; 50
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	48 2f       	mov	r20, r24
    1b78:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	88 2f       	mov	r24, r24
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	b9 01       	movw	r22, r18
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <DIO_enuSetPinVal+0x1b0>
    1b88:	66 0f       	add	r22, r22
    1b8a:	77 1f       	adc	r23, r23
    1b8c:	8a 95       	dec	r24
    1b8e:	e2 f7       	brpl	.-8      	; 0x1b88 <DIO_enuSetPinVal+0x1ac>
    1b90:	cb 01       	movw	r24, r22
    1b92:	84 2b       	or	r24, r20
    1b94:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorState = ES_OK;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	89 83       	std	Y+1, r24	; 0x01
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <DIO_enuSetPinVal+0x1c4>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
    1b9c:	83 e0       	ldi	r24, 0x03	; 3
    1b9e:	89 83       	std	Y+1, r24	; 0x01
				}

				return Local_enuErrorState;
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba2:	26 96       	adiw	r28, 0x06	; 6
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <DIO_enuGetPinVal>:

ES_t DIO_enuGetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID,u8 *Copy_pu8Value){
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	27 97       	sbiw	r28, 0x07	; 7
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	8a 83       	std	Y+2, r24	; 0x02
    1bca:	6b 83       	std	Y+3, r22	; 0x03
    1bcc:	5d 83       	std	Y+5, r21	; 0x05
    1bce:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1bd0:	19 82       	std	Y+1, r1	; 0x01

	 if(Copy_pu8Value!=NULL){
    1bd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <DIO_enuGetPinVal+0x28>
    1bda:	7a c0       	rjmp	.+244    	; 0x1cd0 <DIO_enuGetPinVal+0x11c>
			if(Copy_u8PortID <= DIO_PORTD)
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	84 30       	cpi	r24, 0x04	; 4
    1be0:	08 f0       	brcs	.+2      	; 0x1be4 <DIO_enuGetPinVal+0x30>
    1be2:	73 c0       	rjmp	.+230    	; 0x1cca <DIO_enuGetPinVal+0x116>
			{
				switch(Copy_u8PortID)
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	3f 83       	std	Y+7, r19	; 0x07
    1bec:	2e 83       	std	Y+6, r18	; 0x06
    1bee:	4e 81       	ldd	r20, Y+6	; 0x06
    1bf0:	5f 81       	ldd	r21, Y+7	; 0x07
    1bf2:	41 30       	cpi	r20, 0x01	; 1
    1bf4:	51 05       	cpc	r21, r1
    1bf6:	59 f1       	breq	.+86     	; 0x1c4e <DIO_enuGetPinVal+0x9a>
    1bf8:	8e 81       	ldd	r24, Y+6	; 0x06
    1bfa:	9f 81       	ldd	r25, Y+7	; 0x07
    1bfc:	82 30       	cpi	r24, 0x02	; 2
    1bfe:	91 05       	cpc	r25, r1
    1c00:	34 f4       	brge	.+12     	; 0x1c0e <DIO_enuGetPinVal+0x5a>
    1c02:	2e 81       	ldd	r18, Y+6	; 0x06
    1c04:	3f 81       	ldd	r19, Y+7	; 0x07
    1c06:	21 15       	cp	r18, r1
    1c08:	31 05       	cpc	r19, r1
    1c0a:	69 f0       	breq	.+26     	; 0x1c26 <DIO_enuGetPinVal+0x72>
    1c0c:	5b c0       	rjmp	.+182    	; 0x1cc4 <DIO_enuGetPinVal+0x110>
    1c0e:	4e 81       	ldd	r20, Y+6	; 0x06
    1c10:	5f 81       	ldd	r21, Y+7	; 0x07
    1c12:	42 30       	cpi	r20, 0x02	; 2
    1c14:	51 05       	cpc	r21, r1
    1c16:	79 f1       	breq	.+94     	; 0x1c76 <DIO_enuGetPinVal+0xc2>
    1c18:	8e 81       	ldd	r24, Y+6	; 0x06
    1c1a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c1c:	83 30       	cpi	r24, 0x03	; 3
    1c1e:	91 05       	cpc	r25, r1
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <DIO_enuGetPinVal+0x70>
    1c22:	3d c0       	rjmp	.+122    	; 0x1c9e <DIO_enuGetPinVal+0xea>
    1c24:	4f c0       	rjmp	.+158    	; 0x1cc4 <DIO_enuGetPinVal+0x110>
				{
					case DIO_PORTA:
					 *Copy_pu8Value=((PINA >> Copy_u8PinID) & 1);
    1c26:	e9 e3       	ldi	r30, 0x39	; 57
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	28 2f       	mov	r18, r24
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	88 2f       	mov	r24, r24
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	a9 01       	movw	r20, r18
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <DIO_enuGetPinVal+0x8a>
    1c3a:	55 95       	asr	r21
    1c3c:	47 95       	ror	r20
    1c3e:	8a 95       	dec	r24
    1c40:	e2 f7       	brpl	.-8      	; 0x1c3a <DIO_enuGetPinVal+0x86>
    1c42:	ca 01       	movw	r24, r20
    1c44:	81 70       	andi	r24, 0x01	; 1
    1c46:	ec 81       	ldd	r30, Y+4	; 0x04
    1c48:	fd 81       	ldd	r31, Y+5	; 0x05
    1c4a:	80 83       	st	Z, r24
    1c4c:	3b c0       	rjmp	.+118    	; 0x1cc4 <DIO_enuGetPinVal+0x110>
					break;

					case DIO_PORTB:
					 *Copy_pu8Value=((PINB >> Copy_u8PinID) & 1);
    1c4e:	e6 e3       	ldi	r30, 0x36	; 54
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	88 2f       	mov	r24, r24
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	a9 01       	movw	r20, r18
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <DIO_enuGetPinVal+0xb2>
    1c62:	55 95       	asr	r21
    1c64:	47 95       	ror	r20
    1c66:	8a 95       	dec	r24
    1c68:	e2 f7       	brpl	.-8      	; 0x1c62 <DIO_enuGetPinVal+0xae>
    1c6a:	ca 01       	movw	r24, r20
    1c6c:	81 70       	andi	r24, 0x01	; 1
    1c6e:	ec 81       	ldd	r30, Y+4	; 0x04
    1c70:	fd 81       	ldd	r31, Y+5	; 0x05
    1c72:	80 83       	st	Z, r24
    1c74:	27 c0       	rjmp	.+78     	; 0x1cc4 <DIO_enuGetPinVal+0x110>
					break;

					case DIO_PORTC:
					 *Copy_pu8Value=((PINC >> Copy_u8PinID) & 1);
    1c76:	e3 e3       	ldi	r30, 0x33	; 51
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	88 2f       	mov	r24, r24
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	a9 01       	movw	r20, r18
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <DIO_enuGetPinVal+0xda>
    1c8a:	55 95       	asr	r21
    1c8c:	47 95       	ror	r20
    1c8e:	8a 95       	dec	r24
    1c90:	e2 f7       	brpl	.-8      	; 0x1c8a <DIO_enuGetPinVal+0xd6>
    1c92:	ca 01       	movw	r24, r20
    1c94:	81 70       	andi	r24, 0x01	; 1
    1c96:	ec 81       	ldd	r30, Y+4	; 0x04
    1c98:	fd 81       	ldd	r31, Y+5	; 0x05
    1c9a:	80 83       	st	Z, r24
    1c9c:	13 c0       	rjmp	.+38     	; 0x1cc4 <DIO_enuGetPinVal+0x110>
					break;

					case DIO_PORTD:
				    *Copy_pu8Value=((PIND >> Copy_u8PinID) & 1);
    1c9e:	e0 e3       	ldi	r30, 0x30	; 48
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	88 2f       	mov	r24, r24
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a9 01       	movw	r20, r18
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <DIO_enuGetPinVal+0x102>
    1cb2:	55 95       	asr	r21
    1cb4:	47 95       	ror	r20
    1cb6:	8a 95       	dec	r24
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <DIO_enuGetPinVal+0xfe>
    1cba:	ca 01       	movw	r24, r20
    1cbc:	81 70       	andi	r24, 0x01	; 1
    1cbe:	ec 81       	ldd	r30, Y+4	; 0x04
    1cc0:	fd 81       	ldd	r31, Y+5	; 0x05
    1cc2:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorState = ES_OK;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	05 c0       	rjmp	.+10     	; 0x1cd4 <DIO_enuGetPinVal+0x120>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    1cca:	83 e0       	ldi	r24, 0x03	; 3
    1ccc:	89 83       	std	Y+1, r24	; 0x01
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <DIO_enuGetPinVal+0x120>
			}
	 }
	 else{
		 Local_enuErrorState = ES_NULL_POINTER;
    1cd0:	82 e0       	ldi	r24, 0x02	; 2
    1cd2:	89 83       	std	Y+1, r24	; 0x01
	 }
			return Local_enuErrorState;
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01


}
    1cd6:	27 96       	adiw	r28, 0x07	; 7
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <DIO_enuTogPinVal>:
ES_t DIO_enuTogPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID){
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <DIO_enuTogPinVal+0x6>
    1cee:	00 d0       	rcall	.+0      	; 0x1cf0 <DIO_enuTogPinVal+0x8>
    1cf0:	0f 92       	push	r0
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	8a 83       	std	Y+2, r24	; 0x02
    1cf8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1cfa:	19 82       	std	Y+1, r1	; 0x01

				if(Copy_u8PortID <= DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	84 30       	cpi	r24, 0x04	; 4
    1d00:	08 f0       	brcs	.+2      	; 0x1d04 <DIO_enuTogPinVal+0x1c>
    1d02:	75 c0       	rjmp	.+234    	; 0x1dee <DIO_enuTogPinVal+0x106>
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	88 30       	cpi	r24, 0x08	; 8
    1d08:	08 f0       	brcs	.+2      	; 0x1d0c <DIO_enuTogPinVal+0x24>
    1d0a:	71 c0       	rjmp	.+226    	; 0x1dee <DIO_enuTogPinVal+0x106>
				{
					switch(Copy_u8PortID)
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	3d 83       	std	Y+5, r19	; 0x05
    1d14:	2c 83       	std	Y+4, r18	; 0x04
    1d16:	8c 81       	ldd	r24, Y+4	; 0x04
    1d18:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	49 f1       	breq	.+82     	; 0x1d72 <DIO_enuTogPinVal+0x8a>
    1d20:	2c 81       	ldd	r18, Y+4	; 0x04
    1d22:	3d 81       	ldd	r19, Y+5	; 0x05
    1d24:	22 30       	cpi	r18, 0x02	; 2
    1d26:	31 05       	cpc	r19, r1
    1d28:	2c f4       	brge	.+10     	; 0x1d34 <DIO_enuTogPinVal+0x4c>
    1d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	61 f0       	breq	.+24     	; 0x1d4a <DIO_enuTogPinVal+0x62>
    1d32:	5a c0       	rjmp	.+180    	; 0x1de8 <DIO_enuTogPinVal+0x100>
    1d34:	2c 81       	ldd	r18, Y+4	; 0x04
    1d36:	3d 81       	ldd	r19, Y+5	; 0x05
    1d38:	22 30       	cpi	r18, 0x02	; 2
    1d3a:	31 05       	cpc	r19, r1
    1d3c:	71 f1       	breq	.+92     	; 0x1d9a <DIO_enuTogPinVal+0xb2>
    1d3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d40:	9d 81       	ldd	r25, Y+5	; 0x05
    1d42:	83 30       	cpi	r24, 0x03	; 3
    1d44:	91 05       	cpc	r25, r1
    1d46:	e9 f1       	breq	.+122    	; 0x1dc2 <DIO_enuTogPinVal+0xda>
    1d48:	4f c0       	rjmp	.+158    	; 0x1de8 <DIO_enuTogPinVal+0x100>
					{
						case DIO_PORTA:
						 PORTA^=(1 << Copy_u8PinID);
    1d4a:	ab e3       	ldi	r26, 0x3B	; 59
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	eb e3       	ldi	r30, 0x3B	; 59
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	48 2f       	mov	r20, r24
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	28 2f       	mov	r18, r24
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	02 2e       	mov	r0, r18
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <DIO_enuTogPinVal+0x80>
    1d64:	88 0f       	add	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	0a 94       	dec	r0
    1d6a:	e2 f7       	brpl	.-8      	; 0x1d64 <DIO_enuTogPinVal+0x7c>
    1d6c:	84 27       	eor	r24, r20
    1d6e:	8c 93       	st	X, r24
    1d70:	3b c0       	rjmp	.+118    	; 0x1de8 <DIO_enuTogPinVal+0x100>
						break;

						case DIO_PORTB:
						 PORTB^=(1 << Copy_u8PinID);
    1d72:	a8 e3       	ldi	r26, 0x38	; 56
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e8 e3       	ldi	r30, 0x38	; 56
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	48 2f       	mov	r20, r24
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	02 2e       	mov	r0, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <DIO_enuTogPinVal+0xa8>
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	0a 94       	dec	r0
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <DIO_enuTogPinVal+0xa4>
    1d94:	84 27       	eor	r24, r20
    1d96:	8c 93       	st	X, r24
    1d98:	27 c0       	rjmp	.+78     	; 0x1de8 <DIO_enuTogPinVal+0x100>
						break;

						case DIO_PORTC:
						 PORTC^=(1 << Copy_u8PinID);
    1d9a:	a5 e3       	ldi	r26, 0x35	; 53
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e5 e3       	ldi	r30, 0x35	; 53
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	48 2f       	mov	r20, r24
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	02 2e       	mov	r0, r18
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <DIO_enuTogPinVal+0xd0>
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	0a 94       	dec	r0
    1dba:	e2 f7       	brpl	.-8      	; 0x1db4 <DIO_enuTogPinVal+0xcc>
    1dbc:	84 27       	eor	r24, r20
    1dbe:	8c 93       	st	X, r24
    1dc0:	13 c0       	rjmp	.+38     	; 0x1de8 <DIO_enuTogPinVal+0x100>
						break;

						case DIO_PORTD:
						 PORTD^=(1 << Copy_u8PinID);
    1dc2:	a2 e3       	ldi	r26, 0x32	; 50
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e2 e3       	ldi	r30, 0x32	; 50
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	48 2f       	mov	r20, r24
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	02 2e       	mov	r0, r18
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <DIO_enuTogPinVal+0xf8>
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	0a 94       	dec	r0
    1de2:	e2 f7       	brpl	.-8      	; 0x1ddc <DIO_enuTogPinVal+0xf4>
    1de4:	84 27       	eor	r24, r20
    1de6:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorState = ES_OK;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	89 83       	std	Y+1, r24	; 0x01
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <DIO_enuTogPinVal+0x10a>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
    1dee:	83 e0       	ldi	r24, 0x03	; 3
    1df0:	89 83       	std	Y+1, r24	; 0x01
				}

				return Local_enuErrorState;
    1df2:	89 81       	ldd	r24, Y+1	; 0x01

	}
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <ADC_enuInit>:
#include"ADC_Priv.h"
#include"ADC_Config.h"

static volatile void (*ADC_PFuncISRFunc)(void *) = NULL;
static volatile void *ADC_PvidISRParameter = NULL;
ES_t ADC_enuInit(void){
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	0f 92       	push	r0
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1e0e:	19 82       	std	Y+1, r1	; 0x01

	ADMUX&=0x3F; //mask two bits of ADC_VREF (BIT6,7)
    1e10:	a7 e2       	ldi	r26, 0x27	; 39
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e7 e2       	ldi	r30, 0x27	; 39
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	8f 73       	andi	r24, 0x3F	; 63
    1e1c:	8c 93       	st	X, r24
//VREF
#if   ADC_VREF==AVCC
	  ADMUX|=(MASK_BIT<<BIT6);
    1e1e:	a7 e2       	ldi	r26, 0x27	; 39
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	e7 e2       	ldi	r30, 0x27	; 39
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	80 64       	ori	r24, 0x40	; 64
    1e2a:	8c 93       	st	X, r24
	  ADMUX|=0xC0;
#else
#error "ADC_VREF has a wrong selection"
#endif
 //CHOOSE ADJUSTMENT
	ADMUX &= ~(MASK_BIT <<BIT5);
    1e2c:	a7 e2       	ldi	r26, 0x27	; 39
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e7 e2       	ldi	r30, 0x27	; 39
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	8f 7d       	andi	r24, 0xDF	; 223
    1e38:	8c 93       	st	X, r24
#if   ADC_ADJUST==RIGHT_ADJUST
	   ADMUX&=~(MASK_BIT<<BIT5);
    1e3a:	a7 e2       	ldi	r26, 0x27	; 39
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e7 e2       	ldi	r30, 0x27	; 39
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	8f 7d       	andi	r24, 0xDF	; 223
    1e46:	8c 93       	st	X, r24
#else
#error "ADC_Adjustment has a wrong selection"
#endif

 //CHOOSE ADC_prescaler
		 ADCSRA &= 0xF8; //mask the first 3 bits in this register
    1e48:	a6 e2       	ldi	r26, 0x26	; 38
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	e6 e2       	ldi	r30, 0x26	; 38
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	88 7f       	andi	r24, 0xF8	; 248
    1e54:	8c 93       	st	X, r24
#if   ADC_PRESCALER==DIVISION_FACTOR_2
		 ADCSRA &= 0xF8;
#elif ADC_PRESCALER==DIVISION_FACTOR_4
		 ADCSRA |=(MASK_BIT<<BIT2);
#elif ADC_PRESCALER==DIVISION_FACTOR_8
		 ADCSRA |=(MASK_BIT<<BIT0);
    1e56:	a6 e2       	ldi	r26, 0x26	; 38
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e6 e2       	ldi	r30, 0x26	; 38
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	81 60       	ori	r24, 0x01	; 1
    1e62:	8c 93       	st	X, r24
		 ADCSRA |=(MASK_BIT<<BIT1);
    1e64:	a6 e2       	ldi	r26, 0x26	; 38
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	e6 e2       	ldi	r30, 0x26	; 38
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	82 60       	ori	r24, 0x02	; 2
    1e70:	8c 93       	st	X, r24
#else
#error "ADC_Adjustment has a wrong selection"
#endif


	return Local_enuErrorState ;
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e74:	0f 90       	pop	r0
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <ADC_enuEnable>:
ES_t ADC_enuEnable(void){
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	0f 92       	push	r0
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    1e86:	19 82       	std	Y+1, r1	; 0x01
	 ADCSRA |=(MASK_BIT<<BIT7);
    1e88:	a6 e2       	ldi	r26, 0x26	; 38
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	e6 e2       	ldi	r30, 0x26	; 38
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	80 68       	ori	r24, 0x80	; 128
    1e94:	8c 93       	st	X, r24
	return Local_enuErrorState ;
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e98:	0f 90       	pop	r0
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <ADC_enuDisable>:
ES_t ADC_enuDisable(void){
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	0f 92       	push	r0
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    1eaa:	19 82       	std	Y+1, r1	; 0x01
	 ADCSRA &=~(MASK_BIT<<BIT7);
    1eac:	a6 e2       	ldi	r26, 0x26	; 38
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	e6 e2       	ldi	r30, 0x26	; 38
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	8f 77       	andi	r24, 0x7F	; 127
    1eb8:	8c 93       	st	X, r24
	return Local_enuErrorState ;
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ebc:	0f 90       	pop	r0
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	08 95       	ret

00001ec4 <ADC_enuStartConversion>:
ES_t ADC_enuStartConversion(void){
    1ec4:	df 93       	push	r29
    1ec6:	cf 93       	push	r28
    1ec8:	0f 92       	push	r0
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    1ece:	19 82       	std	Y+1, r1	; 0x01
		 ADCSRA |=(MASK_BIT<<BIT6);
    1ed0:	a6 e2       	ldi	r26, 0x26	; 38
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e6 e2       	ldi	r30, 0x26	; 38
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	80 64       	ori	r24, 0x40	; 64
    1edc:	8c 93       	st	X, r24
		return Local_enuErrorState ;
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ee0:	0f 90       	pop	r0
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <ADC_enuSelectChannel>:
ES_t ADC_enuSelectChannel(u8 Copy_Channel_ID){
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	00 d0       	rcall	.+0      	; 0x1eee <ADC_enuSelectChannel+0x6>
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState =ES_NOK;
    1ef4:	19 82       	std	Y+1, r1	; 0x01
ADMUX&=0xF0; //mask the first 4 bits
    1ef6:	a7 e2       	ldi	r26, 0x27	; 39
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e7 e2       	ldi	r30, 0x27	; 39
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	80 7f       	andi	r24, 0xF0	; 240
    1f02:	8c 93       	st	X, r24
ADMUX|=Copy_Channel_ID ;
    1f04:	a7 e2       	ldi	r26, 0x27	; 39
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	e7 e2       	ldi	r30, 0x27	; 39
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	90 81       	ld	r25, Z
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	89 2b       	or	r24, r25
    1f12:	8c 93       	st	X, r24
return Local_enuErrorState ;
    1f14:	89 81       	ldd	r24, Y+1	; 0x01

}
    1f16:	0f 90       	pop	r0
    1f18:	0f 90       	pop	r0
    1f1a:	cf 91       	pop	r28
    1f1c:	df 91       	pop	r29
    1f1e:	08 95       	ret

00001f20 <ADC_enuPollingSystem>:
ES_t ADC_enuPollingSystem(void){
    1f20:	df 93       	push	r29
    1f22:	cf 93       	push	r28
    1f24:	0f 92       	push	r0
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    1f2a:	19 82       	std	Y+1, r1	; 0x01

		while(!((ADCSRA >> BIT4) & MASK_BIT)); //Busy Wait until flag is set
    1f2c:	e6 e2       	ldi	r30, 0x26	; 38
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	82 95       	swap	r24
    1f34:	8f 70       	andi	r24, 0x0F	; 15
    1f36:	88 2f       	mov	r24, r24
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	81 70       	andi	r24, 0x01	; 1
    1f3c:	90 70       	andi	r25, 0x00	; 0
    1f3e:	00 97       	sbiw	r24, 0x00	; 0
    1f40:	a9 f3       	breq	.-22     	; 0x1f2c <ADC_enuPollingSystem+0xc>


		ADCSRA |= (MASK_BIT << BIT4); //Clear flag
    1f42:	a6 e2       	ldi	r26, 0x26	; 38
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	e6 e2       	ldi	r30, 0x26	; 38
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	80 61       	ori	r24, 0x10	; 16
    1f4e:	8c 93       	st	X, r24

	return Local_enuErrorState ;
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f52:	0f 90       	pop	r0
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	08 95       	ret

00001f5a <ADC_enuReadHighValue>:
ES_t ADC_enuReadHighValue(u8* Copy_pu8Value){
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	00 d0       	rcall	.+0      	; 0x1f60 <ADC_enuReadHighValue+0x6>
    1f60:	0f 92       	push	r0
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	9b 83       	std	Y+3, r25	; 0x03
    1f68:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState =ES_NOK;
    1f6a:	19 82       	std	Y+1, r1	; 0x01
#if ADC_ADJUST==LEFT_ADJUST
	 *Copy_pu8Value=ADCH;
#elif ADC_ADJUST==RIGHT_ADJUST
	 *Copy_pu8Value=(ADCL>>2);
    1f6c:	e4 e2       	ldi	r30, 0x24	; 36
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	86 95       	lsr	r24
    1f74:	86 95       	lsr	r24
    1f76:	ea 81       	ldd	r30, Y+2	; 0x02
    1f78:	fb 81       	ldd	r31, Y+3	; 0x03
    1f7a:	80 83       	st	Z, r24
	 *Copy_pu8Value|=(ADCH<<6);
    1f7c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f7e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f80:	80 81       	ld	r24, Z
    1f82:	28 2f       	mov	r18, r24
    1f84:	e5 e2       	ldi	r30, 0x25	; 37
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	88 2f       	mov	r24, r24
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	00 24       	eor	r0, r0
    1f90:	96 95       	lsr	r25
    1f92:	87 95       	ror	r24
    1f94:	07 94       	ror	r0
    1f96:	96 95       	lsr	r25
    1f98:	87 95       	ror	r24
    1f9a:	07 94       	ror	r0
    1f9c:	98 2f       	mov	r25, r24
    1f9e:	80 2d       	mov	r24, r0
    1fa0:	82 2b       	or	r24, r18
    1fa2:	ea 81       	ldd	r30, Y+2	; 0x02
    1fa4:	fb 81       	ldd	r31, Y+3	; 0x03
    1fa6:	80 83       	st	Z, r24
#else
#error "ADC_Adjustment has a wrong selection"
#endif
	return Local_enuErrorState ;
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <ADC_enuReadValue>:
ES_t ADC_enuReadValue(u16* Copy_pu16Value){
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <ADC_enuReadValue+0x6>
    1fbc:	0f 92       	push	r0
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
    1fc2:	9b 83       	std	Y+3, r25	; 0x03
    1fc4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState =ES_NOK;
    1fc6:	19 82       	std	Y+1, r1	; 0x01
#if ADC_ADJUST==LEFT_ADJUST
	*Copy_pu16ReadValue  = ((u16)ADCL >> 6);
	*Copy_pu16ReadValue |= ((u16)ADCH << 2);
#elif ADC_ADJUST==RIGHT_ADJUST
	*Copy_pu16Value=((u16)ADCL);
    1fc8:	e4 e2       	ldi	r30, 0x24	; 36
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	88 2f       	mov	r24, r24
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	ea 81       	ldd	r30, Y+2	; 0x02
    1fd4:	fb 81       	ldd	r31, Y+3	; 0x03
    1fd6:	91 83       	std	Z+1, r25	; 0x01
    1fd8:	80 83       	st	Z, r24
	*Copy_pu16Value|=((u16)ADCH<<8);
    1fda:	ea 81       	ldd	r30, Y+2	; 0x02
    1fdc:	fb 81       	ldd	r31, Y+3	; 0x03
    1fde:	20 81       	ld	r18, Z
    1fe0:	31 81       	ldd	r19, Z+1	; 0x01
    1fe2:	e5 e2       	ldi	r30, 0x25	; 37
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	88 2f       	mov	r24, r24
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	98 2f       	mov	r25, r24
    1fee:	88 27       	eor	r24, r24
    1ff0:	82 2b       	or	r24, r18
    1ff2:	93 2b       	or	r25, r19
    1ff4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ff6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ff8:	91 83       	std	Z+1, r25	; 0x01
    1ffa:	80 83       	st	Z, r24
#else
#error "ADC_Adjustment has a wrong selection"
#endif
	return Local_enuErrorState ;
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <ADC_enuEnableTriggerMode>:

ES_t ADC_enuEnableTriggerMode(u8 Copy_u8TriggerSource){
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	00 d0       	rcall	.+0      	; 0x2010 <ADC_enuEnableTriggerMode+0x6>
    2010:	00 d0       	rcall	.+0      	; 0x2012 <ADC_enuEnableTriggerMode+0x8>
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState =ES_NOK;
    2018:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA&=~(MASK_BIT<<BIT5); //Clear bit
    201a:	a6 e2       	ldi	r26, 0x26	; 38
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e6 e2       	ldi	r30, 0x26	; 38
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	8f 7d       	andi	r24, 0xDF	; 223
    2026:	8c 93       	st	X, r24
	SFIOR &=0x1F; //Mask The last 3bits
    2028:	a0 e5       	ldi	r26, 0x50	; 80
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e0 e5       	ldi	r30, 0x50	; 80
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	8f 71       	andi	r24, 0x1F	; 31
    2034:	8c 93       	st	X, r24
	switch(Copy_u8TriggerSource){
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	3c 83       	std	Y+4, r19	; 0x04
    203e:	2b 83       	std	Y+3, r18	; 0x03
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	9c 81       	ldd	r25, Y+4	; 0x04
    2044:	84 30       	cpi	r24, 0x04	; 4
    2046:	91 05       	cpc	r25, r1
    2048:	09 f4       	brne	.+2      	; 0x204c <ADC_enuEnableTriggerMode+0x42>
    204a:	71 c0       	rjmp	.+226    	; 0x212e <ADC_enuEnableTriggerMode+0x124>
    204c:	2b 81       	ldd	r18, Y+3	; 0x03
    204e:	3c 81       	ldd	r19, Y+4	; 0x04
    2050:	25 30       	cpi	r18, 0x05	; 5
    2052:	31 05       	cpc	r19, r1
    2054:	8c f4       	brge	.+34     	; 0x2078 <ADC_enuEnableTriggerMode+0x6e>
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	9c 81       	ldd	r25, Y+4	; 0x04
    205a:	82 30       	cpi	r24, 0x02	; 2
    205c:	91 05       	cpc	r25, r1
    205e:	d9 f1       	breq	.+118    	; 0x20d6 <ADC_enuEnableTriggerMode+0xcc>
    2060:	2b 81       	ldd	r18, Y+3	; 0x03
    2062:	3c 81       	ldd	r19, Y+4	; 0x04
    2064:	23 30       	cpi	r18, 0x03	; 3
    2066:	31 05       	cpc	r19, r1
    2068:	0c f0       	brlt	.+2      	; 0x206c <ADC_enuEnableTriggerMode+0x62>
    206a:	4b c0       	rjmp	.+150    	; 0x2102 <ADC_enuEnableTriggerMode+0xf8>
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	9c 81       	ldd	r25, Y+4	; 0x04
    2070:	81 30       	cpi	r24, 0x01	; 1
    2072:	91 05       	cpc	r25, r1
    2074:	d1 f0       	breq	.+52     	; 0x20aa <ADC_enuEnableTriggerMode+0xa0>
    2076:	c9 c0       	rjmp	.+402    	; 0x220a <ADC_enuEnableTriggerMode+0x200>
    2078:	2b 81       	ldd	r18, Y+3	; 0x03
    207a:	3c 81       	ldd	r19, Y+4	; 0x04
    207c:	26 30       	cpi	r18, 0x06	; 6
    207e:	31 05       	cpc	r19, r1
    2080:	09 f4       	brne	.+2      	; 0x2084 <ADC_enuEnableTriggerMode+0x7a>
    2082:	81 c0       	rjmp	.+258    	; 0x2186 <ADC_enuEnableTriggerMode+0x17c>
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	9c 81       	ldd	r25, Y+4	; 0x04
    2088:	86 30       	cpi	r24, 0x06	; 6
    208a:	91 05       	cpc	r25, r1
    208c:	0c f4       	brge	.+2      	; 0x2090 <ADC_enuEnableTriggerMode+0x86>
    208e:	65 c0       	rjmp	.+202    	; 0x215a <ADC_enuEnableTriggerMode+0x150>
    2090:	2b 81       	ldd	r18, Y+3	; 0x03
    2092:	3c 81       	ldd	r19, Y+4	; 0x04
    2094:	27 30       	cpi	r18, 0x07	; 7
    2096:	31 05       	cpc	r19, r1
    2098:	09 f4       	brne	.+2      	; 0x209c <ADC_enuEnableTriggerMode+0x92>
    209a:	8b c0       	rjmp	.+278    	; 0x21b2 <ADC_enuEnableTriggerMode+0x1a8>
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	9c 81       	ldd	r25, Y+4	; 0x04
    20a0:	88 30       	cpi	r24, 0x08	; 8
    20a2:	91 05       	cpc	r25, r1
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <ADC_enuEnableTriggerMode+0x9e>
    20a6:	9b c0       	rjmp	.+310    	; 0x21de <ADC_enuEnableTriggerMode+0x1d4>
    20a8:	b0 c0       	rjmp	.+352    	; 0x220a <ADC_enuEnableTriggerMode+0x200>
	case FREE_RUNNING_MODE:
		SFIOR&=~(MASK_BIT<<BIT5);
    20aa:	a0 e5       	ldi	r26, 0x50	; 80
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	e0 e5       	ldi	r30, 0x50	; 80
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	8f 7d       	andi	r24, 0xDF	; 223
    20b6:	8c 93       	st	X, r24
		SFIOR&=~(MASK_BIT<<BIT6);
    20b8:	a0 e5       	ldi	r26, 0x50	; 80
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	e0 e5       	ldi	r30, 0x50	; 80
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	8f 7b       	andi	r24, 0xBF	; 191
    20c4:	8c 93       	st	X, r24
		SFIOR&=~(MASK_BIT<<BIT7);
    20c6:	a0 e5       	ldi	r26, 0x50	; 80
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	e0 e5       	ldi	r30, 0x50	; 80
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	8f 77       	andi	r24, 0x7F	; 127
    20d2:	8c 93       	st	X, r24
    20d4:	9c c0       	rjmp	.+312    	; 0x220e <ADC_enuEnableTriggerMode+0x204>
    break;
	case ANALOG_COMPARATOR:
		SFIOR|=(MASK_BIT<<BIT5);
    20d6:	a0 e5       	ldi	r26, 0x50	; 80
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e0 e5       	ldi	r30, 0x50	; 80
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	80 62       	ori	r24, 0x20	; 32
    20e2:	8c 93       	st	X, r24
		SFIOR&=~(MASK_BIT<<BIT6);
    20e4:	a0 e5       	ldi	r26, 0x50	; 80
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	e0 e5       	ldi	r30, 0x50	; 80
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	8f 7b       	andi	r24, 0xBF	; 191
    20f0:	8c 93       	st	X, r24
		SFIOR&=~(MASK_BIT<<BIT7);
    20f2:	a0 e5       	ldi	r26, 0x50	; 80
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	e0 e5       	ldi	r30, 0x50	; 80
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	8f 77       	andi	r24, 0x7F	; 127
    20fe:	8c 93       	st	X, r24
    2100:	86 c0       	rjmp	.+268    	; 0x220e <ADC_enuEnableTriggerMode+0x204>
    break;
	case EXTI0_TRIG	:
		SFIOR&=~(MASK_BIT<<BIT5);
    2102:	a0 e5       	ldi	r26, 0x50	; 80
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	e0 e5       	ldi	r30, 0x50	; 80
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	8f 7d       	andi	r24, 0xDF	; 223
    210e:	8c 93       	st	X, r24
		SFIOR|=(MASK_BIT<<BIT6);
    2110:	a0 e5       	ldi	r26, 0x50	; 80
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e0 e5       	ldi	r30, 0x50	; 80
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	80 64       	ori	r24, 0x40	; 64
    211c:	8c 93       	st	X, r24
		SFIOR&=~(MASK_BIT<<BIT7);
    211e:	a0 e5       	ldi	r26, 0x50	; 80
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	e0 e5       	ldi	r30, 0x50	; 80
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	8f 77       	andi	r24, 0x7F	; 127
    212a:	8c 93       	st	X, r24
    212c:	70 c0       	rjmp	.+224    	; 0x220e <ADC_enuEnableTriggerMode+0x204>
	break;
	case TIMER0_COMPARE_MATCH_TRIG:
		SFIOR|=(MASK_BIT<<BIT5);
    212e:	a0 e5       	ldi	r26, 0x50	; 80
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e0 e5       	ldi	r30, 0x50	; 80
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	80 62       	ori	r24, 0x20	; 32
    213a:	8c 93       	st	X, r24
		SFIOR|=(MASK_BIT<<BIT6);
    213c:	a0 e5       	ldi	r26, 0x50	; 80
    213e:	b0 e0       	ldi	r27, 0x00	; 0
    2140:	e0 e5       	ldi	r30, 0x50	; 80
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	80 64       	ori	r24, 0x40	; 64
    2148:	8c 93       	st	X, r24
		SFIOR&=~(MASK_BIT<<BIT7);
    214a:	a0 e5       	ldi	r26, 0x50	; 80
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	e0 e5       	ldi	r30, 0x50	; 80
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	8f 77       	andi	r24, 0x7F	; 127
    2156:	8c 93       	st	X, r24
    2158:	5a c0       	rjmp	.+180    	; 0x220e <ADC_enuEnableTriggerMode+0x204>
	break;
	case TIMER0_OVERFLOW_TRIG:
		SFIOR&=~(MASK_BIT<<BIT5);
    215a:	a0 e5       	ldi	r26, 0x50	; 80
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	e0 e5       	ldi	r30, 0x50	; 80
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	8f 7d       	andi	r24, 0xDF	; 223
    2166:	8c 93       	st	X, r24
		SFIOR&=~(MASK_BIT<<BIT6);
    2168:	a0 e5       	ldi	r26, 0x50	; 80
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	e0 e5       	ldi	r30, 0x50	; 80
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	8f 7b       	andi	r24, 0xBF	; 191
    2174:	8c 93       	st	X, r24
		SFIOR|=(MASK_BIT<<BIT7);
    2176:	a0 e5       	ldi	r26, 0x50	; 80
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	e0 e5       	ldi	r30, 0x50	; 80
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	80 68       	ori	r24, 0x80	; 128
    2182:	8c 93       	st	X, r24
    2184:	44 c0       	rjmp	.+136    	; 0x220e <ADC_enuEnableTriggerMode+0x204>
	break;
	case TIMER1_COMPARE_MATCH_TRIG:
		SFIOR|=(MASK_BIT<<BIT5);
    2186:	a0 e5       	ldi	r26, 0x50	; 80
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	e0 e5       	ldi	r30, 0x50	; 80
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	80 62       	ori	r24, 0x20	; 32
    2192:	8c 93       	st	X, r24
		SFIOR&=~(MASK_BIT<<BIT6);
    2194:	a0 e5       	ldi	r26, 0x50	; 80
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e0 e5       	ldi	r30, 0x50	; 80
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	8f 7b       	andi	r24, 0xBF	; 191
    21a0:	8c 93       	st	X, r24
		SFIOR|=(MASK_BIT<<BIT7);
    21a2:	a0 e5       	ldi	r26, 0x50	; 80
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e0 e5       	ldi	r30, 0x50	; 80
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	80 68       	ori	r24, 0x80	; 128
    21ae:	8c 93       	st	X, r24
    21b0:	2e c0       	rjmp	.+92     	; 0x220e <ADC_enuEnableTriggerMode+0x204>
	break;
	case TIMER1_OVERFLOW_TRIG	:
		SFIOR&=~(MASK_BIT<<BIT5);
    21b2:	a0 e5       	ldi	r26, 0x50	; 80
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e0 e5       	ldi	r30, 0x50	; 80
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	8f 7d       	andi	r24, 0xDF	; 223
    21be:	8c 93       	st	X, r24
		SFIOR|=(MASK_BIT<<BIT6);
    21c0:	a0 e5       	ldi	r26, 0x50	; 80
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e0 e5       	ldi	r30, 0x50	; 80
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	80 64       	ori	r24, 0x40	; 64
    21cc:	8c 93       	st	X, r24
		SFIOR|=(MASK_BIT<<BIT7);
    21ce:	a0 e5       	ldi	r26, 0x50	; 80
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	e0 e5       	ldi	r30, 0x50	; 80
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	80 68       	ori	r24, 0x80	; 128
    21da:	8c 93       	st	X, r24
    21dc:	18 c0       	rjmp	.+48     	; 0x220e <ADC_enuEnableTriggerMode+0x204>
	break;
	case TIMER1_CAPUTRE_TRIG	:
		SFIOR|=(MASK_BIT<<BIT5);
    21de:	a0 e5       	ldi	r26, 0x50	; 80
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e0 e5       	ldi	r30, 0x50	; 80
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	80 62       	ori	r24, 0x20	; 32
    21ea:	8c 93       	st	X, r24
		SFIOR|=(MASK_BIT<<BIT6);
    21ec:	a0 e5       	ldi	r26, 0x50	; 80
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	e0 e5       	ldi	r30, 0x50	; 80
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	80 64       	ori	r24, 0x40	; 64
    21f8:	8c 93       	st	X, r24
		SFIOR|=(MASK_BIT<<BIT7);
    21fa:	a0 e5       	ldi	r26, 0x50	; 80
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e0 e5       	ldi	r30, 0x50	; 80
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	80 68       	ori	r24, 0x80	; 128
    2206:	8c 93       	st	X, r24
    2208:	02 c0       	rjmp	.+4      	; 0x220e <ADC_enuEnableTriggerMode+0x204>
	break;
	default:
	Local_enuErrorState = ES_OUT_OF_RANGE;
    220a:	83 e0       	ldi	r24, 0x03	; 3
    220c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	ADCSRA |= (MASK_BIT << BIT5);                  //set bit for enable trigger
    220e:	a6 e2       	ldi	r26, 0x26	; 38
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	e6 e2       	ldi	r30, 0x26	; 38
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	80 62       	ori	r24, 0x20	; 32
    221a:	8c 93       	st	X, r24

	return Local_enuErrorState ;
    221c:	89 81       	ldd	r24, Y+1	; 0x01
}
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	08 95       	ret

0000222c <ADC_enuDisableTriggerMode>:
ES_t ADC_enuDisableTriggerMode(void){
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	0f 92       	push	r0
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    2236:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA&=~(MASK_BIT<<BIT5); //Clear bit
    2238:	a6 e2       	ldi	r26, 0x26	; 38
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	e6 e2       	ldi	r30, 0x26	; 38
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	8f 7d       	andi	r24, 0xDF	; 223
    2244:	8c 93       	st	X, r24
	return Local_enuErrorState ;
    2246:	89 81       	ldd	r24, Y+1	; 0x01
}
    2248:	0f 90       	pop	r0
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <ADC_enuEnableInterruptrMode>:
ES_t ADC_enuEnableInterruptrMode(void){
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	0f 92       	push	r0
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    225a:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA |= (MASK_BIT <<BIT3);
    225c:	a6 e2       	ldi	r26, 0x26	; 38
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e6 e2       	ldi	r30, 0x26	; 38
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	88 60       	ori	r24, 0x08	; 8
    2268:	8c 93       	st	X, r24

	return Local_enuErrorState ;
    226a:	89 81       	ldd	r24, Y+1	; 0x01
}
    226c:	0f 90       	pop	r0
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	08 95       	ret

00002274 <ADC_enuDisableInterruptrMode>:
ES_t ADC_enuDisableInterruptrMode(void){
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	0f 92       	push	r0
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    227e:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA &= ~(MASK_BIT << BIT3);
    2280:	a6 e2       	ldi	r26, 0x26	; 38
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	e6 e2       	ldi	r30, 0x26	; 38
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	87 7f       	andi	r24, 0xF7	; 247
    228c:	8c 93       	st	X, r24

	return Local_enuErrorState ;
    228e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2290:	0f 90       	pop	r0
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	08 95       	ret

00002298 <ADC_enuCallBack>:
ES_t ADC_enuCallBack(volatile void(*Copy_pfunAppFun)(void*),volatile void*Copy_pviAppParameter)
{
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	00 d0       	rcall	.+0      	; 0x229e <ADC_enuCallBack+0x6>
    229e:	00 d0       	rcall	.+0      	; 0x22a0 <ADC_enuCallBack+0x8>
    22a0:	0f 92       	push	r0
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    22a6:	9b 83       	std	Y+3, r25	; 0x03
    22a8:	8a 83       	std	Y+2, r24	; 0x02
    22aa:	7d 83       	std	Y+5, r23	; 0x05
    22ac:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    22ae:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pfunAppFun != NULL)
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	9b 81       	ldd	r25, Y+3	; 0x03
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	69 f0       	breq	.+26     	; 0x22d2 <ADC_enuCallBack+0x3a>
	{
		ADC_PFuncISRFunc = Copy_pfunAppFun;
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	9b 81       	ldd	r25, Y+3	; 0x03
    22bc:	90 93 7d 01 	sts	0x017D, r25
    22c0:	80 93 7c 01 	sts	0x017C, r24
		ADC_PvidISRParameter = Copy_pviAppParameter;
    22c4:	8c 81       	ldd	r24, Y+4	; 0x04
    22c6:	9d 81       	ldd	r25, Y+5	; 0x05
    22c8:	90 93 7f 01 	sts	0x017F, r25
    22cc:	80 93 7e 01 	sts	0x017E, r24
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <ADC_enuCallBack+0x3e>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    22d2:	82 e0       	ldi	r24, 0x02	; 2
    22d4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <ISR>:

ISR(VECT_ADC)
{
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	00 d0       	rcall	.+0      	; 0x22ee <ISR+0x6>
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <ISR+0x8>
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    22f4:	9a 83       	std	Y+2, r25	; 0x02
    22f6:	89 83       	std	Y+1, r24	; 0x01
	if(ADC_PFuncISRFunc != NULL)
    22f8:	80 91 7c 01 	lds	r24, 0x017C
    22fc:	90 91 7d 01 	lds	r25, 0x017D
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	49 f0       	breq	.+18     	; 0x2316 <ISR+0x2e>
	{
		ADC_PFuncISRFunc(ADC_PvidISRParameter);
    2304:	e0 91 7c 01 	lds	r30, 0x017C
    2308:	f0 91 7d 01 	lds	r31, 0x017D
    230c:	80 91 7e 01 	lds	r24, 0x017E
    2310:	90 91 7f 01 	lds	r25, 0x017F
    2314:	09 95       	icall
	}
}
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <Thermistor_enuInit>:
static volatile u16 ADCValue = 0;
static volatile f32 LM35_f32Tempeture = 0;

void LM35_inlvidReadADCValue(void *Copy_PvidLM35VOLT);

ES_t Thermistor_enuInit(Themistor_t* Copy_PstrLM35config){
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	00 d0       	rcall	.+0      	; 0x232a <Thermistor_enuInit+0x6>
    232a:	00 d0       	rcall	.+0      	; 0x232c <Thermistor_enuInit+0x8>
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	9c 83       	std	Y+4, r25	; 0x04
    2332:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2334:	1a 82       	std	Y+2, r1	; 0x02
	ADC_enuInit();
    2336:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <ADC_enuInit>
	ADC_enuEnableInterruptrMode();
    233a:	0e 94 28 11 	call	0x2250	; 0x2250 <ADC_enuEnableInterruptrMode>
    ADC_enuCallBack(LM35_inlvidReadADCValue,&ADCValue);
    233e:	86 e1       	ldi	r24, 0x16	; 22
    2340:	92 e1       	ldi	r25, 0x12	; 18
    2342:	20 e8       	ldi	r18, 0x80	; 128
    2344:	31 e0       	ldi	r19, 0x01	; 1
    2346:	b9 01       	movw	r22, r18
    2348:	0e 94 4c 11 	call	0x2298	; 0x2298 <ADC_enuCallBack>
GIE_enuGloable_Interrupt_Enable();
    234c:	0e 94 17 07 	call	0xe2e	; 0xe2e <GIE_enuGloable_Interrupt_Enable>

u8 Local_u8Iterrator = 0;
    2350:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8Iterrator = 0; Local_u8Iterrator < LM35NUM; Local_u8Iterrator++)
    2352:	19 82       	std	Y+1, r1	; 0x01
    2354:	5d c0       	rjmp	.+186    	; 0x2410 <Thermistor_enuInit+0xec>
	{
		if(Copy_PstrLM35config[Local_u8Iterrator].LM35_postiveChannel != NOTCONNECTED)
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	88 2f       	mov	r24, r24
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	9c 01       	movw	r18, r24
    235e:	22 0f       	add	r18, r18
    2360:	33 1f       	adc	r19, r19
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	9c 81       	ldd	r25, Y+4	; 0x04
    2366:	fc 01       	movw	r30, r24
    2368:	e2 0f       	add	r30, r18
    236a:	f3 1f       	adc	r31, r19
    236c:	80 81       	ld	r24, Z
    236e:	87 30       	cpi	r24, 0x07	; 7
    2370:	f9 f0       	breq	.+62     	; 0x23b0 <Thermistor_enuInit+0x8c>
		{
			DIO_enuSetPinDirection(DIO_u8PORTA, Copy_PstrLM35config[Local_u8Iterrator].LM35_postiveChannel, DIO_u8INPUT);
    2372:	89 81       	ldd	r24, Y+1	; 0x01
    2374:	88 2f       	mov	r24, r24
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	9c 01       	movw	r18, r24
    237a:	22 0f       	add	r18, r18
    237c:	33 1f       	adc	r19, r19
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	9c 81       	ldd	r25, Y+4	; 0x04
    2382:	fc 01       	movw	r30, r24
    2384:	e2 0f       	add	r30, r18
    2386:	f3 1f       	adc	r31, r19
    2388:	90 81       	ld	r25, Z
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	69 2f       	mov	r22, r25
    238e:	40 e0       	ldi	r20, 0x00	; 0
    2390:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_enuSetPinDirection>
			ADC_enuSelectChannel(Copy_PstrLM35config[Local_u8Iterrator].LM35_postiveChannel);
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	88 2f       	mov	r24, r24
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	9c 01       	movw	r18, r24
    239c:	22 0f       	add	r18, r18
    239e:	33 1f       	adc	r19, r19
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	9c 81       	ldd	r25, Y+4	; 0x04
    23a4:	fc 01       	movw	r30, r24
    23a6:	e2 0f       	add	r30, r18
    23a8:	f3 1f       	adc	r31, r19
    23aa:	80 81       	ld	r24, Z
    23ac:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <ADC_enuSelectChannel>
		}

		if(Copy_PstrLM35config[Local_u8Iterrator].LM35_negativeChannel != NOTCONNECTED)
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	88 2f       	mov	r24, r24
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	9c 01       	movw	r18, r24
    23b8:	22 0f       	add	r18, r18
    23ba:	33 1f       	adc	r19, r19
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	fc 01       	movw	r30, r24
    23c2:	e2 0f       	add	r30, r18
    23c4:	f3 1f       	adc	r31, r19
    23c6:	81 81       	ldd	r24, Z+1	; 0x01
    23c8:	87 30       	cpi	r24, 0x07	; 7
    23ca:	f9 f0       	breq	.+62     	; 0x240a <Thermistor_enuInit+0xe6>
		{
			DIO_enuSetPinDirection(DIO_u8PORTA, Copy_PstrLM35config[Local_u8Iterrator].LM35_negativeChannel, DIO_u8INPUT);
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	88 2f       	mov	r24, r24
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	9c 01       	movw	r18, r24
    23d4:	22 0f       	add	r18, r18
    23d6:	33 1f       	adc	r19, r19
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	9c 81       	ldd	r25, Y+4	; 0x04
    23dc:	fc 01       	movw	r30, r24
    23de:	e2 0f       	add	r30, r18
    23e0:	f3 1f       	adc	r31, r19
    23e2:	91 81       	ldd	r25, Z+1	; 0x01
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	69 2f       	mov	r22, r25
    23e8:	40 e0       	ldi	r20, 0x00	; 0
    23ea:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_enuSetPinDirection>
			ADC_enuSelectChannel(Copy_PstrLM35config[Local_u8Iterrator].LM35_negativeChannel);
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	88 2f       	mov	r24, r24
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	9c 01       	movw	r18, r24
    23f6:	22 0f       	add	r18, r18
    23f8:	33 1f       	adc	r19, r19
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	9c 81       	ldd	r25, Y+4	; 0x04
    23fe:	fc 01       	movw	r30, r24
    2400:	e2 0f       	add	r30, r18
    2402:	f3 1f       	adc	r31, r19
    2404:	81 81       	ldd	r24, Z+1	; 0x01
    2406:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <ADC_enuSelectChannel>
	ADC_enuEnableInterruptrMode();
    ADC_enuCallBack(LM35_inlvidReadADCValue,&ADCValue);
GIE_enuGloable_Interrupt_Enable();

u8 Local_u8Iterrator = 0;
	for(Local_u8Iterrator = 0; Local_u8Iterrator < LM35NUM; Local_u8Iterrator++)
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	8f 5f       	subi	r24, 0xFF	; 255
    240e:	89 83       	std	Y+1, r24	; 0x01
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	88 23       	and	r24, r24
    2414:	09 f4       	brne	.+2      	; 0x2418 <Thermistor_enuInit+0xf4>
    2416:	9f cf       	rjmp	.-194    	; 0x2356 <Thermistor_enuInit+0x32>
			DIO_enuSetPinDirection(DIO_u8PORTA, Copy_PstrLM35config[Local_u8Iterrator].LM35_negativeChannel, DIO_u8INPUT);
			ADC_enuSelectChannel(Copy_PstrLM35config[Local_u8Iterrator].LM35_negativeChannel);
		}
	}

	ADC_enuEnable();
    2418:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <ADC_enuEnable>
	return Local_enuErrorState;
    241c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	08 95       	ret

0000242c <LM35_inlvidReadADCValue>:

void LM35_inlvidReadADCValue(void *Copy_PvidLM35VOLT){
    242c:	df 93       	push	r29
    242e:	cf 93       	push	r28
    2430:	00 d0       	rcall	.+0      	; 0x2432 <LM35_inlvidReadADCValue+0x6>
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	9a 83       	std	Y+2, r25	; 0x02
    2438:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_PvidLM35VOLT!=NULL){
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	9a 81       	ldd	r25, Y+2	; 0x02
    243e:	00 97       	sbiw	r24, 0x00	; 0
    2440:	21 f0       	breq	.+8      	; 0x244a <LM35_inlvidReadADCValue+0x1e>
		ADC_enuReadValue(Copy_PvidLM35VOLT);
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	9a 81       	ldd	r25, Y+2	; 0x02
    2446:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <ADC_enuReadValue>
	}

}
    244a:	0f 90       	pop	r0
    244c:	0f 90       	pop	r0
    244e:	cf 91       	pop	r28
    2450:	df 91       	pop	r29
    2452:	08 95       	ret

00002454 <Themistor_enuGetTemp>:
ES_t Themistor_enuGetTemp(u8 Copy_u8_LM35_ID,f32 *Copy_f32Temp){
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	00 d0       	rcall	.+0      	; 0x245a <Themistor_enuGetTemp+0x6>
    245a:	00 d0       	rcall	.+0      	; 0x245c <Themistor_enuGetTemp+0x8>
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
    2460:	8a 83       	std	Y+2, r24	; 0x02
    2462:	7c 83       	std	Y+4, r23	; 0x04
    2464:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2466:	19 82       	std	Y+1, r1	; 0x01

		if(Copy_f32Temp != NULL)
    2468:	8b 81       	ldd	r24, Y+3	; 0x03
    246a:	9c 81       	ldd	r25, Y+4	; 0x04
    246c:	00 97       	sbiw	r24, 0x00	; 0
    246e:	a9 f1       	breq	.+106    	; 0x24da <Themistor_enuGetTemp+0x86>
		{
			Local_enuErrorState = ADC_enuStartConversion();
    2470:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <ADC_enuStartConversion>
    2474:	89 83       	std	Y+1, r24	; 0x01
			*Copy_f32Temp = ((ADCValue * 5000UL / ADC_RESOLUTION) / LM35_STEP);
    2476:	80 91 80 01 	lds	r24, 0x0180
    247a:	90 91 81 01 	lds	r25, 0x0181
    247e:	cc 01       	movw	r24, r24
    2480:	a0 e0       	ldi	r26, 0x00	; 0
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	28 e8       	ldi	r18, 0x88	; 136
    2486:	33 e1       	ldi	r19, 0x13	; 19
    2488:	40 e0       	ldi	r20, 0x00	; 0
    248a:	50 e0       	ldi	r21, 0x00	; 0
    248c:	bc 01       	movw	r22, r24
    248e:	cd 01       	movw	r24, r26
    2490:	0e 94 23 18 	call	0x3046	; 0x3046 <__mulsi3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	bc 01       	movw	r22, r24
    249a:	cd 01       	movw	r24, r26
    249c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	bc 01       	movw	r22, r24
    24a6:	cd 01       	movw	r24, r26
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e8       	ldi	r20, 0x80	; 128
    24ae:	54 e4       	ldi	r21, 0x44	; 68
    24b0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	bc 01       	movw	r22, r24
    24ba:	cd 01       	movw	r24, r26
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e2       	ldi	r20, 0x20	; 32
    24c2:	51 e4       	ldi	r21, 0x41	; 65
    24c4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	eb 81       	ldd	r30, Y+3	; 0x03
    24ce:	fc 81       	ldd	r31, Y+4	; 0x04
    24d0:	80 83       	st	Z, r24
    24d2:	91 83       	std	Z+1, r25	; 0x01
    24d4:	a2 83       	std	Z+2, r26	; 0x02
    24d6:	b3 83       	std	Z+3, r27	; 0x03
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <Themistor_enuGetTemp+0x8a>
		}
		else
		{
			Local_enuErrorState = ES_NULL_POINTER;
    24da:	82 e0       	ldi	r24, 0x02	; 2
    24dc:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorState;
    24de:	89 81       	ldd	r24, Y+1	; 0x01

}
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	08 95       	ret

000024ee <LCD_enuInit>:
#include "LCD_config.h"
#include "LCD_priv.h"

#include "util/delay.h"
ES_t LCD_enuInit(void)
{
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	e9 97       	sbiw	r28, 0x39	; 57
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	de bf       	out	0x3e, r29	; 62
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    2502:	19 ae       	std	Y+57, r1	; 0x39
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	a0 ef       	ldi	r26, 0xF0	; 240
    250a:	b1 e4       	ldi	r27, 0x41	; 65
    250c:	8d ab       	std	Y+53, r24	; 0x35
    250e:	9e ab       	std	Y+54, r25	; 0x36
    2510:	af ab       	std	Y+55, r26	; 0x37
    2512:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2514:	6d a9       	ldd	r22, Y+53	; 0x35
    2516:	7e a9       	ldd	r23, Y+54	; 0x36
    2518:	8f a9       	ldd	r24, Y+55	; 0x37
    251a:	98 ad       	ldd	r25, Y+56	; 0x38
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	4a e7       	ldi	r20, 0x7A	; 122
    2522:	53 e4       	ldi	r21, 0x43	; 67
    2524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	89 ab       	std	Y+49, r24	; 0x31
    252e:	9a ab       	std	Y+50, r25	; 0x32
    2530:	ab ab       	std	Y+51, r26	; 0x33
    2532:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2534:	69 a9       	ldd	r22, Y+49	; 0x31
    2536:	7a a9       	ldd	r23, Y+50	; 0x32
    2538:	8b a9       	ldd	r24, Y+51	; 0x33
    253a:	9c a9       	ldd	r25, Y+52	; 0x34
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	40 e8       	ldi	r20, 0x80	; 128
    2542:	5f e3       	ldi	r21, 0x3F	; 63
    2544:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2548:	88 23       	and	r24, r24
    254a:	2c f4       	brge	.+10     	; 0x2556 <LCD_enuInit+0x68>
		__ticks = 1;
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	98 ab       	std	Y+48, r25	; 0x30
    2552:	8f a7       	std	Y+47, r24	; 0x2f
    2554:	3f c0       	rjmp	.+126    	; 0x25d4 <LCD_enuInit+0xe6>
	else if (__tmp > 65535)
    2556:	69 a9       	ldd	r22, Y+49	; 0x31
    2558:	7a a9       	ldd	r23, Y+50	; 0x32
    255a:	8b a9       	ldd	r24, Y+51	; 0x33
    255c:	9c a9       	ldd	r25, Y+52	; 0x34
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	3f ef       	ldi	r19, 0xFF	; 255
    2562:	4f e7       	ldi	r20, 0x7F	; 127
    2564:	57 e4       	ldi	r21, 0x47	; 71
    2566:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    256a:	18 16       	cp	r1, r24
    256c:	4c f5       	brge	.+82     	; 0x25c0 <LCD_enuInit+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256e:	6d a9       	ldd	r22, Y+53	; 0x35
    2570:	7e a9       	ldd	r23, Y+54	; 0x36
    2572:	8f a9       	ldd	r24, Y+55	; 0x37
    2574:	98 ad       	ldd	r25, Y+56	; 0x38
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	40 e2       	ldi	r20, 0x20	; 32
    257c:	51 e4       	ldi	r21, 0x41	; 65
    257e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	bc 01       	movw	r22, r24
    2588:	cd 01       	movw	r24, r26
    258a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	98 ab       	std	Y+48, r25	; 0x30
    2594:	8f a7       	std	Y+47, r24	; 0x2f
    2596:	0f c0       	rjmp	.+30     	; 0x25b6 <LCD_enuInit+0xc8>
    2598:	89 e1       	ldi	r24, 0x19	; 25
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	9e a7       	std	Y+46, r25	; 0x2e
    259e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    25a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	f1 f7       	brne	.-4      	; 0x25a4 <LCD_enuInit+0xb6>
    25a8:	9e a7       	std	Y+46, r25	; 0x2e
    25aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ae:	98 a9       	ldd	r25, Y+48	; 0x30
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	98 ab       	std	Y+48, r25	; 0x30
    25b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    25b8:	98 a9       	ldd	r25, Y+48	; 0x30
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	69 f7       	brne	.-38     	; 0x2598 <LCD_enuInit+0xaa>
    25be:	14 c0       	rjmp	.+40     	; 0x25e8 <LCD_enuInit+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c0:	69 a9       	ldd	r22, Y+49	; 0x31
    25c2:	7a a9       	ldd	r23, Y+50	; 0x32
    25c4:	8b a9       	ldd	r24, Y+51	; 0x33
    25c6:	9c a9       	ldd	r25, Y+52	; 0x34
    25c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	98 ab       	std	Y+48, r25	; 0x30
    25d2:	8f a7       	std	Y+47, r24	; 0x2f
    25d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    25d6:	98 a9       	ldd	r25, Y+48	; 0x30
    25d8:	9c a7       	std	Y+44, r25	; 0x2c
    25da:	8b a7       	std	Y+43, r24	; 0x2b
    25dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    25de:	9c a5       	ldd	r25, Y+44	; 0x2c
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	f1 f7       	brne	.-4      	; 0x25e0 <LCD_enuInit+0xf2>
    25e4:	9c a7       	std	Y+44, r25	; 0x2c
    25e6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);
/*set direction for control pins "Output"*/
DIO_enuSetPinDirection(RS_PORT,RS_PIN,DIO_u8OUTPUT);
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	60 e0       	ldi	r22, 0x00	; 0
    25ec:	41 e0       	ldi	r20, 0x01	; 1
    25ee:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(RW_PORT,RW_PIN,DIO_u8OUTPUT);
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	61 e0       	ldi	r22, 0x01	; 1
    25f6:	41 e0       	ldi	r20, 0x01	; 1
    25f8:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(EN_PORT,EN_PIN,DIO_u8OUTPUT);
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	62 e0       	ldi	r22, 0x02	; 2
    2600:	41 e0       	ldi	r20, 0x01	; 1
    2602:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_enuSetPinDirection>
/*set direction for Data pins "Output"*/
DIO_enuSetPinDirection(D7_PORT,D7_PIN,DIO_u8OUTPUT);
    2606:	82 e0       	ldi	r24, 0x02	; 2
    2608:	60 e0       	ldi	r22, 0x00	; 0
    260a:	41 e0       	ldi	r20, 0x01	; 1
    260c:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(D6_PORT,D6_PIN,DIO_u8OUTPUT);
    2610:	82 e0       	ldi	r24, 0x02	; 2
    2612:	61 e0       	ldi	r22, 0x01	; 1
    2614:	41 e0       	ldi	r20, 0x01	; 1
    2616:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(D5_PORT,D5_PIN,DIO_u8OUTPUT);
    261a:	82 e0       	ldi	r24, 0x02	; 2
    261c:	62 e0       	ldi	r22, 0x02	; 2
    261e:	41 e0       	ldi	r20, 0x01	; 1
    2620:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(D4_PORT,D4_PIN,DIO_u8OUTPUT);
    2624:	82 e0       	ldi	r24, 0x02	; 2
    2626:	63 e0       	ldi	r22, 0x03	; 3
    2628:	41 e0       	ldi	r20, 0x01	; 1
    262a:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_enuSetPinDirection>

#if LCD_MODE == EIGHT_BIT
DIO_enuSetPinDirection(D3_PORT,D3_PIN,DIO_u8OUTPUT);
    262e:	82 e0       	ldi	r24, 0x02	; 2
    2630:	64 e0       	ldi	r22, 0x04	; 4
    2632:	41 e0       	ldi	r20, 0x01	; 1
    2634:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(D2_PORT,D2_PIN,DIO_u8OUTPUT);
    2638:	82 e0       	ldi	r24, 0x02	; 2
    263a:	65 e0       	ldi	r22, 0x05	; 5
    263c:	41 e0       	ldi	r20, 0x01	; 1
    263e:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(D1_PORT,D1_PIN,DIO_u8OUTPUT);
    2642:	82 e0       	ldi	r24, 0x02	; 2
    2644:	66 e0       	ldi	r22, 0x06	; 6
    2646:	41 e0       	ldi	r20, 0x01	; 1
    2648:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(D0_PORT,D0_PIN,DIO_u8OUTPUT);
    264c:	82 e0       	ldi	r24, 0x02	; 2
    264e:	67 e0       	ldi	r22, 0x07	; 7
    2650:	41 e0       	ldi	r20, 0x01	; 1
    2652:	0e 94 02 0c 	call	0x1804	; 0x1804 <DIO_enuSetPinDirection>

/*Function Set for 8 mode*/
LCD_invidSendCommand(FUN_SET_EIGHT);
    2656:	88 e3       	ldi	r24, 0x38	; 56
    2658:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <LCD_invidSendCommand>
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	a0 e8       	ldi	r26, 0x80	; 128
    2662:	bf e3       	ldi	r27, 0x3F	; 63
    2664:	8f a3       	std	Y+39, r24	; 0x27
    2666:	98 a7       	std	Y+40, r25	; 0x28
    2668:	a9 a7       	std	Y+41, r26	; 0x29
    266a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    266c:	6f a1       	ldd	r22, Y+39	; 0x27
    266e:	78 a5       	ldd	r23, Y+40	; 0x28
    2670:	89 a5       	ldd	r24, Y+41	; 0x29
    2672:	9a a5       	ldd	r25, Y+42	; 0x2a
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	4a e7       	ldi	r20, 0x7A	; 122
    267a:	53 e4       	ldi	r21, 0x43	; 67
    267c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	8b a3       	std	Y+35, r24	; 0x23
    2686:	9c a3       	std	Y+36, r25	; 0x24
    2688:	ad a3       	std	Y+37, r26	; 0x25
    268a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    268c:	6b a1       	ldd	r22, Y+35	; 0x23
    268e:	7c a1       	ldd	r23, Y+36	; 0x24
    2690:	8d a1       	ldd	r24, Y+37	; 0x25
    2692:	9e a1       	ldd	r25, Y+38	; 0x26
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e8       	ldi	r20, 0x80	; 128
    269a:	5f e3       	ldi	r21, 0x3F	; 63
    269c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26a0:	88 23       	and	r24, r24
    26a2:	2c f4       	brge	.+10     	; 0x26ae <LCD_enuInit+0x1c0>
		__ticks = 1;
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	9a a3       	std	Y+34, r25	; 0x22
    26aa:	89 a3       	std	Y+33, r24	; 0x21
    26ac:	3f c0       	rjmp	.+126    	; 0x272c <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    26ae:	6b a1       	ldd	r22, Y+35	; 0x23
    26b0:	7c a1       	ldd	r23, Y+36	; 0x24
    26b2:	8d a1       	ldd	r24, Y+37	; 0x25
    26b4:	9e a1       	ldd	r25, Y+38	; 0x26
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	3f ef       	ldi	r19, 0xFF	; 255
    26ba:	4f e7       	ldi	r20, 0x7F	; 127
    26bc:	57 e4       	ldi	r21, 0x47	; 71
    26be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26c2:	18 16       	cp	r1, r24
    26c4:	4c f5       	brge	.+82     	; 0x2718 <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c6:	6f a1       	ldd	r22, Y+39	; 0x27
    26c8:	78 a5       	ldd	r23, Y+40	; 0x28
    26ca:	89 a5       	ldd	r24, Y+41	; 0x29
    26cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	40 e2       	ldi	r20, 0x20	; 32
    26d4:	51 e4       	ldi	r21, 0x41	; 65
    26d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	bc 01       	movw	r22, r24
    26e0:	cd 01       	movw	r24, r26
    26e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	9a a3       	std	Y+34, r25	; 0x22
    26ec:	89 a3       	std	Y+33, r24	; 0x21
    26ee:	0f c0       	rjmp	.+30     	; 0x270e <LCD_enuInit+0x220>
    26f0:	89 e1       	ldi	r24, 0x19	; 25
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	98 a3       	std	Y+32, r25	; 0x20
    26f6:	8f 8f       	std	Y+31, r24	; 0x1f
    26f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26fa:	98 a1       	ldd	r25, Y+32	; 0x20
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	f1 f7       	brne	.-4      	; 0x26fc <LCD_enuInit+0x20e>
    2700:	98 a3       	std	Y+32, r25	; 0x20
    2702:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2704:	89 a1       	ldd	r24, Y+33	; 0x21
    2706:	9a a1       	ldd	r25, Y+34	; 0x22
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	9a a3       	std	Y+34, r25	; 0x22
    270c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270e:	89 a1       	ldd	r24, Y+33	; 0x21
    2710:	9a a1       	ldd	r25, Y+34	; 0x22
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	69 f7       	brne	.-38     	; 0x26f0 <LCD_enuInit+0x202>
    2716:	14 c0       	rjmp	.+40     	; 0x2740 <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2718:	6b a1       	ldd	r22, Y+35	; 0x23
    271a:	7c a1       	ldd	r23, Y+36	; 0x24
    271c:	8d a1       	ldd	r24, Y+37	; 0x25
    271e:	9e a1       	ldd	r25, Y+38	; 0x26
    2720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	9a a3       	std	Y+34, r25	; 0x22
    272a:	89 a3       	std	Y+33, r24	; 0x21
    272c:	89 a1       	ldd	r24, Y+33	; 0x21
    272e:	9a a1       	ldd	r25, Y+34	; 0x22
    2730:	9e 8f       	std	Y+30, r25	; 0x1e
    2732:	8d 8f       	std	Y+29, r24	; 0x1d
    2734:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2736:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	f1 f7       	brne	.-4      	; 0x2738 <LCD_enuInit+0x24a>
    273c:	9e 8f       	std	Y+30, r25	; 0x1e
    273e:	8d 8f       	std	Y+29, r24	; 0x1d
LCD_invidSendCommend(FUN_SET_FOUR);
#else
#error "LCD_MODE has a wrong selection"
#endif
   _delay_ms(1);
	LCD_invidSendCommand(DISPLAY_ON); //display on and cursor and blink
    2740:	8f e0       	ldi	r24, 0x0F	; 15
    2742:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <LCD_invidSendCommand>
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	a0 e8       	ldi	r26, 0x80	; 128
    274c:	bf e3       	ldi	r27, 0x3F	; 63
    274e:	89 8f       	std	Y+25, r24	; 0x19
    2750:	9a 8f       	std	Y+26, r25	; 0x1a
    2752:	ab 8f       	std	Y+27, r26	; 0x1b
    2754:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2756:	69 8d       	ldd	r22, Y+25	; 0x19
    2758:	7a 8d       	ldd	r23, Y+26	; 0x1a
    275a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    275c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	4a e7       	ldi	r20, 0x7A	; 122
    2764:	53 e4       	ldi	r21, 0x43	; 67
    2766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	8d 8b       	std	Y+21, r24	; 0x15
    2770:	9e 8b       	std	Y+22, r25	; 0x16
    2772:	af 8b       	std	Y+23, r26	; 0x17
    2774:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2776:	6d 89       	ldd	r22, Y+21	; 0x15
    2778:	7e 89       	ldd	r23, Y+22	; 0x16
    277a:	8f 89       	ldd	r24, Y+23	; 0x17
    277c:	98 8d       	ldd	r25, Y+24	; 0x18
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e8       	ldi	r20, 0x80	; 128
    2784:	5f e3       	ldi	r21, 0x3F	; 63
    2786:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    278a:	88 23       	and	r24, r24
    278c:	2c f4       	brge	.+10     	; 0x2798 <LCD_enuInit+0x2aa>
		__ticks = 1;
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	9c 8b       	std	Y+20, r25	; 0x14
    2794:	8b 8b       	std	Y+19, r24	; 0x13
    2796:	3f c0       	rjmp	.+126    	; 0x2816 <LCD_enuInit+0x328>
	else if (__tmp > 65535)
    2798:	6d 89       	ldd	r22, Y+21	; 0x15
    279a:	7e 89       	ldd	r23, Y+22	; 0x16
    279c:	8f 89       	ldd	r24, Y+23	; 0x17
    279e:	98 8d       	ldd	r25, Y+24	; 0x18
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	3f ef       	ldi	r19, 0xFF	; 255
    27a4:	4f e7       	ldi	r20, 0x7F	; 127
    27a6:	57 e4       	ldi	r21, 0x47	; 71
    27a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ac:	18 16       	cp	r1, r24
    27ae:	4c f5       	brge	.+82     	; 0x2802 <LCD_enuInit+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b0:	69 8d       	ldd	r22, Y+25	; 0x19
    27b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e2       	ldi	r20, 0x20	; 32
    27be:	51 e4       	ldi	r21, 0x41	; 65
    27c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	bc 01       	movw	r22, r24
    27ca:	cd 01       	movw	r24, r26
    27cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	9c 8b       	std	Y+20, r25	; 0x14
    27d6:	8b 8b       	std	Y+19, r24	; 0x13
    27d8:	0f c0       	rjmp	.+30     	; 0x27f8 <LCD_enuInit+0x30a>
    27da:	89 e1       	ldi	r24, 0x19	; 25
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	9a 8b       	std	Y+18, r25	; 0x12
    27e0:	89 8b       	std	Y+17, r24	; 0x11
    27e2:	89 89       	ldd	r24, Y+17	; 0x11
    27e4:	9a 89       	ldd	r25, Y+18	; 0x12
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	f1 f7       	brne	.-4      	; 0x27e6 <LCD_enuInit+0x2f8>
    27ea:	9a 8b       	std	Y+18, r25	; 0x12
    27ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ee:	8b 89       	ldd	r24, Y+19	; 0x13
    27f0:	9c 89       	ldd	r25, Y+20	; 0x14
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	9c 8b       	std	Y+20, r25	; 0x14
    27f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f8:	8b 89       	ldd	r24, Y+19	; 0x13
    27fa:	9c 89       	ldd	r25, Y+20	; 0x14
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	69 f7       	brne	.-38     	; 0x27da <LCD_enuInit+0x2ec>
    2800:	14 c0       	rjmp	.+40     	; 0x282a <LCD_enuInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2802:	6d 89       	ldd	r22, Y+21	; 0x15
    2804:	7e 89       	ldd	r23, Y+22	; 0x16
    2806:	8f 89       	ldd	r24, Y+23	; 0x17
    2808:	98 8d       	ldd	r25, Y+24	; 0x18
    280a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	9c 8b       	std	Y+20, r25	; 0x14
    2814:	8b 8b       	std	Y+19, r24	; 0x13
    2816:	8b 89       	ldd	r24, Y+19	; 0x13
    2818:	9c 89       	ldd	r25, Y+20	; 0x14
    281a:	98 8b       	std	Y+16, r25	; 0x10
    281c:	8f 87       	std	Y+15, r24	; 0x0f
    281e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2820:	98 89       	ldd	r25, Y+16	; 0x10
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	f1 f7       	brne	.-4      	; 0x2822 <LCD_enuInit+0x334>
    2826:	98 8b       	std	Y+16, r25	; 0x10
    2828:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommand(DISPLAY_CLEAR);
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <LCD_invidSendCommand>
    2830:	80 e0       	ldi	r24, 0x00	; 0
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	a0 e0       	ldi	r26, 0x00	; 0
    2836:	b0 e4       	ldi	r27, 0x40	; 64
    2838:	8b 87       	std	Y+11, r24	; 0x0b
    283a:	9c 87       	std	Y+12, r25	; 0x0c
    283c:	ad 87       	std	Y+13, r26	; 0x0d
    283e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2840:	6b 85       	ldd	r22, Y+11	; 0x0b
    2842:	7c 85       	ldd	r23, Y+12	; 0x0c
    2844:	8d 85       	ldd	r24, Y+13	; 0x0d
    2846:	9e 85       	ldd	r25, Y+14	; 0x0e
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	4a e7       	ldi	r20, 0x7A	; 122
    284e:	53 e4       	ldi	r21, 0x43	; 67
    2850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	8f 83       	std	Y+7, r24	; 0x07
    285a:	98 87       	std	Y+8, r25	; 0x08
    285c:	a9 87       	std	Y+9, r26	; 0x09
    285e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2860:	6f 81       	ldd	r22, Y+7	; 0x07
    2862:	78 85       	ldd	r23, Y+8	; 0x08
    2864:	89 85       	ldd	r24, Y+9	; 0x09
    2866:	9a 85       	ldd	r25, Y+10	; 0x0a
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	40 e8       	ldi	r20, 0x80	; 128
    286e:	5f e3       	ldi	r21, 0x3F	; 63
    2870:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2874:	88 23       	and	r24, r24
    2876:	2c f4       	brge	.+10     	; 0x2882 <LCD_enuInit+0x394>
		__ticks = 1;
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	9e 83       	std	Y+6, r25	; 0x06
    287e:	8d 83       	std	Y+5, r24	; 0x05
    2880:	3f c0       	rjmp	.+126    	; 0x2900 <LCD_enuInit+0x412>
	else if (__tmp > 65535)
    2882:	6f 81       	ldd	r22, Y+7	; 0x07
    2884:	78 85       	ldd	r23, Y+8	; 0x08
    2886:	89 85       	ldd	r24, Y+9	; 0x09
    2888:	9a 85       	ldd	r25, Y+10	; 0x0a
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	3f ef       	ldi	r19, 0xFF	; 255
    288e:	4f e7       	ldi	r20, 0x7F	; 127
    2890:	57 e4       	ldi	r21, 0x47	; 71
    2892:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2896:	18 16       	cp	r1, r24
    2898:	4c f5       	brge	.+82     	; 0x28ec <LCD_enuInit+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289a:	6b 85       	ldd	r22, Y+11	; 0x0b
    289c:	7c 85       	ldd	r23, Y+12	; 0x0c
    289e:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	40 e2       	ldi	r20, 0x20	; 32
    28a8:	51 e4       	ldi	r21, 0x41	; 65
    28aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	bc 01       	movw	r22, r24
    28b4:	cd 01       	movw	r24, r26
    28b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	9e 83       	std	Y+6, r25	; 0x06
    28c0:	8d 83       	std	Y+5, r24	; 0x05
    28c2:	0f c0       	rjmp	.+30     	; 0x28e2 <LCD_enuInit+0x3f4>
    28c4:	89 e1       	ldi	r24, 0x19	; 25
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	9c 83       	std	Y+4, r25	; 0x04
    28ca:	8b 83       	std	Y+3, r24	; 0x03
    28cc:	8b 81       	ldd	r24, Y+3	; 0x03
    28ce:	9c 81       	ldd	r25, Y+4	; 0x04
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	f1 f7       	brne	.-4      	; 0x28d0 <LCD_enuInit+0x3e2>
    28d4:	9c 83       	std	Y+4, r25	; 0x04
    28d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d8:	8d 81       	ldd	r24, Y+5	; 0x05
    28da:	9e 81       	ldd	r25, Y+6	; 0x06
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	9e 83       	std	Y+6, r25	; 0x06
    28e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e2:	8d 81       	ldd	r24, Y+5	; 0x05
    28e4:	9e 81       	ldd	r25, Y+6	; 0x06
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	69 f7       	brne	.-38     	; 0x28c4 <LCD_enuInit+0x3d6>
    28ea:	14 c0       	rjmp	.+40     	; 0x2914 <LCD_enuInit+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ec:	6f 81       	ldd	r22, Y+7	; 0x07
    28ee:	78 85       	ldd	r23, Y+8	; 0x08
    28f0:	89 85       	ldd	r24, Y+9	; 0x09
    28f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	9e 83       	std	Y+6, r25	; 0x06
    28fe:	8d 83       	std	Y+5, r24	; 0x05
    2900:	8d 81       	ldd	r24, Y+5	; 0x05
    2902:	9e 81       	ldd	r25, Y+6	; 0x06
    2904:	9a 83       	std	Y+2, r25	; 0x02
    2906:	89 83       	std	Y+1, r24	; 0x01
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	9a 81       	ldd	r25, Y+2	; 0x02
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	f1 f7       	brne	.-4      	; 0x290c <LCD_enuInit+0x41e>
    2910:	9a 83       	std	Y+2, r25	; 0x02
    2912:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommand(ENTRY_MODE); //Write left to right increase
    2914:	86 e0       	ldi	r24, 0x06	; 6
    2916:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <LCD_invidSendCommand>
	return Local_enuErrorState;
    291a:	89 ad       	ldd	r24, Y+57	; 0x39


}
    291c:	e9 96       	adiw	r28, 0x39	; 57
    291e:	0f b6       	in	r0, 0x3f	; 63
    2920:	f8 94       	cli
    2922:	de bf       	out	0x3e, r29	; 62
    2924:	0f be       	out	0x3f, r0	; 63
    2926:	cd bf       	out	0x3d, r28	; 61
    2928:	cf 91       	pop	r28
    292a:	df 91       	pop	r29
    292c:	08 95       	ret

0000292e <LCD_enuDisplayChar>:
ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    292e:	df 93       	push	r29
    2930:	cf 93       	push	r28
    2932:	00 d0       	rcall	.+0      	; 0x2934 <LCD_enuDisplayChar+0x6>
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    293a:	19 82       	std	Y+1, r1	; 0x01

	/*set pin value for RS=1 to DATA*/
	DIO_enuSetPinVal(RS_PORT , RS_PIN , DIO_u8HIGH);
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	60 e0       	ldi	r22, 0x00	; 0
    2940:	41 e0       	ldi	r20, 0x01	; 1
    2942:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_enuSetPinVal>

	LCD_vidLatch(Copy_u8Data);
    2946:	8a 81       	ldd	r24, Y+2	; 0x02
    2948:	0e 94 c2 14 	call	0x2984	; 0x2984 <LCD_vidLatch>

	return Local_enuErrorState;
    294c:	89 81       	ldd	r24, Y+1	; 0x01


}
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	cf 91       	pop	r28
    2954:	df 91       	pop	r29
    2956:	08 95       	ret

00002958 <LCD_enuSendCommand>:
ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    2958:	df 93       	push	r29
    295a:	cf 93       	push	r28
    295c:	00 d0       	rcall	.+0      	; 0x295e <LCD_enuSendCommand+0x6>
    295e:	cd b7       	in	r28, 0x3d	; 61
    2960:	de b7       	in	r29, 0x3e	; 62
    2962:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2964:	19 82       	std	Y+1, r1	; 0x01

	/*set pin value for RS=0 to command*/
	Local_enuErrorState=DIO_enuSetPinVal(RS_PORT,RS_PIN,DIO_u8LOW);
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	60 e0       	ldi	r22, 0x00	; 0
    296a:	40 e0       	ldi	r20, 0x00	; 0
    296c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_enuSetPinVal>
    2970:	89 83       	std	Y+1, r24	; 0x01
	 LCD_vidLatch(Copy_u8Command);
    2972:	8a 81       	ldd	r24, Y+2	; 0x02
    2974:	0e 94 c2 14 	call	0x2984	; 0x2984 <LCD_vidLatch>



	return Local_enuErrorState;
    2978:	89 81       	ldd	r24, Y+1	; 0x01


}
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	cf 91       	pop	r28
    2980:	df 91       	pop	r29
    2982:	08 95       	ret

00002984 <LCD_vidLatch>:
static void LCD_vidLatch(u8 Copy_u8Data){
    2984:	df 93       	push	r29
    2986:	cf 93       	push	r28
    2988:	cd b7       	in	r28, 0x3d	; 61
    298a:	de b7       	in	r29, 0x3e	; 62
    298c:	2f 97       	sbiw	r28, 0x0f	; 15
    298e:	0f b6       	in	r0, 0x3f	; 63
    2990:	f8 94       	cli
    2992:	de bf       	out	0x3e, r29	; 62
    2994:	0f be       	out	0x3f, r0	; 63
    2996:	cd bf       	out	0x3d, r28	; 61
    2998:	8f 87       	std	Y+15, r24	; 0x0f


	    /* set pin value for RW=0 to write ,Enable pin (EN)=LOW */
		DIO_enuSetPinVal(RW_PORT,RW_PIN,DIO_u8LOW);
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	61 e0       	ldi	r22, 0x01	; 1
    299e:	40 e0       	ldi	r20, 0x00	; 0
    29a0:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_enuSetPinVal>
	    DIO_enuSetPinVal(EN_PORT,EN_PIN,DIO_u8LOW);
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	62 e0       	ldi	r22, 0x02	; 2
    29a8:	40 e0       	ldi	r20, 0x00	; 0
    29aa:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_enuSetPinVal>

	    /* set pin value for DATA pins */
	    DIO_enuSetPinVal(D7_PORT,D7_PIN,(Copy_u8Data>>BIT_SEVEN)&MASK_NUM);
    29ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    29b0:	98 2f       	mov	r25, r24
    29b2:	99 1f       	adc	r25, r25
    29b4:	99 27       	eor	r25, r25
    29b6:	99 1f       	adc	r25, r25
    29b8:	82 e0       	ldi	r24, 0x02	; 2
    29ba:	60 e0       	ldi	r22, 0x00	; 0
    29bc:	49 2f       	mov	r20, r25
    29be:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_enuSetPinVal>
	    DIO_enuSetPinVal(D6_PORT,D6_PIN,(Copy_u8Data>>BIT_SIX  )&MASK_NUM);
    29c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    29c4:	82 95       	swap	r24
    29c6:	86 95       	lsr	r24
    29c8:	86 95       	lsr	r24
    29ca:	83 70       	andi	r24, 0x03	; 3
    29cc:	98 2f       	mov	r25, r24
    29ce:	91 70       	andi	r25, 0x01	; 1
    29d0:	82 e0       	ldi	r24, 0x02	; 2
    29d2:	61 e0       	ldi	r22, 0x01	; 1
    29d4:	49 2f       	mov	r20, r25
    29d6:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_enuSetPinVal>
	    DIO_enuSetPinVal(D5_PORT,D5_PIN,(Copy_u8Data>>BIT_FIVE )&MASK_NUM);
    29da:	8f 85       	ldd	r24, Y+15	; 0x0f
    29dc:	82 95       	swap	r24
    29de:	86 95       	lsr	r24
    29e0:	87 70       	andi	r24, 0x07	; 7
    29e2:	98 2f       	mov	r25, r24
    29e4:	91 70       	andi	r25, 0x01	; 1
    29e6:	82 e0       	ldi	r24, 0x02	; 2
    29e8:	62 e0       	ldi	r22, 0x02	; 2
    29ea:	49 2f       	mov	r20, r25
    29ec:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_enuSetPinVal>
	    DIO_enuSetPinVal(D4_PORT,D4_PIN,(Copy_u8Data>>BIT_FOUR)&MASK_NUM);
    29f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    29f2:	82 95       	swap	r24
    29f4:	8f 70       	andi	r24, 0x0F	; 15
    29f6:	98 2f       	mov	r25, r24
    29f8:	91 70       	andi	r25, 0x01	; 1
    29fa:	82 e0       	ldi	r24, 0x02	; 2
    29fc:	63 e0       	ldi	r22, 0x03	; 3
    29fe:	49 2f       	mov	r20, r25
    2a00:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_enuSetPinVal>
#if LCD_MODE ==EIGHT_BIT
		DIO_enuSetPinVal(D3_PORT,D3_PIN,(Copy_u8Data>>BIT_THREE)&MASK_NUM);
    2a04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a06:	86 95       	lsr	r24
    2a08:	86 95       	lsr	r24
    2a0a:	86 95       	lsr	r24
    2a0c:	98 2f       	mov	r25, r24
    2a0e:	91 70       	andi	r25, 0x01	; 1
    2a10:	82 e0       	ldi	r24, 0x02	; 2
    2a12:	64 e0       	ldi	r22, 0x04	; 4
    2a14:	49 2f       	mov	r20, r25
    2a16:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_enuSetPinVal>
		DIO_enuSetPinVal(D2_PORT,D2_PIN,(Copy_u8Data>>BIT_TWO  )&MASK_NUM);
    2a1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a1c:	86 95       	lsr	r24
    2a1e:	86 95       	lsr	r24
    2a20:	98 2f       	mov	r25, r24
    2a22:	91 70       	andi	r25, 0x01	; 1
    2a24:	82 e0       	ldi	r24, 0x02	; 2
    2a26:	65 e0       	ldi	r22, 0x05	; 5
    2a28:	49 2f       	mov	r20, r25
    2a2a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_enuSetPinVal>
		DIO_enuSetPinVal(D1_PORT,D1_PIN,(Copy_u8Data>>BIT_ONE  )&MASK_NUM);
    2a2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a30:	86 95       	lsr	r24
    2a32:	98 2f       	mov	r25, r24
    2a34:	91 70       	andi	r25, 0x01	; 1
    2a36:	82 e0       	ldi	r24, 0x02	; 2
    2a38:	66 e0       	ldi	r22, 0x06	; 6
    2a3a:	49 2f       	mov	r20, r25
    2a3c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_enuSetPinVal>
		DIO_enuSetPinVal(D0_PORT,D0_PIN,(Copy_u8Data>>BIT_ZERO )&MASK_NUM);
    2a40:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a42:	98 2f       	mov	r25, r24
    2a44:	91 70       	andi	r25, 0x01	; 1
    2a46:	82 e0       	ldi	r24, 0x02	; 2
    2a48:	67 e0       	ldi	r22, 0x07	; 7
    2a4a:	49 2f       	mov	r20, r25
    2a4c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_enuSetPinVal>
		 DIO_enuSetPinVal(D4_PORT,D4_PIN,(Copy_u8Data>>BIT_ZERO &MASK_NUM);
#else
#error "LCD_MODE has a wrong selection"
#endif
		/*Enable*/
		 DIO_enuSetPinVal(EN_PORT,EN_PIN,DIO_u8HIGH);
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	62 e0       	ldi	r22, 0x02	; 2
    2a54:	41 e0       	ldi	r20, 0x01	; 1
    2a56:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_enuSetPinVal>
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	a0 e2       	ldi	r26, 0x20	; 32
    2a60:	b1 e4       	ldi	r27, 0x41	; 65
    2a62:	8b 87       	std	Y+11, r24	; 0x0b
    2a64:	9c 87       	std	Y+12, r25	; 0x0c
    2a66:	ad 87       	std	Y+13, r26	; 0x0d
    2a68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a70:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	4a e7       	ldi	r20, 0x7A	; 122
    2a78:	53 e4       	ldi	r21, 0x43	; 67
    2a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	8f 83       	std	Y+7, r24	; 0x07
    2a84:	98 87       	std	Y+8, r25	; 0x08
    2a86:	a9 87       	std	Y+9, r26	; 0x09
    2a88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8c:	78 85       	ldd	r23, Y+8	; 0x08
    2a8e:	89 85       	ldd	r24, Y+9	; 0x09
    2a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	40 e8       	ldi	r20, 0x80	; 128
    2a98:	5f e3       	ldi	r21, 0x3F	; 63
    2a9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a9e:	88 23       	and	r24, r24
    2aa0:	2c f4       	brge	.+10     	; 0x2aac <LCD_vidLatch+0x128>
		__ticks = 1;
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	9e 83       	std	Y+6, r25	; 0x06
    2aa8:	8d 83       	std	Y+5, r24	; 0x05
    2aaa:	3f c0       	rjmp	.+126    	; 0x2b2a <LCD_vidLatch+0x1a6>
	else if (__tmp > 65535)
    2aac:	6f 81       	ldd	r22, Y+7	; 0x07
    2aae:	78 85       	ldd	r23, Y+8	; 0x08
    2ab0:	89 85       	ldd	r24, Y+9	; 0x09
    2ab2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	3f ef       	ldi	r19, 0xFF	; 255
    2ab8:	4f e7       	ldi	r20, 0x7F	; 127
    2aba:	57 e4       	ldi	r21, 0x47	; 71
    2abc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ac0:	18 16       	cp	r1, r24
    2ac2:	4c f5       	brge	.+82     	; 0x2b16 <LCD_vidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ac6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ac8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aca:	9e 85       	ldd	r25, Y+14	; 0x0e
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	40 e2       	ldi	r20, 0x20	; 32
    2ad2:	51 e4       	ldi	r21, 0x41	; 65
    2ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	bc 01       	movw	r22, r24
    2ade:	cd 01       	movw	r24, r26
    2ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	9e 83       	std	Y+6, r25	; 0x06
    2aea:	8d 83       	std	Y+5, r24	; 0x05
    2aec:	0f c0       	rjmp	.+30     	; 0x2b0c <LCD_vidLatch+0x188>
    2aee:	89 e1       	ldi	r24, 0x19	; 25
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	9c 83       	std	Y+4, r25	; 0x04
    2af4:	8b 83       	std	Y+3, r24	; 0x03
    2af6:	8b 81       	ldd	r24, Y+3	; 0x03
    2af8:	9c 81       	ldd	r25, Y+4	; 0x04
    2afa:	01 97       	sbiw	r24, 0x01	; 1
    2afc:	f1 f7       	brne	.-4      	; 0x2afa <LCD_vidLatch+0x176>
    2afe:	9c 83       	std	Y+4, r25	; 0x04
    2b00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b02:	8d 81       	ldd	r24, Y+5	; 0x05
    2b04:	9e 81       	ldd	r25, Y+6	; 0x06
    2b06:	01 97       	sbiw	r24, 0x01	; 1
    2b08:	9e 83       	std	Y+6, r25	; 0x06
    2b0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b10:	00 97       	sbiw	r24, 0x00	; 0
    2b12:	69 f7       	brne	.-38     	; 0x2aee <LCD_vidLatch+0x16a>
    2b14:	14 c0       	rjmp	.+40     	; 0x2b3e <LCD_vidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b16:	6f 81       	ldd	r22, Y+7	; 0x07
    2b18:	78 85       	ldd	r23, Y+8	; 0x08
    2b1a:	89 85       	ldd	r24, Y+9	; 0x09
    2b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	9e 83       	std	Y+6, r25	; 0x06
    2b28:	8d 83       	std	Y+5, r24	; 0x05
    2b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b2e:	9a 83       	std	Y+2, r25	; 0x02
    2b30:	89 83       	std	Y+1, r24	; 0x01
    2b32:	89 81       	ldd	r24, Y+1	; 0x01
    2b34:	9a 81       	ldd	r25, Y+2	; 0x02
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	f1 f7       	brne	.-4      	; 0x2b36 <LCD_vidLatch+0x1b2>
    2b3a:	9a 83       	std	Y+2, r25	; 0x02
    2b3c:	89 83       	std	Y+1, r24	; 0x01
		 _delay_ms(10);
		 DIO_enuSetPinVal(EN_PORT,EN_PIN,DIO_u8LOW);
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	62 e0       	ldi	r22, 0x02	; 2
    2b42:	40 e0       	ldi	r20, 0x00	; 0
    2b44:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_enuSetPinVal>

		// _delay_ms(10);
}
    2b48:	2f 96       	adiw	r28, 0x0f	; 15
    2b4a:	0f b6       	in	r0, 0x3f	; 63
    2b4c:	f8 94       	cli
    2b4e:	de bf       	out	0x3e, r29	; 62
    2b50:	0f be       	out	0x3f, r0	; 63
    2b52:	cd bf       	out	0x3d, r28	; 61
    2b54:	cf 91       	pop	r28
    2b56:	df 91       	pop	r29
    2b58:	08 95       	ret

00002b5a <LCD_vidClearScreen>:


void LCD_vidClearScreen(void)
{
    2b5a:	df 93       	push	r29
    2b5c:	cf 93       	push	r28
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
	LCD_invidSendCommand(DISPLAY_CLEAR);
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <LCD_invidSendCommand>
	//LCD_u8PosCounter = 0;
}
    2b68:	cf 91       	pop	r28
    2b6a:	df 91       	pop	r29
    2b6c:	08 95       	ret

00002b6e <LCD_invidSendCommand>:

static inline void LCD_invidSendCommand(u8 Copy_u8Command)
{
    2b6e:	df 93       	push	r29
    2b70:	cf 93       	push	r28
    2b72:	0f 92       	push	r0
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
    2b78:	89 83       	std	Y+1, r24	; 0x01

		/*set pin value for RS=0 to command*/
		DIO_enuSetPinVal(RS_PORT,RS_PIN,DIO_u8LOW);
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	60 e0       	ldi	r22, 0x00	; 0
    2b7e:	40 e0       	ldi	r20, 0x00	; 0
    2b80:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_enuSetPinVal>

		LCD_vidLatch(  Copy_u8Command);
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	0e 94 c2 14 	call	0x2984	; 0x2984 <LCD_vidLatch>
}
    2b8a:	0f 90       	pop	r0
    2b8c:	cf 91       	pop	r28
    2b8e:	df 91       	pop	r29
    2b90:	08 95       	ret

00002b92 <LCD_enuGoToPosition>:

ES_t LCD_enuGoToPosition(u8 Copy_u8Row, u8 Copy_u8Col){
    2b92:	df 93       	push	r29
    2b94:	cf 93       	push	r28
    2b96:	cd b7       	in	r28, 0x3d	; 61
    2b98:	de b7       	in	r29, 0x3e	; 62
    2b9a:	28 97       	sbiw	r28, 0x08	; 8
    2b9c:	0f b6       	in	r0, 0x3f	; 63
    2b9e:	f8 94       	cli
    2ba0:	de bf       	out	0x3e, r29	; 62
    2ba2:	0f be       	out	0x3f, r0	; 63
    2ba4:	cd bf       	out	0x3d, r28	; 61
    2ba6:	8f 83       	std	Y+7, r24	; 0x07
    2ba8:	68 87       	std	Y+8, r22	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    2baa:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8Address;
    if(Copy_u8Row<4&&Copy_u8Col<16){
    2bac:	8f 81       	ldd	r24, Y+7	; 0x07
    2bae:	84 30       	cpi	r24, 0x04	; 4
    2bb0:	c0 f4       	brcc	.+48     	; 0x2be2 <LCD_enuGoToPosition+0x50>
    2bb2:	88 85       	ldd	r24, Y+8	; 0x08
    2bb4:	80 31       	cpi	r24, 0x10	; 16
    2bb6:	a8 f4       	brcc	.+42     	; 0x2be2 <LCD_enuGoToPosition+0x50>
    	u8 arr[4]={0x80,0xC0,0x90,0xD0};
    2bb8:	80 e8       	ldi	r24, 0x80	; 128
    2bba:	8b 83       	std	Y+3, r24	; 0x03
    2bbc:	80 ec       	ldi	r24, 0xC0	; 192
    2bbe:	8c 83       	std	Y+4, r24	; 0x04
    2bc0:	80 e9       	ldi	r24, 0x90	; 144
    2bc2:	8d 83       	std	Y+5, r24	; 0x05
    2bc4:	80 ed       	ldi	r24, 0xD0	; 208
    2bc6:	8e 83       	std	Y+6, r24	; 0x06
    		LCD_enuSendCommand(arr[Copy_u8Row]+Copy_u8Col);
    2bc8:	8f 81       	ldd	r24, Y+7	; 0x07
    2bca:	28 2f       	mov	r18, r24
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	ce 01       	movw	r24, r28
    2bd0:	03 96       	adiw	r24, 0x03	; 3
    2bd2:	fc 01       	movw	r30, r24
    2bd4:	e2 0f       	add	r30, r18
    2bd6:	f3 1f       	adc	r31, r19
    2bd8:	90 81       	ld	r25, Z
    2bda:	88 85       	ldd	r24, Y+8	; 0x08
    2bdc:	89 0f       	add	r24, r25
    2bde:	0e 94 ac 14 	call	0x2958	; 0x2958 <LCD_enuSendCommand>

    }

	return Local_enuErrorState;
    2be2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2be4:	28 96       	adiw	r28, 0x08	; 8
    2be6:	0f b6       	in	r0, 0x3f	; 63
    2be8:	f8 94       	cli
    2bea:	de bf       	out	0x3e, r29	; 62
    2bec:	0f be       	out	0x3f, r0	; 63
    2bee:	cd bf       	out	0x3d, r28	; 61
    2bf0:	cf 91       	pop	r28
    2bf2:	df 91       	pop	r29
    2bf4:	08 95       	ret

00002bf6 <LCD_enuWriteString>:



ES_t LCD_enuWriteString(u8 *Copy_pu8Str,u8 Copy_u8Row, u8 Copy_u8Col){
    2bf6:	df 93       	push	r29
    2bf8:	cf 93       	push	r28
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
    2bfe:	28 97       	sbiw	r28, 0x08	; 8
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	f8 94       	cli
    2c04:	de bf       	out	0x3e, r29	; 62
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	cd bf       	out	0x3d, r28	; 61
    2c0a:	9d 83       	std	Y+5, r25	; 0x05
    2c0c:	8c 83       	std	Y+4, r24	; 0x04
    2c0e:	6e 83       	std	Y+6, r22	; 0x06
    2c10:	4f 83       	std	Y+7, r20	; 0x07
	ES_t Local_enuErrorState = ES_NOK;
    2c12:	1b 82       	std	Y+3, r1	; 0x03
	LCD_enuGoToPosition(Copy_u8Row,  Copy_u8Col);
    2c14:	8e 81       	ldd	r24, Y+6	; 0x06
    2c16:	6f 81       	ldd	r22, Y+7	; 0x07
    2c18:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <LCD_enuGoToPosition>
	u8 Local_u8Index=0;
    2c1c:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Line=Copy_u8Row;
    2c1e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c20:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8Str!=NULL){
    2c22:	8c 81       	ldd	r24, Y+4	; 0x04
    2c24:	9d 81       	ldd	r25, Y+5	; 0x05
    2c26:	00 97       	sbiw	r24, 0x00	; 0
    2c28:	09 f4       	brne	.+2      	; 0x2c2c <LCD_enuWriteString+0x36>
    2c2a:	8d c0       	rjmp	.+282    	; 0x2d46 <LCD_enuWriteString+0x150>
    2c2c:	66 c0       	rjmp	.+204    	; 0x2cfa <LCD_enuWriteString+0x104>
		while(Copy_pu8Str[Local_u8Index] !='\0' && ((Copy_u8Row*16)+(Copy_u8Col+Local_u8Index))<32){
			if(((Copy_u8Row*16)+(Copy_u8Col+Local_u8Index))<16){
    2c2e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c30:	88 2f       	mov	r24, r24
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	ac 01       	movw	r20, r24
    2c36:	42 95       	swap	r20
    2c38:	52 95       	swap	r21
    2c3a:	50 7f       	andi	r21, 0xF0	; 240
    2c3c:	54 27       	eor	r21, r20
    2c3e:	40 7f       	andi	r20, 0xF0	; 240
    2c40:	54 27       	eor	r21, r20
    2c42:	8f 81       	ldd	r24, Y+7	; 0x07
    2c44:	28 2f       	mov	r18, r24
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4a:	88 2f       	mov	r24, r24
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	82 0f       	add	r24, r18
    2c50:	93 1f       	adc	r25, r19
    2c52:	84 0f       	add	r24, r20
    2c54:	95 1f       	adc	r25, r21
    2c56:	80 31       	cpi	r24, 0x10	; 16
    2c58:	91 05       	cpc	r25, r1
    2c5a:	84 f4       	brge	.+32     	; 0x2c7c <LCD_enuWriteString+0x86>

				Local_enuErrorState=LCD_enuDisplayChar(Copy_pu8Str[Local_u8Index]);
    2c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5e:	28 2f       	mov	r18, r24
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	8c 81       	ldd	r24, Y+4	; 0x04
    2c64:	9d 81       	ldd	r25, Y+5	; 0x05
    2c66:	fc 01       	movw	r30, r24
    2c68:	e2 0f       	add	r30, r18
    2c6a:	f3 1f       	adc	r31, r19
    2c6c:	80 81       	ld	r24, Z
    2c6e:	0e 94 97 14 	call	0x292e	; 0x292e <LCD_enuDisplayChar>
    2c72:	8b 83       	std	Y+3, r24	; 0x03
				Local_u8Index++;
    2c74:	8a 81       	ldd	r24, Y+2	; 0x02
    2c76:	8f 5f       	subi	r24, 0xFF	; 255
    2c78:	8a 83       	std	Y+2, r24	; 0x02
    2c7a:	3f c0       	rjmp	.+126    	; 0x2cfa <LCD_enuWriteString+0x104>
			}
			else if(((Copy_u8Row*16)+(Copy_u8Col+Local_u8Index))==16 && Local_u8Line==0){
    2c7c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c7e:	88 2f       	mov	r24, r24
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	ac 01       	movw	r20, r24
    2c84:	42 95       	swap	r20
    2c86:	52 95       	swap	r21
    2c88:	50 7f       	andi	r21, 0xF0	; 240
    2c8a:	54 27       	eor	r21, r20
    2c8c:	40 7f       	andi	r20, 0xF0	; 240
    2c8e:	54 27       	eor	r21, r20
    2c90:	8f 81       	ldd	r24, Y+7	; 0x07
    2c92:	28 2f       	mov	r18, r24
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	8a 81       	ldd	r24, Y+2	; 0x02
    2c98:	88 2f       	mov	r24, r24
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	82 0f       	add	r24, r18
    2c9e:	93 1f       	adc	r25, r19
    2ca0:	84 0f       	add	r24, r20
    2ca2:	95 1f       	adc	r25, r21
    2ca4:	80 31       	cpi	r24, 0x10	; 16
    2ca6:	91 05       	cpc	r25, r1
    2ca8:	59 f4       	brne	.+22     	; 0x2cc0 <LCD_enuWriteString+0xca>
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	88 23       	and	r24, r24
    2cae:	41 f4       	brne	.+16     	; 0x2cc0 <LCD_enuWriteString+0xca>
				LCD_enuGoToPosition(1,0);
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	60 e0       	ldi	r22, 0x00	; 0
    2cb4:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <LCD_enuGoToPosition>
				Local_u8Line++;
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
    2cba:	8f 5f       	subi	r24, 0xFF	; 255
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    2cbe:	1d c0       	rjmp	.+58     	; 0x2cfa <LCD_enuWriteString+0x104>

			}
			else if((Copy_u8Col+Local_u8Index)<32 && Local_u8Line==1){
    2cc0:	8f 81       	ldd	r24, Y+7	; 0x07
    2cc2:	28 2f       	mov	r18, r24
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc8:	88 2f       	mov	r24, r24
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	82 0f       	add	r24, r18
    2cce:	93 1f       	adc	r25, r19
    2cd0:	80 32       	cpi	r24, 0x20	; 32
    2cd2:	91 05       	cpc	r25, r1
    2cd4:	94 f4       	brge	.+36     	; 0x2cfa <LCD_enuWriteString+0x104>
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	81 30       	cpi	r24, 0x01	; 1
    2cda:	79 f4       	brne	.+30     	; 0x2cfa <LCD_enuWriteString+0x104>
				Local_enuErrorState=LCD_enuDisplayChar(Copy_pu8Str[Local_u8Index]);
    2cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cde:	28 2f       	mov	r18, r24
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ce6:	fc 01       	movw	r30, r24
    2ce8:	e2 0f       	add	r30, r18
    2cea:	f3 1f       	adc	r31, r19
    2cec:	80 81       	ld	r24, Z
    2cee:	0e 94 97 14 	call	0x292e	; 0x292e <LCD_enuDisplayChar>
    2cf2:	8b 83       	std	Y+3, r24	; 0x03
				Local_u8Index++;
    2cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf6:	8f 5f       	subi	r24, 0xFF	; 255
    2cf8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
	LCD_enuGoToPosition(Copy_u8Row,  Copy_u8Col);
	u8 Local_u8Index=0;
	u8 Local_u8Line=Copy_u8Row;
	if(Copy_pu8Str!=NULL){
		while(Copy_pu8Str[Local_u8Index] !='\0' && ((Copy_u8Row*16)+(Copy_u8Col+Local_u8Index))<32){
    2cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfc:	28 2f       	mov	r18, r24
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	8c 81       	ldd	r24, Y+4	; 0x04
    2d02:	9d 81       	ldd	r25, Y+5	; 0x05
    2d04:	fc 01       	movw	r30, r24
    2d06:	e2 0f       	add	r30, r18
    2d08:	f3 1f       	adc	r31, r19
    2d0a:	80 81       	ld	r24, Z
    2d0c:	88 23       	and	r24, r24
    2d0e:	c1 f0       	breq	.+48     	; 0x2d40 <LCD_enuWriteString+0x14a>
    2d10:	8e 81       	ldd	r24, Y+6	; 0x06
    2d12:	88 2f       	mov	r24, r24
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	ac 01       	movw	r20, r24
    2d18:	42 95       	swap	r20
    2d1a:	52 95       	swap	r21
    2d1c:	50 7f       	andi	r21, 0xF0	; 240
    2d1e:	54 27       	eor	r21, r20
    2d20:	40 7f       	andi	r20, 0xF0	; 240
    2d22:	54 27       	eor	r21, r20
    2d24:	8f 81       	ldd	r24, Y+7	; 0x07
    2d26:	28 2f       	mov	r18, r24
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2c:	88 2f       	mov	r24, r24
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	82 0f       	add	r24, r18
    2d32:	93 1f       	adc	r25, r19
    2d34:	84 0f       	add	r24, r20
    2d36:	95 1f       	adc	r25, r21
    2d38:	80 32       	cpi	r24, 0x20	; 32
    2d3a:	91 05       	cpc	r25, r1
    2d3c:	0c f4       	brge	.+2      	; 0x2d40 <LCD_enuWriteString+0x14a>
    2d3e:	77 cf       	rjmp	.-274    	; 0x2c2e <LCD_enuWriteString+0x38>
	}
	else
		{
			return ES_NULL_POINTER;
		}
		return Local_enuErrorState;
    2d40:	8b 81       	ldd	r24, Y+3	; 0x03
    2d42:	88 87       	std	Y+8, r24	; 0x08
    2d44:	02 c0       	rjmp	.+4      	; 0x2d4a <LCD_enuWriteString+0x154>
			}
		}
	}
	else
		{
			return ES_NULL_POINTER;
    2d46:	82 e0       	ldi	r24, 0x02	; 2
    2d48:	88 87       	std	Y+8, r24	; 0x08
    2d4a:	88 85       	ldd	r24, Y+8	; 0x08
		}
		return Local_enuErrorState;

}
    2d4c:	28 96       	adiw	r28, 0x08	; 8
    2d4e:	0f b6       	in	r0, 0x3f	; 63
    2d50:	f8 94       	cli
    2d52:	de bf       	out	0x3e, r29	; 62
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	cd bf       	out	0x3d, r28	; 61
    2d58:	cf 91       	pop	r28
    2d5a:	df 91       	pop	r29
    2d5c:	08 95       	ret

00002d5e <LCD_enuDisplayNum>:
ES_t LCD_enuDisplayNum(s32 Copy_s32Num)
{
    2d5e:	0f 93       	push	r16
    2d60:	1f 93       	push	r17
    2d62:	df 93       	push	r29
    2d64:	cf 93       	push	r28
    2d66:	cd b7       	in	r28, 0x3d	; 61
    2d68:	de b7       	in	r29, 0x3e	; 62
    2d6a:	cc 54       	subi	r28, 0x4C	; 76
    2d6c:	d0 40       	sbci	r29, 0x00	; 0
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	f8 94       	cli
    2d72:	de bf       	out	0x3e, r29	; 62
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	cd bf       	out	0x3d, r28	; 61
    2d78:	fe 01       	movw	r30, r28
    2d7a:	e7 5b       	subi	r30, 0xB7	; 183
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	60 83       	st	Z, r22
    2d80:	71 83       	std	Z+1, r23	; 0x01
    2d82:	82 83       	std	Z+2, r24	; 0x02
    2d84:	93 83       	std	Z+3, r25	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2d86:	18 86       	std	Y+8, r1	; 0x08
	u32 Local_As8Container[16];
	s32 Local_s32Reverse=0;
    2d88:	1c 82       	std	Y+4, r1	; 0x04
    2d8a:	1d 82       	std	Y+5, r1	; 0x05
    2d8c:	1e 82       	std	Y+6, r1	; 0x06
    2d8e:	1f 82       	std	Y+7, r1	; 0x07
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    2d90:	1b 82       	std	Y+3, r1	; 0x03
    2d92:	1a 82       	std	Y+2, r1	; 0x02
   u8 x=0;
    2d94:	19 82       	std	Y+1, r1	; 0x01
   if(Copy_s32Num ==0)
    2d96:	fe 01       	movw	r30, r28
    2d98:	e7 5b       	subi	r30, 0xB7	; 183
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	80 81       	ld	r24, Z
    2d9e:	91 81       	ldd	r25, Z+1	; 0x01
    2da0:	a2 81       	ldd	r26, Z+2	; 0x02
    2da2:	b3 81       	ldd	r27, Z+3	; 0x03
    2da4:	00 97       	sbiw	r24, 0x00	; 0
    2da6:	a1 05       	cpc	r26, r1
    2da8:	b1 05       	cpc	r27, r1
    2daa:	19 f4       	brne	.+6      	; 0x2db2 <LCD_enuDisplayNum+0x54>
   	{
   		LCD_enuDisplayChar('0');
    2dac:	80 e3       	ldi	r24, 0x30	; 48
    2dae:	0e 94 97 14 	call	0x292e	; 0x292e <LCD_enuDisplayChar>

   	}
	if(Copy_s32Num <0)
    2db2:	fe 01       	movw	r30, r28
    2db4:	e7 5b       	subi	r30, 0xB7	; 183
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	80 81       	ld	r24, Z
    2dba:	91 81       	ldd	r25, Z+1	; 0x01
    2dbc:	a2 81       	ldd	r26, Z+2	; 0x02
    2dbe:	b3 81       	ldd	r27, Z+3	; 0x03
    2dc0:	bb 23       	and	r27, r27
    2dc2:	0c f0       	brlt	.+2      	; 0x2dc6 <LCD_enuDisplayNum+0x68>
    2dc4:	63 c0       	rjmp	.+198    	; 0x2e8c <LCD_enuDisplayNum+0x12e>
	{
		LCD_enuDisplayChar('-');
    2dc6:	8d e2       	ldi	r24, 0x2D	; 45
    2dc8:	0e 94 97 14 	call	0x292e	; 0x292e <LCD_enuDisplayChar>
		Copy_s32Num *= -1 ;
    2dcc:	9e 01       	movw	r18, r28
    2dce:	27 5b       	subi	r18, 0xB7	; 183
    2dd0:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd2:	fe 01       	movw	r30, r28
    2dd4:	e7 5b       	subi	r30, 0xB7	; 183
    2dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd8:	80 81       	ld	r24, Z
    2dda:	91 81       	ldd	r25, Z+1	; 0x01
    2ddc:	a2 81       	ldd	r26, Z+2	; 0x02
    2dde:	b3 81       	ldd	r27, Z+3	; 0x03
    2de0:	b0 95       	com	r27
    2de2:	a0 95       	com	r26
    2de4:	90 95       	com	r25
    2de6:	81 95       	neg	r24
    2de8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dea:	af 4f       	sbci	r26, 0xFF	; 255
    2dec:	bf 4f       	sbci	r27, 0xFF	; 255
    2dee:	f9 01       	movw	r30, r18
    2df0:	80 83       	st	Z, r24
    2df2:	91 83       	std	Z+1, r25	; 0x01
    2df4:	a2 83       	std	Z+2, r26	; 0x02
    2df6:	b3 83       	std	Z+3, r27	; 0x03
    2df8:	49 c0       	rjmp	.+146    	; 0x2e8c <LCD_enuDisplayNum+0x12e>
	}

	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	e7 5b       	subi	r30, 0xB7	; 183
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	80 81       	ld	r24, Z
    2e02:	91 81       	ldd	r25, Z+1	; 0x01
    2e04:	a2 81       	ldd	r26, Z+2	; 0x02
    2e06:	b3 81       	ldd	r27, Z+3	; 0x03
    2e08:	2a e0       	ldi	r18, 0x0A	; 10
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	40 e0       	ldi	r20, 0x00	; 0
    2e0e:	50 e0       	ldi	r21, 0x00	; 0
    2e10:	bc 01       	movw	r22, r24
    2e12:	cd 01       	movw	r24, r26
    2e14:	0e 94 42 18 	call	0x3084	; 0x3084 <__divmodsi4>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	8b 83       	std	Y+3, r24	; 0x03
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    2e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e20:	9d 81       	ldd	r25, Y+5	; 0x05
    2e22:	ae 81       	ldd	r26, Y+6	; 0x06
    2e24:	bf 81       	ldd	r27, Y+7	; 0x07
    2e26:	2a e0       	ldi	r18, 0x0A	; 10
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	40 e0       	ldi	r20, 0x00	; 0
    2e2c:	50 e0       	ldi	r21, 0x00	; 0
    2e2e:	bc 01       	movw	r22, r24
    2e30:	cd 01       	movw	r24, r26
    2e32:	0e 94 23 18 	call	0x3046	; 0x3046 <__mulsi3>
    2e36:	9b 01       	movw	r18, r22
    2e38:	ac 01       	movw	r20, r24
    2e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3c:	88 2f       	mov	r24, r24
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	a0 e0       	ldi	r26, 0x00	; 0
    2e42:	b0 e0       	ldi	r27, 0x00	; 0
    2e44:	82 0f       	add	r24, r18
    2e46:	93 1f       	adc	r25, r19
    2e48:	a4 1f       	adc	r26, r20
    2e4a:	b5 1f       	adc	r27, r21
    2e4c:	8c 83       	std	Y+4, r24	; 0x04
    2e4e:	9d 83       	std	Y+5, r25	; 0x05
    2e50:	ae 83       	std	Y+6, r26	; 0x06
    2e52:	bf 83       	std	Y+7, r27	; 0x07
		Copy_s32Num /=10;
    2e54:	8e 01       	movw	r16, r28
    2e56:	07 5b       	subi	r16, 0xB7	; 183
    2e58:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	e7 5b       	subi	r30, 0xB7	; 183
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	80 81       	ld	r24, Z
    2e62:	91 81       	ldd	r25, Z+1	; 0x01
    2e64:	a2 81       	ldd	r26, Z+2	; 0x02
    2e66:	b3 81       	ldd	r27, Z+3	; 0x03
    2e68:	2a e0       	ldi	r18, 0x0A	; 10
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	40 e0       	ldi	r20, 0x00	; 0
    2e6e:	50 e0       	ldi	r21, 0x00	; 0
    2e70:	bc 01       	movw	r22, r24
    2e72:	cd 01       	movw	r24, r26
    2e74:	0e 94 42 18 	call	0x3084	; 0x3084 <__divmodsi4>
    2e78:	da 01       	movw	r26, r20
    2e7a:	c9 01       	movw	r24, r18
    2e7c:	f8 01       	movw	r30, r16
    2e7e:	80 83       	st	Z, r24
    2e80:	91 83       	std	Z+1, r25	; 0x01
    2e82:	a2 83       	std	Z+2, r26	; 0x02
    2e84:	b3 83       	std	Z+3, r27	; 0x03
		Local_u8NumDigit ++;
    2e86:	8a 81       	ldd	r24, Y+2	; 0x02
    2e88:	8f 5f       	subi	r24, 0xFF	; 255
    2e8a:	8a 83       	std	Y+2, r24	; 0x02
	{
		LCD_enuDisplayChar('-');
		Copy_s32Num *= -1 ;
	}

	while (Copy_s32Num)
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	e7 5b       	subi	r30, 0xB7	; 183
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	80 81       	ld	r24, Z
    2e94:	91 81       	ldd	r25, Z+1	; 0x01
    2e96:	a2 81       	ldd	r26, Z+2	; 0x02
    2e98:	b3 81       	ldd	r27, Z+3	; 0x03
    2e9a:	00 97       	sbiw	r24, 0x00	; 0
    2e9c:	a1 05       	cpc	r26, r1
    2e9e:	b1 05       	cpc	r27, r1
    2ea0:	09 f0       	breq	.+2      	; 0x2ea4 <LCD_enuDisplayNum+0x146>
    2ea2:	ab cf       	rjmp	.-170    	; 0x2dfa <LCD_enuDisplayNum+0x9c>
    2ea4:	2a c0       	rjmp	.+84     	; 0x2efa <LCD_enuDisplayNum+0x19c>
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
    2ea6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea8:	9d 81       	ldd	r25, Y+5	; 0x05
    2eaa:	ae 81       	ldd	r26, Y+6	; 0x06
    2eac:	bf 81       	ldd	r27, Y+7	; 0x07
    2eae:	2a e0       	ldi	r18, 0x0A	; 10
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	40 e0       	ldi	r20, 0x00	; 0
    2eb4:	50 e0       	ldi	r21, 0x00	; 0
    2eb6:	bc 01       	movw	r22, r24
    2eb8:	cd 01       	movw	r24, r26
    2eba:	0e 94 42 18 	call	0x3084	; 0x3084 <__divmodsi4>
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	8b 83       	std	Y+3, r24	; 0x03

		x=Local_u8Remainder + '0';
    2ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec6:	80 5d       	subi	r24, 0xD0	; 208
    2ec8:	89 83       	std	Y+1, r24	; 0x01
		LCD_enuDisplayChar(x);
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	0e 94 97 14 	call	0x292e	; 0x292e <LCD_enuDisplayChar>
		Local_s32Reverse /= 10;
    2ed0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ed4:	ae 81       	ldd	r26, Y+6	; 0x06
    2ed6:	bf 81       	ldd	r27, Y+7	; 0x07
    2ed8:	2a e0       	ldi	r18, 0x0A	; 10
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	40 e0       	ldi	r20, 0x00	; 0
    2ede:	50 e0       	ldi	r21, 0x00	; 0
    2ee0:	bc 01       	movw	r22, r24
    2ee2:	cd 01       	movw	r24, r26
    2ee4:	0e 94 42 18 	call	0x3084	; 0x3084 <__divmodsi4>
    2ee8:	da 01       	movw	r26, r20
    2eea:	c9 01       	movw	r24, r18
    2eec:	8c 83       	std	Y+4, r24	; 0x04
    2eee:	9d 83       	std	Y+5, r25	; 0x05
    2ef0:	ae 83       	std	Y+6, r26	; 0x06
    2ef2:	bf 83       	std	Y+7, r27	; 0x07
		Local_u8NumDigit --;
    2ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef6:	81 50       	subi	r24, 0x01	; 1
    2ef8:	8a 83       	std	Y+2, r24	; 0x02
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    2efa:	8a 81       	ldd	r24, Y+2	; 0x02
    2efc:	88 23       	and	r24, r24
    2efe:	99 f6       	brne	.-90     	; 0x2ea6 <LCD_enuDisplayNum+0x148>
		LCD_enuDisplayChar(x);
		Local_s32Reverse /= 10;
		Local_u8NumDigit --;
	}

	return Local_enuErrorState;
    2f00:	88 85       	ldd	r24, Y+8	; 0x08
}
    2f02:	c4 5b       	subi	r28, 0xB4	; 180
    2f04:	df 4f       	sbci	r29, 0xFF	; 255
    2f06:	0f b6       	in	r0, 0x3f	; 63
    2f08:	f8 94       	cli
    2f0a:	de bf       	out	0x3e, r29	; 62
    2f0c:	0f be       	out	0x3f, r0	; 63
    2f0e:	cd bf       	out	0x3d, r28	; 61
    2f10:	cf 91       	pop	r28
    2f12:	df 91       	pop	r29
    2f14:	1f 91       	pop	r17
    2f16:	0f 91       	pop	r16
    2f18:	08 95       	ret

00002f1a <main>:
#include <util/delay.h>

extern  Themistor_t LM35_AstrEXTIConfig [LM35NUM];

int main(void)
{
    2f1a:	df 93       	push	r29
    2f1c:	cf 93       	push	r28
    2f1e:	cd b7       	in	r28, 0x3d	; 61
    2f20:	de b7       	in	r29, 0x3e	; 62
    2f22:	62 97       	sbiw	r28, 0x12	; 18
    2f24:	0f b6       	in	r0, 0x3f	; 63
    2f26:	f8 94       	cli
    2f28:	de bf       	out	0x3e, r29	; 62
    2f2a:	0f be       	out	0x3f, r0	; 63
    2f2c:	cd bf       	out	0x3d, r28	; 61
	LCD_enuInit();
    2f2e:	0e 94 77 12 	call	0x24ee	; 0x24ee <LCD_enuInit>

	u32 x = 0;
    2f32:	1f 86       	std	Y+15, r1	; 0x0f
    2f34:	18 8a       	std	Y+16, r1	; 0x10
    2f36:	19 8a       	std	Y+17, r1	; 0x11
    2f38:	1a 8a       	std	Y+18, r1	; 0x12
	Thermistor_enuInit(LM35_AstrEXTIConfig );
    2f3a:	8e e6       	ldi	r24, 0x6E	; 110
    2f3c:	91 e0       	ldi	r25, 0x01	; 1
    2f3e:	0e 94 92 11 	call	0x2324	; 0x2324 <Thermistor_enuInit>

    /* Replace with your application code */
    while (1)
    {
    	Themistor_enuGetTemp(0,&x);
    2f42:	9e 01       	movw	r18, r28
    2f44:	21 5f       	subi	r18, 0xF1	; 241
    2f46:	3f 4f       	sbci	r19, 0xFF	; 255
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	b9 01       	movw	r22, r18
    2f4c:	0e 94 2a 12 	call	0x2454	; 0x2454 <Themistor_enuGetTemp>
		LCD_enuDisplayNum(x);
    2f50:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f52:	98 89       	ldd	r25, Y+16	; 0x10
    2f54:	a9 89       	ldd	r26, Y+17	; 0x11
    2f56:	ba 89       	ldd	r27, Y+18	; 0x12
    2f58:	bc 01       	movw	r22, r24
    2f5a:	cd 01       	movw	r24, r26
    2f5c:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <LCD_enuDisplayNum>
    2f60:	80 e0       	ldi	r24, 0x00	; 0
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	aa e7       	ldi	r26, 0x7A	; 122
    2f66:	b4 e4       	ldi	r27, 0x44	; 68
    2f68:	8b 87       	std	Y+11, r24	; 0x0b
    2f6a:	9c 87       	std	Y+12, r25	; 0x0c
    2f6c:	ad 87       	std	Y+13, r26	; 0x0d
    2f6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	4a e7       	ldi	r20, 0x7A	; 122
    2f7e:	53 e4       	ldi	r21, 0x43	; 67
    2f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	8f 83       	std	Y+7, r24	; 0x07
    2f8a:	98 87       	std	Y+8, r25	; 0x08
    2f8c:	a9 87       	std	Y+9, r26	; 0x09
    2f8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f90:	6f 81       	ldd	r22, Y+7	; 0x07
    2f92:	78 85       	ldd	r23, Y+8	; 0x08
    2f94:	89 85       	ldd	r24, Y+9	; 0x09
    2f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	40 e8       	ldi	r20, 0x80	; 128
    2f9e:	5f e3       	ldi	r21, 0x3F	; 63
    2fa0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fa4:	88 23       	and	r24, r24
    2fa6:	2c f4       	brge	.+10     	; 0x2fb2 <main+0x98>
		__ticks = 1;
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	9e 83       	std	Y+6, r25	; 0x06
    2fae:	8d 83       	std	Y+5, r24	; 0x05
    2fb0:	3f c0       	rjmp	.+126    	; 0x3030 <main+0x116>
	else if (__tmp > 65535)
    2fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb4:	78 85       	ldd	r23, Y+8	; 0x08
    2fb6:	89 85       	ldd	r24, Y+9	; 0x09
    2fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	3f ef       	ldi	r19, 0xFF	; 255
    2fbe:	4f e7       	ldi	r20, 0x7F	; 127
    2fc0:	57 e4       	ldi	r21, 0x47	; 71
    2fc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fc6:	18 16       	cp	r1, r24
    2fc8:	4c f5       	brge	.+82     	; 0x301c <main+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e2       	ldi	r20, 0x20	; 32
    2fd8:	51 e4       	ldi	r21, 0x41	; 65
    2fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	bc 01       	movw	r22, r24
    2fe4:	cd 01       	movw	r24, r26
    2fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	9e 83       	std	Y+6, r25	; 0x06
    2ff0:	8d 83       	std	Y+5, r24	; 0x05
    2ff2:	0f c0       	rjmp	.+30     	; 0x3012 <main+0xf8>
    2ff4:	89 e1       	ldi	r24, 0x19	; 25
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	9c 83       	std	Y+4, r25	; 0x04
    2ffa:	8b 83       	std	Y+3, r24	; 0x03
    2ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <main+0xe6>
    3004:	9c 83       	std	Y+4, r25	; 0x04
    3006:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3008:	8d 81       	ldd	r24, Y+5	; 0x05
    300a:	9e 81       	ldd	r25, Y+6	; 0x06
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	9e 83       	std	Y+6, r25	; 0x06
    3010:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3012:	8d 81       	ldd	r24, Y+5	; 0x05
    3014:	9e 81       	ldd	r25, Y+6	; 0x06
    3016:	00 97       	sbiw	r24, 0x00	; 0
    3018:	69 f7       	brne	.-38     	; 0x2ff4 <main+0xda>
    301a:	93 cf       	rjmp	.-218    	; 0x2f42 <main+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301c:	6f 81       	ldd	r22, Y+7	; 0x07
    301e:	78 85       	ldd	r23, Y+8	; 0x08
    3020:	89 85       	ldd	r24, Y+9	; 0x09
    3022:	9a 85       	ldd	r25, Y+10	; 0x0a
    3024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	9e 83       	std	Y+6, r25	; 0x06
    302e:	8d 83       	std	Y+5, r24	; 0x05
    3030:	8d 81       	ldd	r24, Y+5	; 0x05
    3032:	9e 81       	ldd	r25, Y+6	; 0x06
    3034:	9a 83       	std	Y+2, r25	; 0x02
    3036:	89 83       	std	Y+1, r24	; 0x01
    3038:	89 81       	ldd	r24, Y+1	; 0x01
    303a:	9a 81       	ldd	r25, Y+2	; 0x02
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	f1 f7       	brne	.-4      	; 0x303c <main+0x122>
    3040:	9a 83       	std	Y+2, r25	; 0x02
    3042:	89 83       	std	Y+1, r24	; 0x01
    3044:	7e cf       	rjmp	.-260    	; 0x2f42 <main+0x28>

00003046 <__mulsi3>:
    3046:	62 9f       	mul	r22, r18
    3048:	d0 01       	movw	r26, r0
    304a:	73 9f       	mul	r23, r19
    304c:	f0 01       	movw	r30, r0
    304e:	82 9f       	mul	r24, r18
    3050:	e0 0d       	add	r30, r0
    3052:	f1 1d       	adc	r31, r1
    3054:	64 9f       	mul	r22, r20
    3056:	e0 0d       	add	r30, r0
    3058:	f1 1d       	adc	r31, r1
    305a:	92 9f       	mul	r25, r18
    305c:	f0 0d       	add	r31, r0
    305e:	83 9f       	mul	r24, r19
    3060:	f0 0d       	add	r31, r0
    3062:	74 9f       	mul	r23, r20
    3064:	f0 0d       	add	r31, r0
    3066:	65 9f       	mul	r22, r21
    3068:	f0 0d       	add	r31, r0
    306a:	99 27       	eor	r25, r25
    306c:	72 9f       	mul	r23, r18
    306e:	b0 0d       	add	r27, r0
    3070:	e1 1d       	adc	r30, r1
    3072:	f9 1f       	adc	r31, r25
    3074:	63 9f       	mul	r22, r19
    3076:	b0 0d       	add	r27, r0
    3078:	e1 1d       	adc	r30, r1
    307a:	f9 1f       	adc	r31, r25
    307c:	bd 01       	movw	r22, r26
    307e:	cf 01       	movw	r24, r30
    3080:	11 24       	eor	r1, r1
    3082:	08 95       	ret

00003084 <__divmodsi4>:
    3084:	97 fb       	bst	r25, 7
    3086:	09 2e       	mov	r0, r25
    3088:	05 26       	eor	r0, r21
    308a:	0e d0       	rcall	.+28     	; 0x30a8 <__divmodsi4_neg1>
    308c:	57 fd       	sbrc	r21, 7
    308e:	04 d0       	rcall	.+8      	; 0x3098 <__divmodsi4_neg2>
    3090:	14 d0       	rcall	.+40     	; 0x30ba <__udivmodsi4>
    3092:	0a d0       	rcall	.+20     	; 0x30a8 <__divmodsi4_neg1>
    3094:	00 1c       	adc	r0, r0
    3096:	38 f4       	brcc	.+14     	; 0x30a6 <__divmodsi4_exit>

00003098 <__divmodsi4_neg2>:
    3098:	50 95       	com	r21
    309a:	40 95       	com	r20
    309c:	30 95       	com	r19
    309e:	21 95       	neg	r18
    30a0:	3f 4f       	sbci	r19, 0xFF	; 255
    30a2:	4f 4f       	sbci	r20, 0xFF	; 255
    30a4:	5f 4f       	sbci	r21, 0xFF	; 255

000030a6 <__divmodsi4_exit>:
    30a6:	08 95       	ret

000030a8 <__divmodsi4_neg1>:
    30a8:	f6 f7       	brtc	.-4      	; 0x30a6 <__divmodsi4_exit>
    30aa:	90 95       	com	r25
    30ac:	80 95       	com	r24
    30ae:	70 95       	com	r23
    30b0:	61 95       	neg	r22
    30b2:	7f 4f       	sbci	r23, 0xFF	; 255
    30b4:	8f 4f       	sbci	r24, 0xFF	; 255
    30b6:	9f 4f       	sbci	r25, 0xFF	; 255
    30b8:	08 95       	ret

000030ba <__udivmodsi4>:
    30ba:	a1 e2       	ldi	r26, 0x21	; 33
    30bc:	1a 2e       	mov	r1, r26
    30be:	aa 1b       	sub	r26, r26
    30c0:	bb 1b       	sub	r27, r27
    30c2:	fd 01       	movw	r30, r26
    30c4:	0d c0       	rjmp	.+26     	; 0x30e0 <__udivmodsi4_ep>

000030c6 <__udivmodsi4_loop>:
    30c6:	aa 1f       	adc	r26, r26
    30c8:	bb 1f       	adc	r27, r27
    30ca:	ee 1f       	adc	r30, r30
    30cc:	ff 1f       	adc	r31, r31
    30ce:	a2 17       	cp	r26, r18
    30d0:	b3 07       	cpc	r27, r19
    30d2:	e4 07       	cpc	r30, r20
    30d4:	f5 07       	cpc	r31, r21
    30d6:	20 f0       	brcs	.+8      	; 0x30e0 <__udivmodsi4_ep>
    30d8:	a2 1b       	sub	r26, r18
    30da:	b3 0b       	sbc	r27, r19
    30dc:	e4 0b       	sbc	r30, r20
    30de:	f5 0b       	sbc	r31, r21

000030e0 <__udivmodsi4_ep>:
    30e0:	66 1f       	adc	r22, r22
    30e2:	77 1f       	adc	r23, r23
    30e4:	88 1f       	adc	r24, r24
    30e6:	99 1f       	adc	r25, r25
    30e8:	1a 94       	dec	r1
    30ea:	69 f7       	brne	.-38     	; 0x30c6 <__udivmodsi4_loop>
    30ec:	60 95       	com	r22
    30ee:	70 95       	com	r23
    30f0:	80 95       	com	r24
    30f2:	90 95       	com	r25
    30f4:	9b 01       	movw	r18, r22
    30f6:	ac 01       	movw	r20, r24
    30f8:	bd 01       	movw	r22, r26
    30fa:	cf 01       	movw	r24, r30
    30fc:	08 95       	ret

000030fe <__prologue_saves__>:
    30fe:	2f 92       	push	r2
    3100:	3f 92       	push	r3
    3102:	4f 92       	push	r4
    3104:	5f 92       	push	r5
    3106:	6f 92       	push	r6
    3108:	7f 92       	push	r7
    310a:	8f 92       	push	r8
    310c:	9f 92       	push	r9
    310e:	af 92       	push	r10
    3110:	bf 92       	push	r11
    3112:	cf 92       	push	r12
    3114:	df 92       	push	r13
    3116:	ef 92       	push	r14
    3118:	ff 92       	push	r15
    311a:	0f 93       	push	r16
    311c:	1f 93       	push	r17
    311e:	cf 93       	push	r28
    3120:	df 93       	push	r29
    3122:	cd b7       	in	r28, 0x3d	; 61
    3124:	de b7       	in	r29, 0x3e	; 62
    3126:	ca 1b       	sub	r28, r26
    3128:	db 0b       	sbc	r29, r27
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	f8 94       	cli
    312e:	de bf       	out	0x3e, r29	; 62
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	cd bf       	out	0x3d, r28	; 61
    3134:	09 94       	ijmp

00003136 <__epilogue_restores__>:
    3136:	2a 88       	ldd	r2, Y+18	; 0x12
    3138:	39 88       	ldd	r3, Y+17	; 0x11
    313a:	48 88       	ldd	r4, Y+16	; 0x10
    313c:	5f 84       	ldd	r5, Y+15	; 0x0f
    313e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3140:	7d 84       	ldd	r7, Y+13	; 0x0d
    3142:	8c 84       	ldd	r8, Y+12	; 0x0c
    3144:	9b 84       	ldd	r9, Y+11	; 0x0b
    3146:	aa 84       	ldd	r10, Y+10	; 0x0a
    3148:	b9 84       	ldd	r11, Y+9	; 0x09
    314a:	c8 84       	ldd	r12, Y+8	; 0x08
    314c:	df 80       	ldd	r13, Y+7	; 0x07
    314e:	ee 80       	ldd	r14, Y+6	; 0x06
    3150:	fd 80       	ldd	r15, Y+5	; 0x05
    3152:	0c 81       	ldd	r16, Y+4	; 0x04
    3154:	1b 81       	ldd	r17, Y+3	; 0x03
    3156:	aa 81       	ldd	r26, Y+2	; 0x02
    3158:	b9 81       	ldd	r27, Y+1	; 0x01
    315a:	ce 0f       	add	r28, r30
    315c:	d1 1d       	adc	r29, r1
    315e:	0f b6       	in	r0, 0x3f	; 63
    3160:	f8 94       	cli
    3162:	de bf       	out	0x3e, r29	; 62
    3164:	0f be       	out	0x3f, r0	; 63
    3166:	cd bf       	out	0x3d, r28	; 61
    3168:	ed 01       	movw	r28, r26
    316a:	08 95       	ret

0000316c <_exit>:
    316c:	f8 94       	cli

0000316e <__stop_program>:
    316e:	ff cf       	rjmp	.-2      	; 0x316e <__stop_program>
