
SWITCH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000aea  00000b5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000ed0  00000000  00000000  00000b68  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000638  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 51 05 	call	0xaa2	; 0xaa2 <main>
  7a:	0c 94 73 05 	jmp	0xae6	; 0xae6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuInit>:
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	19 82       	std	Y+1, r1	; 0x01
  8e:	ea e3       	ldi	r30, 0x3A	; 58
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	80 83       	st	Z, r24
  96:	e7 e3       	ldi	r30, 0x37	; 55
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	80 83       	st	Z, r24
  9e:	e4 e3       	ldi	r30, 0x34	; 52
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	8d ec       	ldi	r24, 0xCD	; 205
  a4:	80 83       	st	Z, r24
  a6:	e1 e3       	ldi	r30, 0x31	; 49
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	8d ec       	ldi	r24, 0xCD	; 205
  ac:	80 83       	st	Z, r24
  ae:	eb e3       	ldi	r30, 0x3B	; 59
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 83       	st	Z, r24
  b6:	e8 e3       	ldi	r30, 0x38	; 56
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	89 e8       	ldi	r24, 0x89	; 137
  bc:	80 83       	st	Z, r24
  be:	e5 e3       	ldi	r30, 0x35	; 53
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	89 e2       	ldi	r24, 0x29	; 41
  c4:	80 83       	st	Z, r24
  c6:	e2 e3       	ldi	r30, 0x32	; 50
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	89 e2       	ldi	r24, 0x29	; 41
  cc:	80 83       	st	Z, r24
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	89 83       	std	Y+1, r24	; 0x01
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	0f 90       	pop	r0
  d6:	cf 91       	pop	r28
  d8:	df 91       	pop	r29
  da:	08 95       	ret

000000dc <DIO_enuSetPortDirection>:

	return Local_enuErrorState;
}


ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value){
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	00 d0       	rcall	.+0      	; 0xe2 <DIO_enuSetPortDirection+0x6>
  e2:	00 d0       	rcall	.+0      	; 0xe4 <DIO_enuSetPortDirection+0x8>
  e4:	0f 92       	push	r0
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	8a 83       	std	Y+2, r24	; 0x02
  ec:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
  ee:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
  f0:	8a 81       	ldd	r24, Y+2	; 0x02
  f2:	84 30       	cpi	r24, 0x04	; 4
  f4:	a8 f5       	brcc	.+106    	; 0x160 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
  f6:	8a 81       	ldd	r24, Y+2	; 0x02
  f8:	28 2f       	mov	r18, r24
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	3d 83       	std	Y+5, r19	; 0x05
  fe:	2c 83       	std	Y+4, r18	; 0x04
 100:	8c 81       	ldd	r24, Y+4	; 0x04
 102:	9d 81       	ldd	r25, Y+5	; 0x05
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	91 05       	cpc	r25, r1
 108:	d1 f0       	breq	.+52     	; 0x13e <DIO_enuSetPortDirection+0x62>
 10a:	2c 81       	ldd	r18, Y+4	; 0x04
 10c:	3d 81       	ldd	r19, Y+5	; 0x05
 10e:	22 30       	cpi	r18, 0x02	; 2
 110:	31 05       	cpc	r19, r1
 112:	2c f4       	brge	.+10     	; 0x11e <DIO_enuSetPortDirection+0x42>
 114:	8c 81       	ldd	r24, Y+4	; 0x04
 116:	9d 81       	ldd	r25, Y+5	; 0x05
 118:	00 97       	sbiw	r24, 0x00	; 0
 11a:	61 f0       	breq	.+24     	; 0x134 <DIO_enuSetPortDirection+0x58>
 11c:	1e c0       	rjmp	.+60     	; 0x15a <DIO_enuSetPortDirection+0x7e>
 11e:	2c 81       	ldd	r18, Y+4	; 0x04
 120:	3d 81       	ldd	r19, Y+5	; 0x05
 122:	22 30       	cpi	r18, 0x02	; 2
 124:	31 05       	cpc	r19, r1
 126:	81 f0       	breq	.+32     	; 0x148 <DIO_enuSetPortDirection+0x6c>
 128:	8c 81       	ldd	r24, Y+4	; 0x04
 12a:	9d 81       	ldd	r25, Y+5	; 0x05
 12c:	83 30       	cpi	r24, 0x03	; 3
 12e:	91 05       	cpc	r25, r1
 130:	81 f0       	breq	.+32     	; 0x152 <DIO_enuSetPortDirection+0x76>
 132:	13 c0       	rjmp	.+38     	; 0x15a <DIO_enuSetPortDirection+0x7e>
		{
			case DIO_PORTA:
			DDRA = Copy_u8Value;
 134:	ea e3       	ldi	r30, 0x3A	; 58
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	8b 81       	ldd	r24, Y+3	; 0x03
 13a:	80 83       	st	Z, r24
 13c:	0e c0       	rjmp	.+28     	; 0x15a <DIO_enuSetPortDirection+0x7e>
			break;

			case DIO_PORTB:
			DDRB = Copy_u8Value;
 13e:	e7 e3       	ldi	r30, 0x37	; 55
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	8b 81       	ldd	r24, Y+3	; 0x03
 144:	80 83       	st	Z, r24
 146:	09 c0       	rjmp	.+18     	; 0x15a <DIO_enuSetPortDirection+0x7e>
			break;

			case DIO_PORTC:
			DDRC = Copy_u8Value;
 148:	e4 e3       	ldi	r30, 0x34	; 52
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	80 83       	st	Z, r24
 150:	04 c0       	rjmp	.+8      	; 0x15a <DIO_enuSetPortDirection+0x7e>
			break;

			case DIO_PORTD:
			DDRD = Copy_u8Value;
 152:	e1 e3       	ldi	r30, 0x31	; 49
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	8b 81       	ldd	r24, Y+3	; 0x03
 158:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	89 83       	std	Y+1, r24	; 0x01
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 160:	83 e0       	ldi	r24, 0x03	; 3
 162:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 164:	89 81       	ldd	r24, Y+1	; 0x01

}
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	0f 90       	pop	r0
 170:	cf 91       	pop	r28
 172:	df 91       	pop	r29
 174:	08 95       	ret

00000176 <DIO_enuSetPortVal>:
ES_t DIO_enuSetPortVal(u8 Copy_u8PortID, u8 Copy_u8Value){
 176:	df 93       	push	r29
 178:	cf 93       	push	r28
 17a:	00 d0       	rcall	.+0      	; 0x17c <DIO_enuSetPortVal+0x6>
 17c:	00 d0       	rcall	.+0      	; 0x17e <DIO_enuSetPortVal+0x8>
 17e:	0f 92       	push	r0
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
 184:	8a 83       	std	Y+2, r24	; 0x02
 186:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 188:	19 82       	std	Y+1, r1	; 0x01

		if(Copy_u8PortID <= DIO_PORTD)
 18a:	8a 81       	ldd	r24, Y+2	; 0x02
 18c:	84 30       	cpi	r24, 0x04	; 4
 18e:	a8 f5       	brcc	.+106    	; 0x1fa <DIO_enuSetPortVal+0x84>
		{
			switch(Copy_u8PortID)
 190:	8a 81       	ldd	r24, Y+2	; 0x02
 192:	28 2f       	mov	r18, r24
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	3d 83       	std	Y+5, r19	; 0x05
 198:	2c 83       	std	Y+4, r18	; 0x04
 19a:	8c 81       	ldd	r24, Y+4	; 0x04
 19c:	9d 81       	ldd	r25, Y+5	; 0x05
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	91 05       	cpc	r25, r1
 1a2:	d1 f0       	breq	.+52     	; 0x1d8 <DIO_enuSetPortVal+0x62>
 1a4:	2c 81       	ldd	r18, Y+4	; 0x04
 1a6:	3d 81       	ldd	r19, Y+5	; 0x05
 1a8:	22 30       	cpi	r18, 0x02	; 2
 1aa:	31 05       	cpc	r19, r1
 1ac:	2c f4       	brge	.+10     	; 0x1b8 <DIO_enuSetPortVal+0x42>
 1ae:	8c 81       	ldd	r24, Y+4	; 0x04
 1b0:	9d 81       	ldd	r25, Y+5	; 0x05
 1b2:	00 97       	sbiw	r24, 0x00	; 0
 1b4:	61 f0       	breq	.+24     	; 0x1ce <DIO_enuSetPortVal+0x58>
 1b6:	1e c0       	rjmp	.+60     	; 0x1f4 <DIO_enuSetPortVal+0x7e>
 1b8:	2c 81       	ldd	r18, Y+4	; 0x04
 1ba:	3d 81       	ldd	r19, Y+5	; 0x05
 1bc:	22 30       	cpi	r18, 0x02	; 2
 1be:	31 05       	cpc	r19, r1
 1c0:	81 f0       	breq	.+32     	; 0x1e2 <DIO_enuSetPortVal+0x6c>
 1c2:	8c 81       	ldd	r24, Y+4	; 0x04
 1c4:	9d 81       	ldd	r25, Y+5	; 0x05
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	91 05       	cpc	r25, r1
 1ca:	81 f0       	breq	.+32     	; 0x1ec <DIO_enuSetPortVal+0x76>
 1cc:	13 c0       	rjmp	.+38     	; 0x1f4 <DIO_enuSetPortVal+0x7e>
			{
				case DIO_PORTA:
				PORTA = Copy_u8Value;
 1ce:	eb e3       	ldi	r30, 0x3B	; 59
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	8b 81       	ldd	r24, Y+3	; 0x03
 1d4:	80 83       	st	Z, r24
 1d6:	0e c0       	rjmp	.+28     	; 0x1f4 <DIO_enuSetPortVal+0x7e>
				break;

				case DIO_PORTB:
				PORTB = Copy_u8Value;
 1d8:	e8 e3       	ldi	r30, 0x38	; 56
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	8b 81       	ldd	r24, Y+3	; 0x03
 1de:	80 83       	st	Z, r24
 1e0:	09 c0       	rjmp	.+18     	; 0x1f4 <DIO_enuSetPortVal+0x7e>
				break;

				case DIO_PORTC:
				PORTC = Copy_u8Value;
 1e2:	e5 e3       	ldi	r30, 0x35	; 53
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	8b 81       	ldd	r24, Y+3	; 0x03
 1e8:	80 83       	st	Z, r24
 1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <DIO_enuSetPortVal+0x7e>
				break;

				case DIO_PORTD:
				PORTD = Copy_u8Value;
 1ec:	e2 e3       	ldi	r30, 0x32	; 50
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	8b 81       	ldd	r24, Y+3	; 0x03
 1f2:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	89 83       	std	Y+1, r24	; 0x01
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_enuSetPortVal+0x88>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorState;
 1fe:	89 81       	ldd	r24, Y+1	; 0x01

}
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	cf 91       	pop	r28
 20c:	df 91       	pop	r29
 20e:	08 95       	ret

00000210 <DIO_enuGetPortVal>:
ES_t DIO_enuGetPortVal(u8 Copy_u8PortID, u8 *Copy_pu8Value){
 210:	df 93       	push	r29
 212:	cf 93       	push	r28
 214:	00 d0       	rcall	.+0      	; 0x216 <DIO_enuGetPortVal+0x6>
 216:	00 d0       	rcall	.+0      	; 0x218 <DIO_enuGetPortVal+0x8>
 218:	00 d0       	rcall	.+0      	; 0x21a <DIO_enuGetPortVal+0xa>
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
 21e:	8a 83       	std	Y+2, r24	; 0x02
 220:	7c 83       	std	Y+4, r23	; 0x04
 222:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 224:	19 82       	std	Y+1, r1	; 0x01
 if(Copy_pu8Value!=NULL){
 226:	8b 81       	ldd	r24, Y+3	; 0x03
 228:	9c 81       	ldd	r25, Y+4	; 0x04
 22a:	00 97       	sbiw	r24, 0x00	; 0
 22c:	09 f4       	brne	.+2      	; 0x230 <DIO_enuGetPortVal+0x20>
 22e:	43 c0       	rjmp	.+134    	; 0x2b6 <DIO_enuGetPortVal+0xa6>
		if(Copy_u8PortID <= DIO_PORTD)
 230:	8a 81       	ldd	r24, Y+2	; 0x02
 232:	84 30       	cpi	r24, 0x04	; 4
 234:	e8 f5       	brcc	.+122    	; 0x2b0 <DIO_enuGetPortVal+0xa0>
		{
			switch(Copy_u8PortID)
 236:	8a 81       	ldd	r24, Y+2	; 0x02
 238:	28 2f       	mov	r18, r24
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	3e 83       	std	Y+6, r19	; 0x06
 23e:	2d 83       	std	Y+5, r18	; 0x05
 240:	8d 81       	ldd	r24, Y+5	; 0x05
 242:	9e 81       	ldd	r25, Y+6	; 0x06
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	91 05       	cpc	r25, r1
 248:	e1 f0       	breq	.+56     	; 0x282 <DIO_enuGetPortVal+0x72>
 24a:	2d 81       	ldd	r18, Y+5	; 0x05
 24c:	3e 81       	ldd	r19, Y+6	; 0x06
 24e:	22 30       	cpi	r18, 0x02	; 2
 250:	31 05       	cpc	r19, r1
 252:	2c f4       	brge	.+10     	; 0x25e <DIO_enuGetPortVal+0x4e>
 254:	8d 81       	ldd	r24, Y+5	; 0x05
 256:	9e 81       	ldd	r25, Y+6	; 0x06
 258:	00 97       	sbiw	r24, 0x00	; 0
 25a:	61 f0       	breq	.+24     	; 0x274 <DIO_enuGetPortVal+0x64>
 25c:	26 c0       	rjmp	.+76     	; 0x2aa <DIO_enuGetPortVal+0x9a>
 25e:	2d 81       	ldd	r18, Y+5	; 0x05
 260:	3e 81       	ldd	r19, Y+6	; 0x06
 262:	22 30       	cpi	r18, 0x02	; 2
 264:	31 05       	cpc	r19, r1
 266:	a1 f0       	breq	.+40     	; 0x290 <DIO_enuGetPortVal+0x80>
 268:	8d 81       	ldd	r24, Y+5	; 0x05
 26a:	9e 81       	ldd	r25, Y+6	; 0x06
 26c:	83 30       	cpi	r24, 0x03	; 3
 26e:	91 05       	cpc	r25, r1
 270:	b1 f0       	breq	.+44     	; 0x29e <DIO_enuGetPortVal+0x8e>
 272:	1b c0       	rjmp	.+54     	; 0x2aa <DIO_enuGetPortVal+0x9a>
			{
				case DIO_PORTA:
				 *Copy_pu8Value=PINA;
 274:	e9 e3       	ldi	r30, 0x39	; 57
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	eb 81       	ldd	r30, Y+3	; 0x03
 27c:	fc 81       	ldd	r31, Y+4	; 0x04
 27e:	80 83       	st	Z, r24
 280:	14 c0       	rjmp	.+40     	; 0x2aa <DIO_enuGetPortVal+0x9a>
				break;

				case DIO_PORTB:
				 *Copy_pu8Value=PINB;
 282:	e6 e3       	ldi	r30, 0x36	; 54
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	eb 81       	ldd	r30, Y+3	; 0x03
 28a:	fc 81       	ldd	r31, Y+4	; 0x04
 28c:	80 83       	st	Z, r24
 28e:	0d c0       	rjmp	.+26     	; 0x2aa <DIO_enuGetPortVal+0x9a>
				break;

				case DIO_PORTC:
				 *Copy_pu8Value=PINC;
 290:	e3 e3       	ldi	r30, 0x33	; 51
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	eb 81       	ldd	r30, Y+3	; 0x03
 298:	fc 81       	ldd	r31, Y+4	; 0x04
 29a:	80 83       	st	Z, r24
 29c:	06 c0       	rjmp	.+12     	; 0x2aa <DIO_enuGetPortVal+0x9a>
				break;

				case DIO_PORTD:
			    *Copy_pu8Value=PIND;
 29e:	e0 e3       	ldi	r30, 0x30	; 48
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	eb 81       	ldd	r30, Y+3	; 0x03
 2a6:	fc 81       	ldd	r31, Y+4	; 0x04
 2a8:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	89 83       	std	Y+1, r24	; 0x01
 2ae:	05 c0       	rjmp	.+10     	; 0x2ba <DIO_enuGetPortVal+0xaa>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	89 83       	std	Y+1, r24	; 0x01
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_enuGetPortVal+0xaa>
		}
 }
 else{
	 Local_enuErrorState = ES_NULL_POINTER;
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	89 83       	std	Y+1, r24	; 0x01
 }
		return Local_enuErrorState;
 2ba:	89 81       	ldd	r24, Y+1	; 0x01


}
 2bc:	26 96       	adiw	r28, 0x06	; 6
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	de bf       	out	0x3e, r29	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	cd bf       	out	0x3d, r28	; 61
 2c8:	cf 91       	pop	r28
 2ca:	df 91       	pop	r29
 2cc:	08 95       	ret

000002ce <DIO_enuTogPortVal>:
ES_t DIO_enuTogPortVal(u8 Copy_u8PortID){
 2ce:	df 93       	push	r29
 2d0:	cf 93       	push	r28
 2d2:	00 d0       	rcall	.+0      	; 0x2d4 <DIO_enuTogPortVal+0x6>
 2d4:	00 d0       	rcall	.+0      	; 0x2d6 <DIO_enuTogPortVal+0x8>
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
 2dc:	19 82       	std	Y+1, r1	; 0x01

			if(Copy_u8PortID <= DIO_PORTD)
 2de:	8a 81       	ldd	r24, Y+2	; 0x02
 2e0:	84 30       	cpi	r24, 0x04	; 4
 2e2:	08 f0       	brcs	.+2      	; 0x2e6 <DIO_enuTogPortVal+0x18>
 2e4:	41 c0       	rjmp	.+130    	; 0x368 <DIO_enuTogPortVal+0x9a>
			{
				switch(Copy_u8PortID)
 2e6:	8a 81       	ldd	r24, Y+2	; 0x02
 2e8:	28 2f       	mov	r18, r24
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	3c 83       	std	Y+4, r19	; 0x04
 2ee:	2b 83       	std	Y+3, r18	; 0x03
 2f0:	8b 81       	ldd	r24, Y+3	; 0x03
 2f2:	9c 81       	ldd	r25, Y+4	; 0x04
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	91 05       	cpc	r25, r1
 2f8:	e9 f0       	breq	.+58     	; 0x334 <DIO_enuTogPortVal+0x66>
 2fa:	2b 81       	ldd	r18, Y+3	; 0x03
 2fc:	3c 81       	ldd	r19, Y+4	; 0x04
 2fe:	22 30       	cpi	r18, 0x02	; 2
 300:	31 05       	cpc	r19, r1
 302:	2c f4       	brge	.+10     	; 0x30e <DIO_enuTogPortVal+0x40>
 304:	8b 81       	ldd	r24, Y+3	; 0x03
 306:	9c 81       	ldd	r25, Y+4	; 0x04
 308:	00 97       	sbiw	r24, 0x00	; 0
 30a:	61 f0       	breq	.+24     	; 0x324 <DIO_enuTogPortVal+0x56>
 30c:	2a c0       	rjmp	.+84     	; 0x362 <DIO_enuTogPortVal+0x94>
 30e:	2b 81       	ldd	r18, Y+3	; 0x03
 310:	3c 81       	ldd	r19, Y+4	; 0x04
 312:	22 30       	cpi	r18, 0x02	; 2
 314:	31 05       	cpc	r19, r1
 316:	b1 f0       	breq	.+44     	; 0x344 <DIO_enuTogPortVal+0x76>
 318:	8b 81       	ldd	r24, Y+3	; 0x03
 31a:	9c 81       	ldd	r25, Y+4	; 0x04
 31c:	83 30       	cpi	r24, 0x03	; 3
 31e:	91 05       	cpc	r25, r1
 320:	c9 f0       	breq	.+50     	; 0x354 <DIO_enuTogPortVal+0x86>
 322:	1f c0       	rjmp	.+62     	; 0x362 <DIO_enuTogPortVal+0x94>
				{
					case DIO_PORTA:
					 PORTA=~PORTA;
 324:	ab e3       	ldi	r26, 0x3B	; 59
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	eb e3       	ldi	r30, 0x3B	; 59
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	80 95       	com	r24
 330:	8c 93       	st	X, r24
 332:	17 c0       	rjmp	.+46     	; 0x362 <DIO_enuTogPortVal+0x94>
					break;

					case DIO_PORTB:
					 PORTB=~PORTB;
 334:	a8 e3       	ldi	r26, 0x38	; 56
 336:	b0 e0       	ldi	r27, 0x00	; 0
 338:	e8 e3       	ldi	r30, 0x38	; 56
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	80 95       	com	r24
 340:	8c 93       	st	X, r24
 342:	0f c0       	rjmp	.+30     	; 0x362 <DIO_enuTogPortVal+0x94>
					break;

					case DIO_PORTC:
					 PORTC=~PORTC;
 344:	a5 e3       	ldi	r26, 0x35	; 53
 346:	b0 e0       	ldi	r27, 0x00	; 0
 348:	e5 e3       	ldi	r30, 0x35	; 53
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	80 95       	com	r24
 350:	8c 93       	st	X, r24
 352:	07 c0       	rjmp	.+14     	; 0x362 <DIO_enuTogPortVal+0x94>
					break;

					case DIO_PORTD:
					 PORTD=~PORTD;
 354:	a2 e3       	ldi	r26, 0x32	; 50
 356:	b0 e0       	ldi	r27, 0x00	; 0
 358:	e2 e3       	ldi	r30, 0x32	; 50
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	80 95       	com	r24
 360:	8c 93       	st	X, r24
					break;
				}
				Local_enuErrorState = ES_OK;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	89 83       	std	Y+1, r24	; 0x01
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_enuTogPortVal+0x9e>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
 368:	83 e0       	ldi	r24, 0x03	; 3
 36a:	89 83       	std	Y+1, r24	; 0x01
			}

			return Local_enuErrorState;
 36c:	89 81       	ldd	r24, Y+1	; 0x01

}
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	cf 91       	pop	r28
 378:	df 91       	pop	r29
 37a:	08 95       	ret

0000037c <DIO_enuSetPinDirection>:


ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID, u8  Copy_u8Value){
 37c:	df 93       	push	r29
 37e:	cf 93       	push	r28
 380:	00 d0       	rcall	.+0      	; 0x382 <DIO_enuSetPinDirection+0x6>
 382:	00 d0       	rcall	.+0      	; 0x384 <DIO_enuSetPinDirection+0x8>
 384:	00 d0       	rcall	.+0      	; 0x386 <DIO_enuSetPinDirection+0xa>
 386:	cd b7       	in	r28, 0x3d	; 61
 388:	de b7       	in	r29, 0x3e	; 62
 38a:	8a 83       	std	Y+2, r24	; 0x02
 38c:	6b 83       	std	Y+3, r22	; 0x03
 38e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
 390:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8PortID <= DIO_PORTD	&& Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT){
 392:	8a 81       	ldd	r24, Y+2	; 0x02
 394:	84 30       	cpi	r24, 0x04	; 4
 396:	08 f0       	brcs	.+2      	; 0x39a <DIO_enuSetPinDirection+0x1e>
 398:	d1 c0       	rjmp	.+418    	; 0x53c <DIO_enuSetPinDirection+0x1c0>
 39a:	8b 81       	ldd	r24, Y+3	; 0x03
 39c:	88 30       	cpi	r24, 0x08	; 8
 39e:	08 f0       	brcs	.+2      	; 0x3a2 <DIO_enuSetPinDirection+0x26>
 3a0:	cd c0       	rjmp	.+410    	; 0x53c <DIO_enuSetPinDirection+0x1c0>
 3a2:	8c 81       	ldd	r24, Y+4	; 0x04
 3a4:	82 30       	cpi	r24, 0x02	; 2
 3a6:	08 f0       	brcs	.+2      	; 0x3aa <DIO_enuSetPinDirection+0x2e>
 3a8:	c9 c0       	rjmp	.+402    	; 0x53c <DIO_enuSetPinDirection+0x1c0>
	switch(Copy_u8PortID)
 3aa:	8a 81       	ldd	r24, Y+2	; 0x02
 3ac:	28 2f       	mov	r18, r24
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	3e 83       	std	Y+6, r19	; 0x06
 3b2:	2d 83       	std	Y+5, r18	; 0x05
 3b4:	6d 81       	ldd	r22, Y+5	; 0x05
 3b6:	7e 81       	ldd	r23, Y+6	; 0x06
 3b8:	61 30       	cpi	r22, 0x01	; 1
 3ba:	71 05       	cpc	r23, r1
 3bc:	09 f4       	brne	.+2      	; 0x3c0 <DIO_enuSetPinDirection+0x44>
 3be:	41 c0       	rjmp	.+130    	; 0x442 <DIO_enuSetPinDirection+0xc6>
 3c0:	8d 81       	ldd	r24, Y+5	; 0x05
 3c2:	9e 81       	ldd	r25, Y+6	; 0x06
 3c4:	82 30       	cpi	r24, 0x02	; 2
 3c6:	91 05       	cpc	r25, r1
 3c8:	34 f4       	brge	.+12     	; 0x3d6 <DIO_enuSetPinDirection+0x5a>
 3ca:	2d 81       	ldd	r18, Y+5	; 0x05
 3cc:	3e 81       	ldd	r19, Y+6	; 0x06
 3ce:	21 15       	cp	r18, r1
 3d0:	31 05       	cpc	r19, r1
 3d2:	71 f0       	breq	.+28     	; 0x3f0 <DIO_enuSetPinDirection+0x74>
 3d4:	b0 c0       	rjmp	.+352    	; 0x536 <DIO_enuSetPinDirection+0x1ba>
 3d6:	6d 81       	ldd	r22, Y+5	; 0x05
 3d8:	7e 81       	ldd	r23, Y+6	; 0x06
 3da:	62 30       	cpi	r22, 0x02	; 2
 3dc:	71 05       	cpc	r23, r1
 3de:	09 f4       	brne	.+2      	; 0x3e2 <DIO_enuSetPinDirection+0x66>
 3e0:	59 c0       	rjmp	.+178    	; 0x494 <DIO_enuSetPinDirection+0x118>
 3e2:	8d 81       	ldd	r24, Y+5	; 0x05
 3e4:	9e 81       	ldd	r25, Y+6	; 0x06
 3e6:	83 30       	cpi	r24, 0x03	; 3
 3e8:	91 05       	cpc	r25, r1
 3ea:	09 f4       	brne	.+2      	; 0x3ee <DIO_enuSetPinDirection+0x72>
 3ec:	7c c0       	rjmp	.+248    	; 0x4e6 <DIO_enuSetPinDirection+0x16a>
 3ee:	a3 c0       	rjmp	.+326    	; 0x536 <DIO_enuSetPinDirection+0x1ba>
				{
					case DIO_PORTA:
						DDRA &=~(1 << Copy_u8PinID);
 3f0:	aa e3       	ldi	r26, 0x3A	; 58
 3f2:	b0 e0       	ldi	r27, 0x00	; 0
 3f4:	ea e3       	ldi	r30, 0x3A	; 58
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	48 2f       	mov	r20, r24
 3fc:	8b 81       	ldd	r24, Y+3	; 0x03
 3fe:	28 2f       	mov	r18, r24
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	02 c0       	rjmp	.+4      	; 0x40c <DIO_enuSetPinDirection+0x90>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	2a 95       	dec	r18
 40e:	e2 f7       	brpl	.-8      	; 0x408 <DIO_enuSetPinDirection+0x8c>
 410:	80 95       	com	r24
 412:	84 23       	and	r24, r20
 414:	8c 93       	st	X, r24
						DDRA |= (Copy_u8Value << Copy_u8PinID);
 416:	aa e3       	ldi	r26, 0x3A	; 58
 418:	b0 e0       	ldi	r27, 0x00	; 0
 41a:	ea e3       	ldi	r30, 0x3A	; 58
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	48 2f       	mov	r20, r24
 422:	8c 81       	ldd	r24, Y+4	; 0x04
 424:	28 2f       	mov	r18, r24
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	8b 81       	ldd	r24, Y+3	; 0x03
 42a:	88 2f       	mov	r24, r24
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	b9 01       	movw	r22, r18
 430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_enuSetPinDirection+0xba>
 432:	66 0f       	add	r22, r22
 434:	77 1f       	adc	r23, r23
 436:	8a 95       	dec	r24
 438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_enuSetPinDirection+0xb6>
 43a:	cb 01       	movw	r24, r22
 43c:	84 2b       	or	r24, r20
 43e:	8c 93       	st	X, r24
 440:	7a c0       	rjmp	.+244    	; 0x536 <DIO_enuSetPinDirection+0x1ba>
					break;

					case DIO_PORTB:
						DDRB &=~(1 << Copy_u8PinID);
 442:	a7 e3       	ldi	r26, 0x37	; 55
 444:	b0 e0       	ldi	r27, 0x00	; 0
 446:	e7 e3       	ldi	r30, 0x37	; 55
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	48 2f       	mov	r20, r24
 44e:	8b 81       	ldd	r24, Y+3	; 0x03
 450:	28 2f       	mov	r18, r24
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	02 c0       	rjmp	.+4      	; 0x45e <DIO_enuSetPinDirection+0xe2>
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	2a 95       	dec	r18
 460:	e2 f7       	brpl	.-8      	; 0x45a <DIO_enuSetPinDirection+0xde>
 462:	80 95       	com	r24
 464:	84 23       	and	r24, r20
 466:	8c 93       	st	X, r24
					    DDRB |= (Copy_u8Value << Copy_u8PinID);
 468:	a7 e3       	ldi	r26, 0x37	; 55
 46a:	b0 e0       	ldi	r27, 0x00	; 0
 46c:	e7 e3       	ldi	r30, 0x37	; 55
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	48 2f       	mov	r20, r24
 474:	8c 81       	ldd	r24, Y+4	; 0x04
 476:	28 2f       	mov	r18, r24
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	8b 81       	ldd	r24, Y+3	; 0x03
 47c:	88 2f       	mov	r24, r24
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	b9 01       	movw	r22, r18
 482:	02 c0       	rjmp	.+4      	; 0x488 <DIO_enuSetPinDirection+0x10c>
 484:	66 0f       	add	r22, r22
 486:	77 1f       	adc	r23, r23
 488:	8a 95       	dec	r24
 48a:	e2 f7       	brpl	.-8      	; 0x484 <DIO_enuSetPinDirection+0x108>
 48c:	cb 01       	movw	r24, r22
 48e:	84 2b       	or	r24, r20
 490:	8c 93       	st	X, r24
 492:	51 c0       	rjmp	.+162    	; 0x536 <DIO_enuSetPinDirection+0x1ba>
					break;

					case DIO_PORTC:
						DDRC &=~(1 << Copy_u8PinID);
 494:	a4 e3       	ldi	r26, 0x34	; 52
 496:	b0 e0       	ldi	r27, 0x00	; 0
 498:	e4 e3       	ldi	r30, 0x34	; 52
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	48 2f       	mov	r20, r24
 4a0:	8b 81       	ldd	r24, Y+3	; 0x03
 4a2:	28 2f       	mov	r18, r24
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_enuSetPinDirection+0x134>
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	2a 95       	dec	r18
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_enuSetPinDirection+0x130>
 4b4:	80 95       	com	r24
 4b6:	84 23       	and	r24, r20
 4b8:	8c 93       	st	X, r24
						DDRC|= (Copy_u8Value << Copy_u8PinID);
 4ba:	a4 e3       	ldi	r26, 0x34	; 52
 4bc:	b0 e0       	ldi	r27, 0x00	; 0
 4be:	e4 e3       	ldi	r30, 0x34	; 52
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	48 2f       	mov	r20, r24
 4c6:	8c 81       	ldd	r24, Y+4	; 0x04
 4c8:	28 2f       	mov	r18, r24
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	8b 81       	ldd	r24, Y+3	; 0x03
 4ce:	88 2f       	mov	r24, r24
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	b9 01       	movw	r22, r18
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_enuSetPinDirection+0x15e>
 4d6:	66 0f       	add	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	8a 95       	dec	r24
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_enuSetPinDirection+0x15a>
 4de:	cb 01       	movw	r24, r22
 4e0:	84 2b       	or	r24, r20
 4e2:	8c 93       	st	X, r24
 4e4:	28 c0       	rjmp	.+80     	; 0x536 <DIO_enuSetPinDirection+0x1ba>
					break;

					case DIO_PORTD:
						DDRD &=~(1 << Copy_u8PinID);
 4e6:	a1 e3       	ldi	r26, 0x31	; 49
 4e8:	b0 e0       	ldi	r27, 0x00	; 0
 4ea:	e1 e3       	ldi	r30, 0x31	; 49
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	48 2f       	mov	r20, r24
 4f2:	8b 81       	ldd	r24, Y+3	; 0x03
 4f4:	28 2f       	mov	r18, r24
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_enuSetPinDirection+0x186>
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	2a 95       	dec	r18
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_enuSetPinDirection+0x182>
 506:	80 95       	com	r24
 508:	84 23       	and	r24, r20
 50a:	8c 93       	st	X, r24
						DDRD |= (Copy_u8Value << Copy_u8PinID);
 50c:	a1 e3       	ldi	r26, 0x31	; 49
 50e:	b0 e0       	ldi	r27, 0x00	; 0
 510:	e1 e3       	ldi	r30, 0x31	; 49
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	48 2f       	mov	r20, r24
 518:	8c 81       	ldd	r24, Y+4	; 0x04
 51a:	28 2f       	mov	r18, r24
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	8b 81       	ldd	r24, Y+3	; 0x03
 520:	88 2f       	mov	r24, r24
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	b9 01       	movw	r22, r18
 526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_enuSetPinDirection+0x1b0>
 528:	66 0f       	add	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	8a 95       	dec	r24
 52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_enuSetPinDirection+0x1ac>
 530:	cb 01       	movw	r24, r22
 532:	84 2b       	or	r24, r20
 534:	8c 93       	st	X, r24
					break;
				}
				Local_enuErrorState = ES_OK;
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	89 83       	std	Y+1, r24	; 0x01
 53a:	02 c0       	rjmp	.+4      	; 0x540 <DIO_enuSetPinDirection+0x1c4>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
 53c:	83 e0       	ldi	r24, 0x03	; 3
 53e:	89 83       	std	Y+1, r24	; 0x01
			}

			return Local_enuErrorState;
 540:	89 81       	ldd	r24, Y+1	; 0x01

}
 542:	26 96       	adiw	r28, 0x06	; 6
 544:	0f b6       	in	r0, 0x3f	; 63
 546:	f8 94       	cli
 548:	de bf       	out	0x3e, r29	; 62
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	cd bf       	out	0x3d, r28	; 61
 54e:	cf 91       	pop	r28
 550:	df 91       	pop	r29
 552:	08 95       	ret

00000554 <DIO_enuSetPinVal>:

ES_t DIO_enuSetPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID, u8 Copy_u8Value){
 554:	df 93       	push	r29
 556:	cf 93       	push	r28
 558:	00 d0       	rcall	.+0      	; 0x55a <DIO_enuSetPinVal+0x6>
 55a:	00 d0       	rcall	.+0      	; 0x55c <DIO_enuSetPinVal+0x8>
 55c:	00 d0       	rcall	.+0      	; 0x55e <DIO_enuSetPinVal+0xa>
 55e:	cd b7       	in	r28, 0x3d	; 61
 560:	de b7       	in	r29, 0x3e	; 62
 562:	8a 83       	std	Y+2, r24	; 0x02
 564:	6b 83       	std	Y+3, r22	; 0x03
 566:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
 568:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_PORTD	&& Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT){
 56a:	8a 81       	ldd	r24, Y+2	; 0x02
 56c:	84 30       	cpi	r24, 0x04	; 4
 56e:	08 f0       	brcs	.+2      	; 0x572 <DIO_enuSetPinVal+0x1e>
 570:	d1 c0       	rjmp	.+418    	; 0x714 <DIO_enuSetPinVal+0x1c0>
 572:	8b 81       	ldd	r24, Y+3	; 0x03
 574:	88 30       	cpi	r24, 0x08	; 8
 576:	08 f0       	brcs	.+2      	; 0x57a <DIO_enuSetPinVal+0x26>
 578:	cd c0       	rjmp	.+410    	; 0x714 <DIO_enuSetPinVal+0x1c0>
 57a:	8c 81       	ldd	r24, Y+4	; 0x04
 57c:	82 30       	cpi	r24, 0x02	; 2
 57e:	08 f0       	brcs	.+2      	; 0x582 <DIO_enuSetPinVal+0x2e>
 580:	c9 c0       	rjmp	.+402    	; 0x714 <DIO_enuSetPinVal+0x1c0>
		switch(Copy_u8PortID)
 582:	8a 81       	ldd	r24, Y+2	; 0x02
 584:	28 2f       	mov	r18, r24
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	3e 83       	std	Y+6, r19	; 0x06
 58a:	2d 83       	std	Y+5, r18	; 0x05
 58c:	6d 81       	ldd	r22, Y+5	; 0x05
 58e:	7e 81       	ldd	r23, Y+6	; 0x06
 590:	61 30       	cpi	r22, 0x01	; 1
 592:	71 05       	cpc	r23, r1
 594:	09 f4       	brne	.+2      	; 0x598 <DIO_enuSetPinVal+0x44>
 596:	41 c0       	rjmp	.+130    	; 0x61a <DIO_enuSetPinVal+0xc6>
 598:	8d 81       	ldd	r24, Y+5	; 0x05
 59a:	9e 81       	ldd	r25, Y+6	; 0x06
 59c:	82 30       	cpi	r24, 0x02	; 2
 59e:	91 05       	cpc	r25, r1
 5a0:	34 f4       	brge	.+12     	; 0x5ae <DIO_enuSetPinVal+0x5a>
 5a2:	2d 81       	ldd	r18, Y+5	; 0x05
 5a4:	3e 81       	ldd	r19, Y+6	; 0x06
 5a6:	21 15       	cp	r18, r1
 5a8:	31 05       	cpc	r19, r1
 5aa:	71 f0       	breq	.+28     	; 0x5c8 <DIO_enuSetPinVal+0x74>
 5ac:	b0 c0       	rjmp	.+352    	; 0x70e <DIO_enuSetPinVal+0x1ba>
 5ae:	6d 81       	ldd	r22, Y+5	; 0x05
 5b0:	7e 81       	ldd	r23, Y+6	; 0x06
 5b2:	62 30       	cpi	r22, 0x02	; 2
 5b4:	71 05       	cpc	r23, r1
 5b6:	09 f4       	brne	.+2      	; 0x5ba <DIO_enuSetPinVal+0x66>
 5b8:	59 c0       	rjmp	.+178    	; 0x66c <DIO_enuSetPinVal+0x118>
 5ba:	8d 81       	ldd	r24, Y+5	; 0x05
 5bc:	9e 81       	ldd	r25, Y+6	; 0x06
 5be:	83 30       	cpi	r24, 0x03	; 3
 5c0:	91 05       	cpc	r25, r1
 5c2:	09 f4       	brne	.+2      	; 0x5c6 <DIO_enuSetPinVal+0x72>
 5c4:	7c c0       	rjmp	.+248    	; 0x6be <DIO_enuSetPinVal+0x16a>
 5c6:	a3 c0       	rjmp	.+326    	; 0x70e <DIO_enuSetPinVal+0x1ba>
					{
						case DIO_PORTA:
							PORTA &=~(1 << Copy_u8PinID);
 5c8:	ab e3       	ldi	r26, 0x3B	; 59
 5ca:	b0 e0       	ldi	r27, 0x00	; 0
 5cc:	eb e3       	ldi	r30, 0x3B	; 59
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	80 81       	ld	r24, Z
 5d2:	48 2f       	mov	r20, r24
 5d4:	8b 81       	ldd	r24, Y+3	; 0x03
 5d6:	28 2f       	mov	r18, r24
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_enuSetPinVal+0x90>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	2a 95       	dec	r18
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_enuSetPinVal+0x8c>
 5e8:	80 95       	com	r24
 5ea:	84 23       	and	r24, r20
 5ec:	8c 93       	st	X, r24
							PORTA |= (Copy_u8Value << Copy_u8PinID);
 5ee:	ab e3       	ldi	r26, 0x3B	; 59
 5f0:	b0 e0       	ldi	r27, 0x00	; 0
 5f2:	eb e3       	ldi	r30, 0x3B	; 59
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	80 81       	ld	r24, Z
 5f8:	48 2f       	mov	r20, r24
 5fa:	8c 81       	ldd	r24, Y+4	; 0x04
 5fc:	28 2f       	mov	r18, r24
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	8b 81       	ldd	r24, Y+3	; 0x03
 602:	88 2f       	mov	r24, r24
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	b9 01       	movw	r22, r18
 608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_enuSetPinVal+0xba>
 60a:	66 0f       	add	r22, r22
 60c:	77 1f       	adc	r23, r23
 60e:	8a 95       	dec	r24
 610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_enuSetPinVal+0xb6>
 612:	cb 01       	movw	r24, r22
 614:	84 2b       	or	r24, r20
 616:	8c 93       	st	X, r24
 618:	7a c0       	rjmp	.+244    	; 0x70e <DIO_enuSetPinVal+0x1ba>
						break;

						case DIO_PORTB:
							PORTB &=~(1 << Copy_u8PinID);
 61a:	a8 e3       	ldi	r26, 0x38	; 56
 61c:	b0 e0       	ldi	r27, 0x00	; 0
 61e:	e8 e3       	ldi	r30, 0x38	; 56
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	80 81       	ld	r24, Z
 624:	48 2f       	mov	r20, r24
 626:	8b 81       	ldd	r24, Y+3	; 0x03
 628:	28 2f       	mov	r18, r24
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	02 c0       	rjmp	.+4      	; 0x636 <DIO_enuSetPinVal+0xe2>
 632:	88 0f       	add	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	2a 95       	dec	r18
 638:	e2 f7       	brpl	.-8      	; 0x632 <DIO_enuSetPinVal+0xde>
 63a:	80 95       	com	r24
 63c:	84 23       	and	r24, r20
 63e:	8c 93       	st	X, r24
							PORTB |= (Copy_u8Value << Copy_u8PinID);
 640:	a8 e3       	ldi	r26, 0x38	; 56
 642:	b0 e0       	ldi	r27, 0x00	; 0
 644:	e8 e3       	ldi	r30, 0x38	; 56
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	80 81       	ld	r24, Z
 64a:	48 2f       	mov	r20, r24
 64c:	8c 81       	ldd	r24, Y+4	; 0x04
 64e:	28 2f       	mov	r18, r24
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	8b 81       	ldd	r24, Y+3	; 0x03
 654:	88 2f       	mov	r24, r24
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	b9 01       	movw	r22, r18
 65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_enuSetPinVal+0x10c>
 65c:	66 0f       	add	r22, r22
 65e:	77 1f       	adc	r23, r23
 660:	8a 95       	dec	r24
 662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_enuSetPinVal+0x108>
 664:	cb 01       	movw	r24, r22
 666:	84 2b       	or	r24, r20
 668:	8c 93       	st	X, r24
 66a:	51 c0       	rjmp	.+162    	; 0x70e <DIO_enuSetPinVal+0x1ba>
						break;

						case DIO_PORTC:
							PORTC &=~(1 << Copy_u8PinID);
 66c:	a5 e3       	ldi	r26, 0x35	; 53
 66e:	b0 e0       	ldi	r27, 0x00	; 0
 670:	e5 e3       	ldi	r30, 0x35	; 53
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	80 81       	ld	r24, Z
 676:	48 2f       	mov	r20, r24
 678:	8b 81       	ldd	r24, Y+3	; 0x03
 67a:	28 2f       	mov	r18, r24
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	02 c0       	rjmp	.+4      	; 0x688 <DIO_enuSetPinVal+0x134>
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	2a 95       	dec	r18
 68a:	e2 f7       	brpl	.-8      	; 0x684 <DIO_enuSetPinVal+0x130>
 68c:	80 95       	com	r24
 68e:	84 23       	and	r24, r20
 690:	8c 93       	st	X, r24
							PORTC|= (Copy_u8Value << Copy_u8PinID);
 692:	a5 e3       	ldi	r26, 0x35	; 53
 694:	b0 e0       	ldi	r27, 0x00	; 0
 696:	e5 e3       	ldi	r30, 0x35	; 53
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	80 81       	ld	r24, Z
 69c:	48 2f       	mov	r20, r24
 69e:	8c 81       	ldd	r24, Y+4	; 0x04
 6a0:	28 2f       	mov	r18, r24
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	8b 81       	ldd	r24, Y+3	; 0x03
 6a6:	88 2f       	mov	r24, r24
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	b9 01       	movw	r22, r18
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <DIO_enuSetPinVal+0x15e>
 6ae:	66 0f       	add	r22, r22
 6b0:	77 1f       	adc	r23, r23
 6b2:	8a 95       	dec	r24
 6b4:	e2 f7       	brpl	.-8      	; 0x6ae <DIO_enuSetPinVal+0x15a>
 6b6:	cb 01       	movw	r24, r22
 6b8:	84 2b       	or	r24, r20
 6ba:	8c 93       	st	X, r24
 6bc:	28 c0       	rjmp	.+80     	; 0x70e <DIO_enuSetPinVal+0x1ba>
						break;

						case DIO_PORTD:
							PORTD &=~(1 << Copy_u8PinID);
 6be:	a2 e3       	ldi	r26, 0x32	; 50
 6c0:	b0 e0       	ldi	r27, 0x00	; 0
 6c2:	e2 e3       	ldi	r30, 0x32	; 50
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	80 81       	ld	r24, Z
 6c8:	48 2f       	mov	r20, r24
 6ca:	8b 81       	ldd	r24, Y+3	; 0x03
 6cc:	28 2f       	mov	r18, r24
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_enuSetPinVal+0x186>
 6d6:	88 0f       	add	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	2a 95       	dec	r18
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_enuSetPinVal+0x182>
 6de:	80 95       	com	r24
 6e0:	84 23       	and	r24, r20
 6e2:	8c 93       	st	X, r24
							PORTD |= (Copy_u8Value << Copy_u8PinID);
 6e4:	a2 e3       	ldi	r26, 0x32	; 50
 6e6:	b0 e0       	ldi	r27, 0x00	; 0
 6e8:	e2 e3       	ldi	r30, 0x32	; 50
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	80 81       	ld	r24, Z
 6ee:	48 2f       	mov	r20, r24
 6f0:	8c 81       	ldd	r24, Y+4	; 0x04
 6f2:	28 2f       	mov	r18, r24
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	8b 81       	ldd	r24, Y+3	; 0x03
 6f8:	88 2f       	mov	r24, r24
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	b9 01       	movw	r22, r18
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_enuSetPinVal+0x1b0>
 700:	66 0f       	add	r22, r22
 702:	77 1f       	adc	r23, r23
 704:	8a 95       	dec	r24
 706:	e2 f7       	brpl	.-8      	; 0x700 <DIO_enuSetPinVal+0x1ac>
 708:	cb 01       	movw	r24, r22
 70a:	84 2b       	or	r24, r20
 70c:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorState = ES_OK;
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	89 83       	std	Y+1, r24	; 0x01
 712:	02 c0       	rjmp	.+4      	; 0x718 <DIO_enuSetPinVal+0x1c4>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
 714:	83 e0       	ldi	r24, 0x03	; 3
 716:	89 83       	std	Y+1, r24	; 0x01
				}

				return Local_enuErrorState;
 718:	89 81       	ldd	r24, Y+1	; 0x01
}
 71a:	26 96       	adiw	r28, 0x06	; 6
 71c:	0f b6       	in	r0, 0x3f	; 63
 71e:	f8 94       	cli
 720:	de bf       	out	0x3e, r29	; 62
 722:	0f be       	out	0x3f, r0	; 63
 724:	cd bf       	out	0x3d, r28	; 61
 726:	cf 91       	pop	r28
 728:	df 91       	pop	r29
 72a:	08 95       	ret

0000072c <DIO_enuGetPinVal>:

ES_t DIO_enuGetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID,u8 *Copy_pu8Value){
 72c:	df 93       	push	r29
 72e:	cf 93       	push	r28
 730:	cd b7       	in	r28, 0x3d	; 61
 732:	de b7       	in	r29, 0x3e	; 62
 734:	27 97       	sbiw	r28, 0x07	; 7
 736:	0f b6       	in	r0, 0x3f	; 63
 738:	f8 94       	cli
 73a:	de bf       	out	0x3e, r29	; 62
 73c:	0f be       	out	0x3f, r0	; 63
 73e:	cd bf       	out	0x3d, r28	; 61
 740:	8a 83       	std	Y+2, r24	; 0x02
 742:	6b 83       	std	Y+3, r22	; 0x03
 744:	5d 83       	std	Y+5, r21	; 0x05
 746:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
 748:	19 82       	std	Y+1, r1	; 0x01

	 if(Copy_pu8Value!=NULL){
 74a:	8c 81       	ldd	r24, Y+4	; 0x04
 74c:	9d 81       	ldd	r25, Y+5	; 0x05
 74e:	00 97       	sbiw	r24, 0x00	; 0
 750:	09 f4       	brne	.+2      	; 0x754 <DIO_enuGetPinVal+0x28>
 752:	7a c0       	rjmp	.+244    	; 0x848 <DIO_enuGetPinVal+0x11c>
			if(Copy_u8PortID <= DIO_PORTD)
 754:	8a 81       	ldd	r24, Y+2	; 0x02
 756:	84 30       	cpi	r24, 0x04	; 4
 758:	08 f0       	brcs	.+2      	; 0x75c <DIO_enuGetPinVal+0x30>
 75a:	73 c0       	rjmp	.+230    	; 0x842 <DIO_enuGetPinVal+0x116>
			{
				switch(Copy_u8PortID)
 75c:	8a 81       	ldd	r24, Y+2	; 0x02
 75e:	28 2f       	mov	r18, r24
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	3f 83       	std	Y+7, r19	; 0x07
 764:	2e 83       	std	Y+6, r18	; 0x06
 766:	4e 81       	ldd	r20, Y+6	; 0x06
 768:	5f 81       	ldd	r21, Y+7	; 0x07
 76a:	41 30       	cpi	r20, 0x01	; 1
 76c:	51 05       	cpc	r21, r1
 76e:	59 f1       	breq	.+86     	; 0x7c6 <DIO_enuGetPinVal+0x9a>
 770:	8e 81       	ldd	r24, Y+6	; 0x06
 772:	9f 81       	ldd	r25, Y+7	; 0x07
 774:	82 30       	cpi	r24, 0x02	; 2
 776:	91 05       	cpc	r25, r1
 778:	34 f4       	brge	.+12     	; 0x786 <DIO_enuGetPinVal+0x5a>
 77a:	2e 81       	ldd	r18, Y+6	; 0x06
 77c:	3f 81       	ldd	r19, Y+7	; 0x07
 77e:	21 15       	cp	r18, r1
 780:	31 05       	cpc	r19, r1
 782:	69 f0       	breq	.+26     	; 0x79e <DIO_enuGetPinVal+0x72>
 784:	5b c0       	rjmp	.+182    	; 0x83c <DIO_enuGetPinVal+0x110>
 786:	4e 81       	ldd	r20, Y+6	; 0x06
 788:	5f 81       	ldd	r21, Y+7	; 0x07
 78a:	42 30       	cpi	r20, 0x02	; 2
 78c:	51 05       	cpc	r21, r1
 78e:	79 f1       	breq	.+94     	; 0x7ee <DIO_enuGetPinVal+0xc2>
 790:	8e 81       	ldd	r24, Y+6	; 0x06
 792:	9f 81       	ldd	r25, Y+7	; 0x07
 794:	83 30       	cpi	r24, 0x03	; 3
 796:	91 05       	cpc	r25, r1
 798:	09 f4       	brne	.+2      	; 0x79c <DIO_enuGetPinVal+0x70>
 79a:	3d c0       	rjmp	.+122    	; 0x816 <DIO_enuGetPinVal+0xea>
 79c:	4f c0       	rjmp	.+158    	; 0x83c <DIO_enuGetPinVal+0x110>
				{
					case DIO_PORTA:
					 *Copy_pu8Value=((PINA >> Copy_u8PinID) & 1);
 79e:	e9 e3       	ldi	r30, 0x39	; 57
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	80 81       	ld	r24, Z
 7a4:	28 2f       	mov	r18, r24
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	8b 81       	ldd	r24, Y+3	; 0x03
 7aa:	88 2f       	mov	r24, r24
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	a9 01       	movw	r20, r18
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <DIO_enuGetPinVal+0x8a>
 7b2:	55 95       	asr	r21
 7b4:	47 95       	ror	r20
 7b6:	8a 95       	dec	r24
 7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <DIO_enuGetPinVal+0x86>
 7ba:	ca 01       	movw	r24, r20
 7bc:	81 70       	andi	r24, 0x01	; 1
 7be:	ec 81       	ldd	r30, Y+4	; 0x04
 7c0:	fd 81       	ldd	r31, Y+5	; 0x05
 7c2:	80 83       	st	Z, r24
 7c4:	3b c0       	rjmp	.+118    	; 0x83c <DIO_enuGetPinVal+0x110>
					break;

					case DIO_PORTB:
					 *Copy_pu8Value=((PINB >> Copy_u8PinID) & 1);
 7c6:	e6 e3       	ldi	r30, 0x36	; 54
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	80 81       	ld	r24, Z
 7cc:	28 2f       	mov	r18, r24
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	8b 81       	ldd	r24, Y+3	; 0x03
 7d2:	88 2f       	mov	r24, r24
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	a9 01       	movw	r20, r18
 7d8:	02 c0       	rjmp	.+4      	; 0x7de <DIO_enuGetPinVal+0xb2>
 7da:	55 95       	asr	r21
 7dc:	47 95       	ror	r20
 7de:	8a 95       	dec	r24
 7e0:	e2 f7       	brpl	.-8      	; 0x7da <DIO_enuGetPinVal+0xae>
 7e2:	ca 01       	movw	r24, r20
 7e4:	81 70       	andi	r24, 0x01	; 1
 7e6:	ec 81       	ldd	r30, Y+4	; 0x04
 7e8:	fd 81       	ldd	r31, Y+5	; 0x05
 7ea:	80 83       	st	Z, r24
 7ec:	27 c0       	rjmp	.+78     	; 0x83c <DIO_enuGetPinVal+0x110>
					break;

					case DIO_PORTC:
					 *Copy_pu8Value=((PINC >> Copy_u8PinID) & 1);
 7ee:	e3 e3       	ldi	r30, 0x33	; 51
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	80 81       	ld	r24, Z
 7f4:	28 2f       	mov	r18, r24
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	8b 81       	ldd	r24, Y+3	; 0x03
 7fa:	88 2f       	mov	r24, r24
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	a9 01       	movw	r20, r18
 800:	02 c0       	rjmp	.+4      	; 0x806 <DIO_enuGetPinVal+0xda>
 802:	55 95       	asr	r21
 804:	47 95       	ror	r20
 806:	8a 95       	dec	r24
 808:	e2 f7       	brpl	.-8      	; 0x802 <DIO_enuGetPinVal+0xd6>
 80a:	ca 01       	movw	r24, r20
 80c:	81 70       	andi	r24, 0x01	; 1
 80e:	ec 81       	ldd	r30, Y+4	; 0x04
 810:	fd 81       	ldd	r31, Y+5	; 0x05
 812:	80 83       	st	Z, r24
 814:	13 c0       	rjmp	.+38     	; 0x83c <DIO_enuGetPinVal+0x110>
					break;

					case DIO_PORTD:
				    *Copy_pu8Value=((PIND >> Copy_u8PinID) & 1);
 816:	e0 e3       	ldi	r30, 0x30	; 48
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	80 81       	ld	r24, Z
 81c:	28 2f       	mov	r18, r24
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	8b 81       	ldd	r24, Y+3	; 0x03
 822:	88 2f       	mov	r24, r24
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	a9 01       	movw	r20, r18
 828:	02 c0       	rjmp	.+4      	; 0x82e <DIO_enuGetPinVal+0x102>
 82a:	55 95       	asr	r21
 82c:	47 95       	ror	r20
 82e:	8a 95       	dec	r24
 830:	e2 f7       	brpl	.-8      	; 0x82a <DIO_enuGetPinVal+0xfe>
 832:	ca 01       	movw	r24, r20
 834:	81 70       	andi	r24, 0x01	; 1
 836:	ec 81       	ldd	r30, Y+4	; 0x04
 838:	fd 81       	ldd	r31, Y+5	; 0x05
 83a:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorState = ES_OK;
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	89 83       	std	Y+1, r24	; 0x01
 840:	05 c0       	rjmp	.+10     	; 0x84c <DIO_enuGetPinVal+0x120>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
 842:	83 e0       	ldi	r24, 0x03	; 3
 844:	89 83       	std	Y+1, r24	; 0x01
 846:	02 c0       	rjmp	.+4      	; 0x84c <DIO_enuGetPinVal+0x120>
			}
	 }
	 else{
		 Local_enuErrorState = ES_NULL_POINTER;
 848:	82 e0       	ldi	r24, 0x02	; 2
 84a:	89 83       	std	Y+1, r24	; 0x01
	 }
			return Local_enuErrorState;
 84c:	89 81       	ldd	r24, Y+1	; 0x01


}
 84e:	27 96       	adiw	r28, 0x07	; 7
 850:	0f b6       	in	r0, 0x3f	; 63
 852:	f8 94       	cli
 854:	de bf       	out	0x3e, r29	; 62
 856:	0f be       	out	0x3f, r0	; 63
 858:	cd bf       	out	0x3d, r28	; 61
 85a:	cf 91       	pop	r28
 85c:	df 91       	pop	r29
 85e:	08 95       	ret

00000860 <DIO_enuTogPinVal>:
ES_t DIO_enuTogPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID){
 860:	df 93       	push	r29
 862:	cf 93       	push	r28
 864:	00 d0       	rcall	.+0      	; 0x866 <DIO_enuTogPinVal+0x6>
 866:	00 d0       	rcall	.+0      	; 0x868 <DIO_enuTogPinVal+0x8>
 868:	0f 92       	push	r0
 86a:	cd b7       	in	r28, 0x3d	; 61
 86c:	de b7       	in	r29, 0x3e	; 62
 86e:	8a 83       	std	Y+2, r24	; 0x02
 870:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 872:	19 82       	std	Y+1, r1	; 0x01

				if(Copy_u8PortID <= DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
 874:	8a 81       	ldd	r24, Y+2	; 0x02
 876:	84 30       	cpi	r24, 0x04	; 4
 878:	08 f0       	brcs	.+2      	; 0x87c <DIO_enuTogPinVal+0x1c>
 87a:	66 c0       	rjmp	.+204    	; 0x948 <DIO_enuTogPinVal+0xe8>
 87c:	8b 81       	ldd	r24, Y+3	; 0x03
 87e:	88 30       	cpi	r24, 0x08	; 8
 880:	08 f0       	brcs	.+2      	; 0x884 <DIO_enuTogPinVal+0x24>
 882:	62 c0       	rjmp	.+196    	; 0x948 <DIO_enuTogPinVal+0xe8>
				{
					switch(Copy_u8PortID)
 884:	8a 81       	ldd	r24, Y+2	; 0x02
 886:	28 2f       	mov	r18, r24
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	3d 83       	std	Y+5, r19	; 0x05
 88c:	2c 83       	std	Y+4, r18	; 0x04
 88e:	8c 81       	ldd	r24, Y+4	; 0x04
 890:	9d 81       	ldd	r25, Y+5	; 0x05
 892:	81 30       	cpi	r24, 0x01	; 1
 894:	91 05       	cpc	r25, r1
 896:	49 f1       	breq	.+82     	; 0x8ea <DIO_enuTogPinVal+0x8a>
 898:	2c 81       	ldd	r18, Y+4	; 0x04
 89a:	3d 81       	ldd	r19, Y+5	; 0x05
 89c:	22 30       	cpi	r18, 0x02	; 2
 89e:	31 05       	cpc	r19, r1
 8a0:	2c f4       	brge	.+10     	; 0x8ac <DIO_enuTogPinVal+0x4c>
 8a2:	8c 81       	ldd	r24, Y+4	; 0x04
 8a4:	9d 81       	ldd	r25, Y+5	; 0x05
 8a6:	00 97       	sbiw	r24, 0x00	; 0
 8a8:	61 f0       	breq	.+24     	; 0x8c2 <DIO_enuTogPinVal+0x62>
 8aa:	4b c0       	rjmp	.+150    	; 0x942 <DIO_enuTogPinVal+0xe2>
 8ac:	2c 81       	ldd	r18, Y+4	; 0x04
 8ae:	3d 81       	ldd	r19, Y+5	; 0x05
 8b0:	22 30       	cpi	r18, 0x02	; 2
 8b2:	31 05       	cpc	r19, r1
 8b4:	49 f1       	breq	.+82     	; 0x908 <DIO_enuTogPinVal+0xa8>
 8b6:	8c 81       	ldd	r24, Y+4	; 0x04
 8b8:	9d 81       	ldd	r25, Y+5	; 0x05
 8ba:	83 30       	cpi	r24, 0x03	; 3
 8bc:	91 05       	cpc	r25, r1
 8be:	99 f1       	breq	.+102    	; 0x926 <DIO_enuTogPinVal+0xc6>
 8c0:	40 c0       	rjmp	.+128    	; 0x942 <DIO_enuTogPinVal+0xe2>
					{
						case DIO_PORTA:
						 PORTA^=(1 << Copy_u8PinID);
 8c2:	ab e3       	ldi	r26, 0x3B	; 59
 8c4:	b0 e0       	ldi	r27, 0x00	; 0
 8c6:	eb e3       	ldi	r30, 0x3B	; 59
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	80 81       	ld	r24, Z
 8cc:	48 2f       	mov	r20, r24
 8ce:	8b 81       	ldd	r24, Y+3	; 0x03
 8d0:	28 2f       	mov	r18, r24
 8d2:	30 e0       	ldi	r19, 0x00	; 0
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	02 2e       	mov	r0, r18
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <DIO_enuTogPinVal+0x80>
 8dc:	88 0f       	add	r24, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	0a 94       	dec	r0
 8e2:	e2 f7       	brpl	.-8      	; 0x8dc <DIO_enuTogPinVal+0x7c>
 8e4:	84 27       	eor	r24, r20
 8e6:	8c 93       	st	X, r24
 8e8:	2c c0       	rjmp	.+88     	; 0x942 <DIO_enuTogPinVal+0xe2>
						break;

						case DIO_PORTB:
						 PORTB=(1 << Copy_u8PinID);
 8ea:	e8 e3       	ldi	r30, 0x38	; 56
 8ec:	f0 e0       	ldi	r31, 0x00	; 0
 8ee:	8b 81       	ldd	r24, Y+3	; 0x03
 8f0:	28 2f       	mov	r18, r24
 8f2:	30 e0       	ldi	r19, 0x00	; 0
 8f4:	81 e0       	ldi	r24, 0x01	; 1
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	02 2e       	mov	r0, r18
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <DIO_enuTogPinVal+0xa0>
 8fc:	88 0f       	add	r24, r24
 8fe:	99 1f       	adc	r25, r25
 900:	0a 94       	dec	r0
 902:	e2 f7       	brpl	.-8      	; 0x8fc <DIO_enuTogPinVal+0x9c>
 904:	80 83       	st	Z, r24
 906:	1d c0       	rjmp	.+58     	; 0x942 <DIO_enuTogPinVal+0xe2>
						break;

						case DIO_PORTC:
						 PORTC=(1 << Copy_u8PinID);
 908:	e5 e3       	ldi	r30, 0x35	; 53
 90a:	f0 e0       	ldi	r31, 0x00	; 0
 90c:	8b 81       	ldd	r24, Y+3	; 0x03
 90e:	28 2f       	mov	r18, r24
 910:	30 e0       	ldi	r19, 0x00	; 0
 912:	81 e0       	ldi	r24, 0x01	; 1
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	02 2e       	mov	r0, r18
 918:	02 c0       	rjmp	.+4      	; 0x91e <DIO_enuTogPinVal+0xbe>
 91a:	88 0f       	add	r24, r24
 91c:	99 1f       	adc	r25, r25
 91e:	0a 94       	dec	r0
 920:	e2 f7       	brpl	.-8      	; 0x91a <DIO_enuTogPinVal+0xba>
 922:	80 83       	st	Z, r24
 924:	0e c0       	rjmp	.+28     	; 0x942 <DIO_enuTogPinVal+0xe2>
						break;

						case DIO_PORTD:
						 PORTD=(1 << Copy_u8PinID);
 926:	e2 e3       	ldi	r30, 0x32	; 50
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	8b 81       	ldd	r24, Y+3	; 0x03
 92c:	28 2f       	mov	r18, r24
 92e:	30 e0       	ldi	r19, 0x00	; 0
 930:	81 e0       	ldi	r24, 0x01	; 1
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	02 2e       	mov	r0, r18
 936:	02 c0       	rjmp	.+4      	; 0x93c <DIO_enuTogPinVal+0xdc>
 938:	88 0f       	add	r24, r24
 93a:	99 1f       	adc	r25, r25
 93c:	0a 94       	dec	r0
 93e:	e2 f7       	brpl	.-8      	; 0x938 <DIO_enuTogPinVal+0xd8>
 940:	80 83       	st	Z, r24
						break;
					}
					Local_enuErrorState = ES_OK;
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	89 83       	std	Y+1, r24	; 0x01
 946:	02 c0       	rjmp	.+4      	; 0x94c <DIO_enuTogPinVal+0xec>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
 948:	83 e0       	ldi	r24, 0x03	; 3
 94a:	89 83       	std	Y+1, r24	; 0x01
				}

				return Local_enuErrorState;
 94c:	89 81       	ldd	r24, Y+1	; 0x01

	}
 94e:	0f 90       	pop	r0
 950:	0f 90       	pop	r0
 952:	0f 90       	pop	r0
 954:	0f 90       	pop	r0
 956:	0f 90       	pop	r0
 958:	cf 91       	pop	r28
 95a:	df 91       	pop	r29
 95c:	08 95       	ret

0000095e <SWITCH_enuInit>:
#include "Switch_config.h"

#include "DIO_int.h"


ES_t SWITCH_enuInit(SW_t *Copy_AstrSwitchs){
 95e:	df 93       	push	r29
 960:	cf 93       	push	r28
 962:	00 d0       	rcall	.+0      	; 0x964 <SWITCH_enuInit+0x6>
 964:	00 d0       	rcall	.+0      	; 0x966 <SWITCH_enuInit+0x8>
 966:	cd b7       	in	r28, 0x3d	; 61
 968:	de b7       	in	r29, 0x3e	; 62
 96a:	9c 83       	std	Y+4, r25	; 0x04
 96c:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 96e:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Iterator=0;
 970:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_AstrSwitchs!=NULL){
 972:	8b 81       	ldd	r24, Y+3	; 0x03
 974:	9c 81       	ldd	r25, Y+4	; 0x04
 976:	00 97       	sbiw	r24, 0x00	; 0
 978:	09 f4       	brne	.+2      	; 0x97c <SWITCH_enuInit+0x1e>
 97a:	5c c0       	rjmp	.+184    	; 0xa34 <SWITCH_enuInit+0xd6>
		for(Local_u8Iterator=0;Local_u8Iterator<SW_NUM;Local_u8Iterator++){
 97c:	19 82       	std	Y+1, r1	; 0x01
 97e:	55 c0       	rjmp	.+170    	; 0xa2a <SWITCH_enuInit+0xcc>
			Local_enuErrorState =DIO_enuSetPinDirection(Copy_AstrSwitchs[Local_u8Iterator].SW_PortID,Copy_AstrSwitchs[Local_u8Iterator].SW_PinID,DIO_u8INPUT);
 980:	89 81       	ldd	r24, Y+1	; 0x01
 982:	28 2f       	mov	r18, r24
 984:	30 e0       	ldi	r19, 0x00	; 0
 986:	c9 01       	movw	r24, r18
 988:	88 0f       	add	r24, r24
 98a:	99 1f       	adc	r25, r25
 98c:	28 0f       	add	r18, r24
 98e:	39 1f       	adc	r19, r25
 990:	8b 81       	ldd	r24, Y+3	; 0x03
 992:	9c 81       	ldd	r25, Y+4	; 0x04
 994:	fc 01       	movw	r30, r24
 996:	e2 0f       	add	r30, r18
 998:	f3 1f       	adc	r31, r19
 99a:	40 81       	ld	r20, Z
 99c:	89 81       	ldd	r24, Y+1	; 0x01
 99e:	28 2f       	mov	r18, r24
 9a0:	30 e0       	ldi	r19, 0x00	; 0
 9a2:	c9 01       	movw	r24, r18
 9a4:	88 0f       	add	r24, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	28 0f       	add	r18, r24
 9aa:	39 1f       	adc	r19, r25
 9ac:	8b 81       	ldd	r24, Y+3	; 0x03
 9ae:	9c 81       	ldd	r25, Y+4	; 0x04
 9b0:	fc 01       	movw	r30, r24
 9b2:	e2 0f       	add	r30, r18
 9b4:	f3 1f       	adc	r31, r19
 9b6:	91 81       	ldd	r25, Z+1	; 0x01
 9b8:	84 2f       	mov	r24, r20
 9ba:	69 2f       	mov	r22, r25
 9bc:	40 e0       	ldi	r20, 0x00	; 0
 9be:	0e 94 be 01 	call	0x37c	; 0x37c <DIO_enuSetPinDirection>
 9c2:	8a 83       	std	Y+2, r24	; 0x02
			Local_enuErrorState = DIO_enuSetPinVal(Copy_AstrSwitchs[Local_u8Iterator].SW_PortID,Copy_AstrSwitchs[Local_u8Iterator].SW_PinID,Copy_AstrSwitchs[Local_u8Iterator].SW_Status);
 9c4:	89 81       	ldd	r24, Y+1	; 0x01
 9c6:	28 2f       	mov	r18, r24
 9c8:	30 e0       	ldi	r19, 0x00	; 0
 9ca:	c9 01       	movw	r24, r18
 9cc:	88 0f       	add	r24, r24
 9ce:	99 1f       	adc	r25, r25
 9d0:	28 0f       	add	r18, r24
 9d2:	39 1f       	adc	r19, r25
 9d4:	8b 81       	ldd	r24, Y+3	; 0x03
 9d6:	9c 81       	ldd	r25, Y+4	; 0x04
 9d8:	fc 01       	movw	r30, r24
 9da:	e2 0f       	add	r30, r18
 9dc:	f3 1f       	adc	r31, r19
 9de:	50 81       	ld	r21, Z
 9e0:	89 81       	ldd	r24, Y+1	; 0x01
 9e2:	28 2f       	mov	r18, r24
 9e4:	30 e0       	ldi	r19, 0x00	; 0
 9e6:	c9 01       	movw	r24, r18
 9e8:	88 0f       	add	r24, r24
 9ea:	99 1f       	adc	r25, r25
 9ec:	28 0f       	add	r18, r24
 9ee:	39 1f       	adc	r19, r25
 9f0:	8b 81       	ldd	r24, Y+3	; 0x03
 9f2:	9c 81       	ldd	r25, Y+4	; 0x04
 9f4:	fc 01       	movw	r30, r24
 9f6:	e2 0f       	add	r30, r18
 9f8:	f3 1f       	adc	r31, r19
 9fa:	41 81       	ldd	r20, Z+1	; 0x01
 9fc:	89 81       	ldd	r24, Y+1	; 0x01
 9fe:	28 2f       	mov	r18, r24
 a00:	30 e0       	ldi	r19, 0x00	; 0
 a02:	c9 01       	movw	r24, r18
 a04:	88 0f       	add	r24, r24
 a06:	99 1f       	adc	r25, r25
 a08:	28 0f       	add	r18, r24
 a0a:	39 1f       	adc	r19, r25
 a0c:	8b 81       	ldd	r24, Y+3	; 0x03
 a0e:	9c 81       	ldd	r25, Y+4	; 0x04
 a10:	fc 01       	movw	r30, r24
 a12:	e2 0f       	add	r30, r18
 a14:	f3 1f       	adc	r31, r19
 a16:	92 81       	ldd	r25, Z+2	; 0x02
 a18:	85 2f       	mov	r24, r21
 a1a:	64 2f       	mov	r22, r20
 a1c:	49 2f       	mov	r20, r25
 a1e:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_enuSetPinVal>
 a22:	8a 83       	std	Y+2, r24	; 0x02

ES_t SWITCH_enuInit(SW_t *Copy_AstrSwitchs){
	ES_t Local_enuErrorState = ES_NOK;
	u8 Local_u8Iterator=0;
	if(Copy_AstrSwitchs!=NULL){
		for(Local_u8Iterator=0;Local_u8Iterator<SW_NUM;Local_u8Iterator++){
 a24:	89 81       	ldd	r24, Y+1	; 0x01
 a26:	8f 5f       	subi	r24, 0xFF	; 255
 a28:	89 83       	std	Y+1, r24	; 0x01
 a2a:	89 81       	ldd	r24, Y+1	; 0x01
 a2c:	83 30       	cpi	r24, 0x03	; 3
 a2e:	08 f4       	brcc	.+2      	; 0xa32 <SWITCH_enuInit+0xd4>
 a30:	a7 cf       	rjmp	.-178    	; 0x980 <SWITCH_enuInit+0x22>
 a32:	02 c0       	rjmp	.+4      	; 0xa38 <SWITCH_enuInit+0xda>
			Local_enuErrorState =DIO_enuSetPinDirection(Copy_AstrSwitchs[Local_u8Iterator].SW_PortID,Copy_AstrSwitchs[Local_u8Iterator].SW_PinID,DIO_u8INPUT);
			Local_enuErrorState = DIO_enuSetPinVal(Copy_AstrSwitchs[Local_u8Iterator].SW_PortID,Copy_AstrSwitchs[Local_u8Iterator].SW_PinID,Copy_AstrSwitchs[Local_u8Iterator].SW_Status);
		}
	}
	else{
		 Local_enuErrorState = ES_NULL_POINTER;
 a34:	82 e0       	ldi	r24, 0x02	; 2
 a36:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_enuErrorState;
 a38:	8a 81       	ldd	r24, Y+2	; 0x02
}
 a3a:	0f 90       	pop	r0
 a3c:	0f 90       	pop	r0
 a3e:	0f 90       	pop	r0
 a40:	0f 90       	pop	r0
 a42:	cf 91       	pop	r28
 a44:	df 91       	pop	r29
 a46:	08 95       	ret

00000a48 <SWITCH_enuGetStatus>:

ES_t SWITCH_enuGetStatus(SW_t *Copy_AstrSwitchs,u8 *Copy_pu8SwStatus){
 a48:	df 93       	push	r29
 a4a:	cf 93       	push	r28
 a4c:	00 d0       	rcall	.+0      	; 0xa4e <SWITCH_enuGetStatus+0x6>
 a4e:	00 d0       	rcall	.+0      	; 0xa50 <SWITCH_enuGetStatus+0x8>
 a50:	0f 92       	push	r0
 a52:	cd b7       	in	r28, 0x3d	; 61
 a54:	de b7       	in	r29, 0x3e	; 62
 a56:	9b 83       	std	Y+3, r25	; 0x03
 a58:	8a 83       	std	Y+2, r24	; 0x02
 a5a:	7d 83       	std	Y+5, r23	; 0x05
 a5c:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
 a5e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_AstrSwitchs!=NULL && Copy_pu8SwStatus!=NULL){
 a60:	8a 81       	ldd	r24, Y+2	; 0x02
 a62:	9b 81       	ldd	r25, Y+3	; 0x03
 a64:	00 97       	sbiw	r24, 0x00	; 0
 a66:	91 f0       	breq	.+36     	; 0xa8c <SWITCH_enuGetStatus+0x44>
 a68:	8c 81       	ldd	r24, Y+4	; 0x04
 a6a:	9d 81       	ldd	r25, Y+5	; 0x05
 a6c:	00 97       	sbiw	r24, 0x00	; 0
 a6e:	71 f0       	breq	.+28     	; 0xa8c <SWITCH_enuGetStatus+0x44>
		Local_enuErrorState=DIO_enuGetPinVal(Copy_AstrSwitchs->SW_PortID,Copy_AstrSwitchs->SW_PinID,Copy_pu8SwStatus);
 a70:	ea 81       	ldd	r30, Y+2	; 0x02
 a72:	fb 81       	ldd	r31, Y+3	; 0x03
 a74:	80 81       	ld	r24, Z
 a76:	ea 81       	ldd	r30, Y+2	; 0x02
 a78:	fb 81       	ldd	r31, Y+3	; 0x03
 a7a:	91 81       	ldd	r25, Z+1	; 0x01
 a7c:	2c 81       	ldd	r18, Y+4	; 0x04
 a7e:	3d 81       	ldd	r19, Y+5	; 0x05
 a80:	69 2f       	mov	r22, r25
 a82:	a9 01       	movw	r20, r18
 a84:	0e 94 96 03 	call	0x72c	; 0x72c <DIO_enuGetPinVal>
 a88:	89 83       	std	Y+1, r24	; 0x01
 a8a:	02 c0       	rjmp	.+4      	; 0xa90 <SWITCH_enuGetStatus+0x48>
	}
	else{
		Local_enuErrorState=ES_NULL_POINTER;
 a8c:	82 e0       	ldi	r24, 0x02	; 2
 a8e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 a90:	89 81       	ldd	r24, Y+1	; 0x01
}
 a92:	0f 90       	pop	r0
 a94:	0f 90       	pop	r0
 a96:	0f 90       	pop	r0
 a98:	0f 90       	pop	r0
 a9a:	0f 90       	pop	r0
 a9c:	cf 91       	pop	r28
 a9e:	df 91       	pop	r29
 aa0:	08 95       	ret

00000aa2 <main>:
#include "Switch_config.h"
#include "Switch_int.h"

extern SW_t Switch_AstrSwitchStatus [SW_NUM];
int main(void)
{
 aa2:	df 93       	push	r29
 aa4:	cf 93       	push	r28
 aa6:	0f 92       	push	r0
 aa8:	cd b7       	in	r28, 0x3d	; 61
 aaa:	de b7       	in	r29, 0x3e	; 62
	DIO_enuInit();
 aac:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuInit>
SWITCH_enuInit(Switch_AstrSwitchStatus);
 ab0:	80 e6       	ldi	r24, 0x60	; 96
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	0e 94 af 04 	call	0x95e	; 0x95e <SWITCH_enuInit>
u8 pinstate;
	while(1)
	{
SWITCH_enuGetStatus(&Switch_AstrSwitchStatus[1],&pinstate);
 ab8:	83 e6       	ldi	r24, 0x63	; 99
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	9e 01       	movw	r18, r28
 abe:	2f 5f       	subi	r18, 0xFF	; 255
 ac0:	3f 4f       	sbci	r19, 0xFF	; 255
 ac2:	b9 01       	movw	r22, r18
 ac4:	0e 94 24 05 	call	0xa48	; 0xa48 <SWITCH_enuGetStatus>
if (pinstate ==0)
 ac8:	89 81       	ldd	r24, Y+1	; 0x01
 aca:	88 23       	and	r24, r24
 acc:	31 f4       	brne	.+12     	; 0xada <main+0x38>
		{
DIO_enuSetPinVal(DIO_u8PORTB, DIO_u8PIN0 , DIO_u8HIGH);
 ace:	81 e0       	ldi	r24, 0x01	; 1
 ad0:	60 e0       	ldi	r22, 0x00	; 0
 ad2:	41 e0       	ldi	r20, 0x01	; 1
 ad4:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_enuSetPinVal>
 ad8:	ef cf       	rjmp	.-34     	; 0xab8 <main+0x16>

		}
		else
		{
			DIO_enuSetPinVal(DIO_u8PORTB, DIO_u8PIN0 , DIO_u8LOW);
 ada:	81 e0       	ldi	r24, 0x01	; 1
 adc:	60 e0       	ldi	r22, 0x00	; 0
 ade:	40 e0       	ldi	r20, 0x00	; 0
 ae0:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_enuSetPinVal>
 ae4:	e9 cf       	rjmp	.-46     	; 0xab8 <main+0x16>

00000ae6 <_exit>:
 ae6:	f8 94       	cli

00000ae8 <__stop_program>:
 ae8:	ff cf       	rjmp	.-2      	; 0xae8 <__stop_program>
