
DIO_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000095a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000c90  00000000  00000000  000009b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000087e  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a4 04 	call	0x948	; 0x948 <main>
  64:	0c 94 ab 04 	jmp	0x956	; 0x956 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"


ES_t DIO_enuInit(void){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
  76:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
  78:	ea e3       	ldi	r30, 0x3A	; 58
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	8d ec       	ldi	r24, 0xCD	; 205
  7e:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
  80:	e7 e3       	ldi	r30, 0x37	; 55
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	8d ec       	ldi	r24, 0xCD	; 205
  86:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
  88:	e4 e3       	ldi	r30, 0x34	; 52
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	8d ec       	ldi	r24, 0xCD	; 205
  8e:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
  90:	e1 e3       	ldi	r30, 0x31	; 49
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	8d ec       	ldi	r24, 0xCD	; 205
  96:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
  98:	eb e3       	ldi	r30, 0x3B	; 59
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	89 e2       	ldi	r24, 0x29	; 41
  9e:	80 83       	st	Z, r24
    PORTB = CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
  a0:	e8 e3       	ldi	r30, 0x38	; 56
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	89 e8       	ldi	r24, 0x89	; 137
  a6:	80 83       	st	Z, r24
	PORTC = CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
  a8:	e5 e3       	ldi	r30, 0x35	; 53
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	89 e2       	ldi	r24, 0x29	; 41
  ae:	80 83       	st	Z, r24
	PORTD = CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
  b0:	e2 e3       	ldi	r30, 0x32	; 50
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	89 e2       	ldi	r24, 0x29	; 41
  b6:	80 83       	st	Z, r24
	 Local_enuErrorState = ES_OK;
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
  bc:	89 81       	ldd	r24, Y+1	; 0x01
}
  be:	0f 90       	pop	r0
  c0:	cf 91       	pop	r28
  c2:	df 91       	pop	r29
  c4:	08 95       	ret

000000c6 <DIO_enuSetPortDirection>:


ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value){
  c6:	df 93       	push	r29
  c8:	cf 93       	push	r28
  ca:	00 d0       	rcall	.+0      	; 0xcc <DIO_enuSetPortDirection+0x6>
  cc:	00 d0       	rcall	.+0      	; 0xce <DIO_enuSetPortDirection+0x8>
  ce:	0f 92       	push	r0
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	8a 83       	std	Y+2, r24	; 0x02
  d6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
  d8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
  da:	8a 81       	ldd	r24, Y+2	; 0x02
  dc:	84 30       	cpi	r24, 0x04	; 4
  de:	a8 f5       	brcc	.+106    	; 0x14a <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
  e0:	8a 81       	ldd	r24, Y+2	; 0x02
  e2:	28 2f       	mov	r18, r24
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	3d 83       	std	Y+5, r19	; 0x05
  e8:	2c 83       	std	Y+4, r18	; 0x04
  ea:	8c 81       	ldd	r24, Y+4	; 0x04
  ec:	9d 81       	ldd	r25, Y+5	; 0x05
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	91 05       	cpc	r25, r1
  f2:	d1 f0       	breq	.+52     	; 0x128 <DIO_enuSetPortDirection+0x62>
  f4:	2c 81       	ldd	r18, Y+4	; 0x04
  f6:	3d 81       	ldd	r19, Y+5	; 0x05
  f8:	22 30       	cpi	r18, 0x02	; 2
  fa:	31 05       	cpc	r19, r1
  fc:	2c f4       	brge	.+10     	; 0x108 <DIO_enuSetPortDirection+0x42>
  fe:	8c 81       	ldd	r24, Y+4	; 0x04
 100:	9d 81       	ldd	r25, Y+5	; 0x05
 102:	00 97       	sbiw	r24, 0x00	; 0
 104:	61 f0       	breq	.+24     	; 0x11e <DIO_enuSetPortDirection+0x58>
 106:	1e c0       	rjmp	.+60     	; 0x144 <DIO_enuSetPortDirection+0x7e>
 108:	2c 81       	ldd	r18, Y+4	; 0x04
 10a:	3d 81       	ldd	r19, Y+5	; 0x05
 10c:	22 30       	cpi	r18, 0x02	; 2
 10e:	31 05       	cpc	r19, r1
 110:	81 f0       	breq	.+32     	; 0x132 <DIO_enuSetPortDirection+0x6c>
 112:	8c 81       	ldd	r24, Y+4	; 0x04
 114:	9d 81       	ldd	r25, Y+5	; 0x05
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	91 05       	cpc	r25, r1
 11a:	81 f0       	breq	.+32     	; 0x13c <DIO_enuSetPortDirection+0x76>
 11c:	13 c0       	rjmp	.+38     	; 0x144 <DIO_enuSetPortDirection+0x7e>
		{
			case DIO_PORTA:
			DDRA = Copy_u8Value;
 11e:	ea e3       	ldi	r30, 0x3A	; 58
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	8b 81       	ldd	r24, Y+3	; 0x03
 124:	80 83       	st	Z, r24
 126:	0e c0       	rjmp	.+28     	; 0x144 <DIO_enuSetPortDirection+0x7e>
			break;

			case DIO_PORTB:
			DDRB = Copy_u8Value;
 128:	e7 e3       	ldi	r30, 0x37	; 55
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	8b 81       	ldd	r24, Y+3	; 0x03
 12e:	80 83       	st	Z, r24
 130:	09 c0       	rjmp	.+18     	; 0x144 <DIO_enuSetPortDirection+0x7e>
			break;

			case DIO_PORTC:
			DDRC = Copy_u8Value;
 132:	e4 e3       	ldi	r30, 0x34	; 52
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	8b 81       	ldd	r24, Y+3	; 0x03
 138:	80 83       	st	Z, r24
 13a:	04 c0       	rjmp	.+8      	; 0x144 <DIO_enuSetPortDirection+0x7e>
			break;

			case DIO_PORTD:
			DDRD = Copy_u8Value;
 13c:	e1 e3       	ldi	r30, 0x31	; 49
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	8b 81       	ldd	r24, Y+3	; 0x03
 142:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	89 83       	std	Y+1, r24	; 0x01
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 14e:	89 81       	ldd	r24, Y+1	; 0x01

}
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	cf 91       	pop	r28
 15c:	df 91       	pop	r29
 15e:	08 95       	ret

00000160 <DIO_enuSetPortVal>:
ES_t DIO_enuSetPortVal(u8 Copy_u8PortID, u8 Copy_u8Value){
 160:	df 93       	push	r29
 162:	cf 93       	push	r28
 164:	00 d0       	rcall	.+0      	; 0x166 <DIO_enuSetPortVal+0x6>
 166:	00 d0       	rcall	.+0      	; 0x168 <DIO_enuSetPortVal+0x8>
 168:	0f 92       	push	r0
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	8a 83       	std	Y+2, r24	; 0x02
 170:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 172:	19 82       	std	Y+1, r1	; 0x01

		if(Copy_u8PortID <= DIO_PORTD)
 174:	8a 81       	ldd	r24, Y+2	; 0x02
 176:	84 30       	cpi	r24, 0x04	; 4
 178:	a8 f5       	brcc	.+106    	; 0x1e4 <DIO_enuSetPortVal+0x84>
		{
			switch(Copy_u8PortID)
 17a:	8a 81       	ldd	r24, Y+2	; 0x02
 17c:	28 2f       	mov	r18, r24
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	3d 83       	std	Y+5, r19	; 0x05
 182:	2c 83       	std	Y+4, r18	; 0x04
 184:	8c 81       	ldd	r24, Y+4	; 0x04
 186:	9d 81       	ldd	r25, Y+5	; 0x05
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	91 05       	cpc	r25, r1
 18c:	d1 f0       	breq	.+52     	; 0x1c2 <DIO_enuSetPortVal+0x62>
 18e:	2c 81       	ldd	r18, Y+4	; 0x04
 190:	3d 81       	ldd	r19, Y+5	; 0x05
 192:	22 30       	cpi	r18, 0x02	; 2
 194:	31 05       	cpc	r19, r1
 196:	2c f4       	brge	.+10     	; 0x1a2 <DIO_enuSetPortVal+0x42>
 198:	8c 81       	ldd	r24, Y+4	; 0x04
 19a:	9d 81       	ldd	r25, Y+5	; 0x05
 19c:	00 97       	sbiw	r24, 0x00	; 0
 19e:	61 f0       	breq	.+24     	; 0x1b8 <DIO_enuSetPortVal+0x58>
 1a0:	1e c0       	rjmp	.+60     	; 0x1de <DIO_enuSetPortVal+0x7e>
 1a2:	2c 81       	ldd	r18, Y+4	; 0x04
 1a4:	3d 81       	ldd	r19, Y+5	; 0x05
 1a6:	22 30       	cpi	r18, 0x02	; 2
 1a8:	31 05       	cpc	r19, r1
 1aa:	81 f0       	breq	.+32     	; 0x1cc <DIO_enuSetPortVal+0x6c>
 1ac:	8c 81       	ldd	r24, Y+4	; 0x04
 1ae:	9d 81       	ldd	r25, Y+5	; 0x05
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	91 05       	cpc	r25, r1
 1b4:	81 f0       	breq	.+32     	; 0x1d6 <DIO_enuSetPortVal+0x76>
 1b6:	13 c0       	rjmp	.+38     	; 0x1de <DIO_enuSetPortVal+0x7e>
			{
				case DIO_PORTA:
				PORTA = Copy_u8Value;
 1b8:	eb e3       	ldi	r30, 0x3B	; 59
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	8b 81       	ldd	r24, Y+3	; 0x03
 1be:	80 83       	st	Z, r24
 1c0:	0e c0       	rjmp	.+28     	; 0x1de <DIO_enuSetPortVal+0x7e>
				break;

				case DIO_PORTB:
				PORTB = Copy_u8Value;
 1c2:	e8 e3       	ldi	r30, 0x38	; 56
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	8b 81       	ldd	r24, Y+3	; 0x03
 1c8:	80 83       	st	Z, r24
 1ca:	09 c0       	rjmp	.+18     	; 0x1de <DIO_enuSetPortVal+0x7e>
				break;

				case DIO_PORTC:
				PORTC = Copy_u8Value;
 1cc:	e5 e3       	ldi	r30, 0x35	; 53
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	8b 81       	ldd	r24, Y+3	; 0x03
 1d2:	80 83       	st	Z, r24
 1d4:	04 c0       	rjmp	.+8      	; 0x1de <DIO_enuSetPortVal+0x7e>
				break;

				case DIO_PORTD:
				PORTD = Copy_u8Value;
 1d6:	e2 e3       	ldi	r30, 0x32	; 50
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	8b 81       	ldd	r24, Y+3	; 0x03
 1dc:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	89 83       	std	Y+1, r24	; 0x01
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_enuSetPortVal+0x88>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
 1e4:	83 e0       	ldi	r24, 0x03	; 3
 1e6:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorState;
 1e8:	89 81       	ldd	r24, Y+1	; 0x01

}
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	cf 91       	pop	r28
 1f6:	df 91       	pop	r29
 1f8:	08 95       	ret

000001fa <DIO_enuGetPortVal>:
ES_t DIO_enuGetPortVal(u8 Copy_u8PortID, u8 *Copy_pu8Value){
 1fa:	df 93       	push	r29
 1fc:	cf 93       	push	r28
 1fe:	00 d0       	rcall	.+0      	; 0x200 <DIO_enuGetPortVal+0x6>
 200:	00 d0       	rcall	.+0      	; 0x202 <DIO_enuGetPortVal+0x8>
 202:	00 d0       	rcall	.+0      	; 0x204 <DIO_enuGetPortVal+0xa>
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
 208:	8a 83       	std	Y+2, r24	; 0x02
 20a:	7c 83       	std	Y+4, r23	; 0x04
 20c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 20e:	19 82       	std	Y+1, r1	; 0x01
 if(Copy_pu8Value!=NULL){
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	9c 81       	ldd	r25, Y+4	; 0x04
 214:	00 97       	sbiw	r24, 0x00	; 0
 216:	09 f4       	brne	.+2      	; 0x21a <DIO_enuGetPortVal+0x20>
 218:	43 c0       	rjmp	.+134    	; 0x2a0 <DIO_enuGetPortVal+0xa6>
		if(Copy_u8PortID <= DIO_PORTD)
 21a:	8a 81       	ldd	r24, Y+2	; 0x02
 21c:	84 30       	cpi	r24, 0x04	; 4
 21e:	e8 f5       	brcc	.+122    	; 0x29a <DIO_enuGetPortVal+0xa0>
		{
			switch(Copy_u8PortID)
 220:	8a 81       	ldd	r24, Y+2	; 0x02
 222:	28 2f       	mov	r18, r24
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	3e 83       	std	Y+6, r19	; 0x06
 228:	2d 83       	std	Y+5, r18	; 0x05
 22a:	8d 81       	ldd	r24, Y+5	; 0x05
 22c:	9e 81       	ldd	r25, Y+6	; 0x06
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	91 05       	cpc	r25, r1
 232:	e1 f0       	breq	.+56     	; 0x26c <DIO_enuGetPortVal+0x72>
 234:	2d 81       	ldd	r18, Y+5	; 0x05
 236:	3e 81       	ldd	r19, Y+6	; 0x06
 238:	22 30       	cpi	r18, 0x02	; 2
 23a:	31 05       	cpc	r19, r1
 23c:	2c f4       	brge	.+10     	; 0x248 <DIO_enuGetPortVal+0x4e>
 23e:	8d 81       	ldd	r24, Y+5	; 0x05
 240:	9e 81       	ldd	r25, Y+6	; 0x06
 242:	00 97       	sbiw	r24, 0x00	; 0
 244:	61 f0       	breq	.+24     	; 0x25e <DIO_enuGetPortVal+0x64>
 246:	26 c0       	rjmp	.+76     	; 0x294 <DIO_enuGetPortVal+0x9a>
 248:	2d 81       	ldd	r18, Y+5	; 0x05
 24a:	3e 81       	ldd	r19, Y+6	; 0x06
 24c:	22 30       	cpi	r18, 0x02	; 2
 24e:	31 05       	cpc	r19, r1
 250:	a1 f0       	breq	.+40     	; 0x27a <DIO_enuGetPortVal+0x80>
 252:	8d 81       	ldd	r24, Y+5	; 0x05
 254:	9e 81       	ldd	r25, Y+6	; 0x06
 256:	83 30       	cpi	r24, 0x03	; 3
 258:	91 05       	cpc	r25, r1
 25a:	b1 f0       	breq	.+44     	; 0x288 <DIO_enuGetPortVal+0x8e>
 25c:	1b c0       	rjmp	.+54     	; 0x294 <DIO_enuGetPortVal+0x9a>
			{
				case DIO_PORTA:
				 *Copy_pu8Value=PINA;
 25e:	e9 e3       	ldi	r30, 0x39	; 57
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	eb 81       	ldd	r30, Y+3	; 0x03
 266:	fc 81       	ldd	r31, Y+4	; 0x04
 268:	80 83       	st	Z, r24
 26a:	14 c0       	rjmp	.+40     	; 0x294 <DIO_enuGetPortVal+0x9a>
				break;

				case DIO_PORTB:
				 *Copy_pu8Value=PINB;
 26c:	e6 e3       	ldi	r30, 0x36	; 54
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	eb 81       	ldd	r30, Y+3	; 0x03
 274:	fc 81       	ldd	r31, Y+4	; 0x04
 276:	80 83       	st	Z, r24
 278:	0d c0       	rjmp	.+26     	; 0x294 <DIO_enuGetPortVal+0x9a>
				break;

				case DIO_PORTC:
				 *Copy_pu8Value=PINC;
 27a:	e3 e3       	ldi	r30, 0x33	; 51
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	eb 81       	ldd	r30, Y+3	; 0x03
 282:	fc 81       	ldd	r31, Y+4	; 0x04
 284:	80 83       	st	Z, r24
 286:	06 c0       	rjmp	.+12     	; 0x294 <DIO_enuGetPortVal+0x9a>
				break;

				case DIO_PORTD:
			    *Copy_pu8Value=PIND;
 288:	e0 e3       	ldi	r30, 0x30	; 48
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	eb 81       	ldd	r30, Y+3	; 0x03
 290:	fc 81       	ldd	r31, Y+4	; 0x04
 292:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	89 83       	std	Y+1, r24	; 0x01
 298:	05 c0       	rjmp	.+10     	; 0x2a4 <DIO_enuGetPortVal+0xaa>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	89 83       	std	Y+1, r24	; 0x01
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_enuGetPortVal+0xaa>
		}
 }
 else{
	 Local_enuErrorState = ES_NULL_POINTER;
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	89 83       	std	Y+1, r24	; 0x01
 }
		return Local_enuErrorState;
 2a4:	89 81       	ldd	r24, Y+1	; 0x01


}
 2a6:	26 96       	adiw	r28, 0x06	; 6
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	f8 94       	cli
 2ac:	de bf       	out	0x3e, r29	; 62
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	cd bf       	out	0x3d, r28	; 61
 2b2:	cf 91       	pop	r28
 2b4:	df 91       	pop	r29
 2b6:	08 95       	ret

000002b8 <DIO_enuTogPortVal>:
ES_t DIO_enuTogPortVal(u8 Copy_u8PortID){
 2b8:	df 93       	push	r29
 2ba:	cf 93       	push	r28
 2bc:	00 d0       	rcall	.+0      	; 0x2be <DIO_enuTogPortVal+0x6>
 2be:	00 d0       	rcall	.+0      	; 0x2c0 <DIO_enuTogPortVal+0x8>
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
 2c4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
 2c6:	19 82       	std	Y+1, r1	; 0x01

			if(Copy_u8PortID <= DIO_PORTD)
 2c8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ca:	84 30       	cpi	r24, 0x04	; 4
 2cc:	08 f0       	brcs	.+2      	; 0x2d0 <DIO_enuTogPortVal+0x18>
 2ce:	41 c0       	rjmp	.+130    	; 0x352 <DIO_enuTogPortVal+0x9a>
			{
				switch(Copy_u8PortID)
 2d0:	8a 81       	ldd	r24, Y+2	; 0x02
 2d2:	28 2f       	mov	r18, r24
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	3c 83       	std	Y+4, r19	; 0x04
 2d8:	2b 83       	std	Y+3, r18	; 0x03
 2da:	8b 81       	ldd	r24, Y+3	; 0x03
 2dc:	9c 81       	ldd	r25, Y+4	; 0x04
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	91 05       	cpc	r25, r1
 2e2:	e9 f0       	breq	.+58     	; 0x31e <DIO_enuTogPortVal+0x66>
 2e4:	2b 81       	ldd	r18, Y+3	; 0x03
 2e6:	3c 81       	ldd	r19, Y+4	; 0x04
 2e8:	22 30       	cpi	r18, 0x02	; 2
 2ea:	31 05       	cpc	r19, r1
 2ec:	2c f4       	brge	.+10     	; 0x2f8 <DIO_enuTogPortVal+0x40>
 2ee:	8b 81       	ldd	r24, Y+3	; 0x03
 2f0:	9c 81       	ldd	r25, Y+4	; 0x04
 2f2:	00 97       	sbiw	r24, 0x00	; 0
 2f4:	61 f0       	breq	.+24     	; 0x30e <DIO_enuTogPortVal+0x56>
 2f6:	2a c0       	rjmp	.+84     	; 0x34c <DIO_enuTogPortVal+0x94>
 2f8:	2b 81       	ldd	r18, Y+3	; 0x03
 2fa:	3c 81       	ldd	r19, Y+4	; 0x04
 2fc:	22 30       	cpi	r18, 0x02	; 2
 2fe:	31 05       	cpc	r19, r1
 300:	b1 f0       	breq	.+44     	; 0x32e <DIO_enuTogPortVal+0x76>
 302:	8b 81       	ldd	r24, Y+3	; 0x03
 304:	9c 81       	ldd	r25, Y+4	; 0x04
 306:	83 30       	cpi	r24, 0x03	; 3
 308:	91 05       	cpc	r25, r1
 30a:	c9 f0       	breq	.+50     	; 0x33e <DIO_enuTogPortVal+0x86>
 30c:	1f c0       	rjmp	.+62     	; 0x34c <DIO_enuTogPortVal+0x94>
				{
					case DIO_PORTA:
					 PORTA=~PORTA;
 30e:	ab e3       	ldi	r26, 0x3B	; 59
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	eb e3       	ldi	r30, 0x3B	; 59
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	80 95       	com	r24
 31a:	8c 93       	st	X, r24
 31c:	17 c0       	rjmp	.+46     	; 0x34c <DIO_enuTogPortVal+0x94>
					break;

					case DIO_PORTB:
					 PORTB=~PORTB;
 31e:	a8 e3       	ldi	r26, 0x38	; 56
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	e8 e3       	ldi	r30, 0x38	; 56
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	80 95       	com	r24
 32a:	8c 93       	st	X, r24
 32c:	0f c0       	rjmp	.+30     	; 0x34c <DIO_enuTogPortVal+0x94>
					break;

					case DIO_PORTC:
					 PORTC=~PORTC;
 32e:	a5 e3       	ldi	r26, 0x35	; 53
 330:	b0 e0       	ldi	r27, 0x00	; 0
 332:	e5 e3       	ldi	r30, 0x35	; 53
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	80 95       	com	r24
 33a:	8c 93       	st	X, r24
 33c:	07 c0       	rjmp	.+14     	; 0x34c <DIO_enuTogPortVal+0x94>
					break;

					case DIO_PORTD:
					 PORTD=~PORTD;
 33e:	a2 e3       	ldi	r26, 0x32	; 50
 340:	b0 e0       	ldi	r27, 0x00	; 0
 342:	e2 e3       	ldi	r30, 0x32	; 50
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	80 95       	com	r24
 34a:	8c 93       	st	X, r24
					break;
				}
				Local_enuErrorState = ES_OK;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	89 83       	std	Y+1, r24	; 0x01
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_enuTogPortVal+0x9e>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
 352:	83 e0       	ldi	r24, 0x03	; 3
 354:	89 83       	std	Y+1, r24	; 0x01
			}

			return Local_enuErrorState;
 356:	89 81       	ldd	r24, Y+1	; 0x01

}
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
 35e:	0f 90       	pop	r0
 360:	cf 91       	pop	r28
 362:	df 91       	pop	r29
 364:	08 95       	ret

00000366 <DIO_enuSetPinDirection>:


ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID, u8  Copy_u8Value){
 366:	df 93       	push	r29
 368:	cf 93       	push	r28
 36a:	00 d0       	rcall	.+0      	; 0x36c <DIO_enuSetPinDirection+0x6>
 36c:	00 d0       	rcall	.+0      	; 0x36e <DIO_enuSetPinDirection+0x8>
 36e:	00 d0       	rcall	.+0      	; 0x370 <DIO_enuSetPinDirection+0xa>
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
 374:	8a 83       	std	Y+2, r24	; 0x02
 376:	6b 83       	std	Y+3, r22	; 0x03
 378:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
 37a:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8PortID <= DIO_PORTD	&& Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT){
 37c:	8a 81       	ldd	r24, Y+2	; 0x02
 37e:	84 30       	cpi	r24, 0x04	; 4
 380:	08 f0       	brcs	.+2      	; 0x384 <DIO_enuSetPinDirection+0x1e>
 382:	d1 c0       	rjmp	.+418    	; 0x526 <DIO_enuSetPinDirection+0x1c0>
 384:	8b 81       	ldd	r24, Y+3	; 0x03
 386:	88 30       	cpi	r24, 0x08	; 8
 388:	08 f0       	brcs	.+2      	; 0x38c <DIO_enuSetPinDirection+0x26>
 38a:	cd c0       	rjmp	.+410    	; 0x526 <DIO_enuSetPinDirection+0x1c0>
 38c:	8c 81       	ldd	r24, Y+4	; 0x04
 38e:	82 30       	cpi	r24, 0x02	; 2
 390:	08 f0       	brcs	.+2      	; 0x394 <DIO_enuSetPinDirection+0x2e>
 392:	c9 c0       	rjmp	.+402    	; 0x526 <DIO_enuSetPinDirection+0x1c0>
	switch(Copy_u8PortID)
 394:	8a 81       	ldd	r24, Y+2	; 0x02
 396:	28 2f       	mov	r18, r24
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	3e 83       	std	Y+6, r19	; 0x06
 39c:	2d 83       	std	Y+5, r18	; 0x05
 39e:	6d 81       	ldd	r22, Y+5	; 0x05
 3a0:	7e 81       	ldd	r23, Y+6	; 0x06
 3a2:	61 30       	cpi	r22, 0x01	; 1
 3a4:	71 05       	cpc	r23, r1
 3a6:	09 f4       	brne	.+2      	; 0x3aa <DIO_enuSetPinDirection+0x44>
 3a8:	41 c0       	rjmp	.+130    	; 0x42c <DIO_enuSetPinDirection+0xc6>
 3aa:	8d 81       	ldd	r24, Y+5	; 0x05
 3ac:	9e 81       	ldd	r25, Y+6	; 0x06
 3ae:	82 30       	cpi	r24, 0x02	; 2
 3b0:	91 05       	cpc	r25, r1
 3b2:	34 f4       	brge	.+12     	; 0x3c0 <DIO_enuSetPinDirection+0x5a>
 3b4:	2d 81       	ldd	r18, Y+5	; 0x05
 3b6:	3e 81       	ldd	r19, Y+6	; 0x06
 3b8:	21 15       	cp	r18, r1
 3ba:	31 05       	cpc	r19, r1
 3bc:	71 f0       	breq	.+28     	; 0x3da <DIO_enuSetPinDirection+0x74>
 3be:	b0 c0       	rjmp	.+352    	; 0x520 <DIO_enuSetPinDirection+0x1ba>
 3c0:	6d 81       	ldd	r22, Y+5	; 0x05
 3c2:	7e 81       	ldd	r23, Y+6	; 0x06
 3c4:	62 30       	cpi	r22, 0x02	; 2
 3c6:	71 05       	cpc	r23, r1
 3c8:	09 f4       	brne	.+2      	; 0x3cc <DIO_enuSetPinDirection+0x66>
 3ca:	59 c0       	rjmp	.+178    	; 0x47e <DIO_enuSetPinDirection+0x118>
 3cc:	8d 81       	ldd	r24, Y+5	; 0x05
 3ce:	9e 81       	ldd	r25, Y+6	; 0x06
 3d0:	83 30       	cpi	r24, 0x03	; 3
 3d2:	91 05       	cpc	r25, r1
 3d4:	09 f4       	brne	.+2      	; 0x3d8 <DIO_enuSetPinDirection+0x72>
 3d6:	7c c0       	rjmp	.+248    	; 0x4d0 <DIO_enuSetPinDirection+0x16a>
 3d8:	a3 c0       	rjmp	.+326    	; 0x520 <DIO_enuSetPinDirection+0x1ba>
				{
					case DIO_PORTA:
						DDRA &=~(1 << Copy_u8PinID);
 3da:	aa e3       	ldi	r26, 0x3A	; 58
 3dc:	b0 e0       	ldi	r27, 0x00	; 0
 3de:	ea e3       	ldi	r30, 0x3A	; 58
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	48 2f       	mov	r20, r24
 3e6:	8b 81       	ldd	r24, Y+3	; 0x03
 3e8:	28 2f       	mov	r18, r24
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_enuSetPinDirection+0x90>
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	2a 95       	dec	r18
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_enuSetPinDirection+0x8c>
 3fa:	80 95       	com	r24
 3fc:	84 23       	and	r24, r20
 3fe:	8c 93       	st	X, r24
						DDRA |= (Copy_u8Value << Copy_u8PinID);
 400:	aa e3       	ldi	r26, 0x3A	; 58
 402:	b0 e0       	ldi	r27, 0x00	; 0
 404:	ea e3       	ldi	r30, 0x3A	; 58
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	48 2f       	mov	r20, r24
 40c:	8c 81       	ldd	r24, Y+4	; 0x04
 40e:	28 2f       	mov	r18, r24
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	8b 81       	ldd	r24, Y+3	; 0x03
 414:	88 2f       	mov	r24, r24
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	b9 01       	movw	r22, r18
 41a:	02 c0       	rjmp	.+4      	; 0x420 <DIO_enuSetPinDirection+0xba>
 41c:	66 0f       	add	r22, r22
 41e:	77 1f       	adc	r23, r23
 420:	8a 95       	dec	r24
 422:	e2 f7       	brpl	.-8      	; 0x41c <DIO_enuSetPinDirection+0xb6>
 424:	cb 01       	movw	r24, r22
 426:	84 2b       	or	r24, r20
 428:	8c 93       	st	X, r24
 42a:	7a c0       	rjmp	.+244    	; 0x520 <DIO_enuSetPinDirection+0x1ba>
					break;

					case DIO_PORTB:
						DDRB &=~(1 << Copy_u8PinID);
 42c:	a7 e3       	ldi	r26, 0x37	; 55
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	e7 e3       	ldi	r30, 0x37	; 55
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	48 2f       	mov	r20, r24
 438:	8b 81       	ldd	r24, Y+3	; 0x03
 43a:	28 2f       	mov	r18, r24
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_enuSetPinDirection+0xe2>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	2a 95       	dec	r18
 44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_enuSetPinDirection+0xde>
 44c:	80 95       	com	r24
 44e:	84 23       	and	r24, r20
 450:	8c 93       	st	X, r24
					    DDRB |= (Copy_u8Value << Copy_u8PinID);
 452:	a7 e3       	ldi	r26, 0x37	; 55
 454:	b0 e0       	ldi	r27, 0x00	; 0
 456:	e7 e3       	ldi	r30, 0x37	; 55
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	80 81       	ld	r24, Z
 45c:	48 2f       	mov	r20, r24
 45e:	8c 81       	ldd	r24, Y+4	; 0x04
 460:	28 2f       	mov	r18, r24
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	8b 81       	ldd	r24, Y+3	; 0x03
 466:	88 2f       	mov	r24, r24
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	b9 01       	movw	r22, r18
 46c:	02 c0       	rjmp	.+4      	; 0x472 <DIO_enuSetPinDirection+0x10c>
 46e:	66 0f       	add	r22, r22
 470:	77 1f       	adc	r23, r23
 472:	8a 95       	dec	r24
 474:	e2 f7       	brpl	.-8      	; 0x46e <DIO_enuSetPinDirection+0x108>
 476:	cb 01       	movw	r24, r22
 478:	84 2b       	or	r24, r20
 47a:	8c 93       	st	X, r24
 47c:	51 c0       	rjmp	.+162    	; 0x520 <DIO_enuSetPinDirection+0x1ba>
					break;

					case DIO_PORTC:
						DDRC &=~(1 << Copy_u8PinID);
 47e:	a4 e3       	ldi	r26, 0x34	; 52
 480:	b0 e0       	ldi	r27, 0x00	; 0
 482:	e4 e3       	ldi	r30, 0x34	; 52
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	80 81       	ld	r24, Z
 488:	48 2f       	mov	r20, r24
 48a:	8b 81       	ldd	r24, Y+3	; 0x03
 48c:	28 2f       	mov	r18, r24
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	02 c0       	rjmp	.+4      	; 0x49a <DIO_enuSetPinDirection+0x134>
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	2a 95       	dec	r18
 49c:	e2 f7       	brpl	.-8      	; 0x496 <DIO_enuSetPinDirection+0x130>
 49e:	80 95       	com	r24
 4a0:	84 23       	and	r24, r20
 4a2:	8c 93       	st	X, r24
						DDRC|= (Copy_u8Value << Copy_u8PinID);
 4a4:	a4 e3       	ldi	r26, 0x34	; 52
 4a6:	b0 e0       	ldi	r27, 0x00	; 0
 4a8:	e4 e3       	ldi	r30, 0x34	; 52
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	80 81       	ld	r24, Z
 4ae:	48 2f       	mov	r20, r24
 4b0:	8c 81       	ldd	r24, Y+4	; 0x04
 4b2:	28 2f       	mov	r18, r24
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	8b 81       	ldd	r24, Y+3	; 0x03
 4b8:	88 2f       	mov	r24, r24
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	b9 01       	movw	r22, r18
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_enuSetPinDirection+0x15e>
 4c0:	66 0f       	add	r22, r22
 4c2:	77 1f       	adc	r23, r23
 4c4:	8a 95       	dec	r24
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_enuSetPinDirection+0x15a>
 4c8:	cb 01       	movw	r24, r22
 4ca:	84 2b       	or	r24, r20
 4cc:	8c 93       	st	X, r24
 4ce:	28 c0       	rjmp	.+80     	; 0x520 <DIO_enuSetPinDirection+0x1ba>
					break;

					case DIO_PORTD:
						DDRD &=~(1 << Copy_u8PinID);
 4d0:	a1 e3       	ldi	r26, 0x31	; 49
 4d2:	b0 e0       	ldi	r27, 0x00	; 0
 4d4:	e1 e3       	ldi	r30, 0x31	; 49
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	80 81       	ld	r24, Z
 4da:	48 2f       	mov	r20, r24
 4dc:	8b 81       	ldd	r24, Y+3	; 0x03
 4de:	28 2f       	mov	r18, r24
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_enuSetPinDirection+0x186>
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	2a 95       	dec	r18
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_enuSetPinDirection+0x182>
 4f0:	80 95       	com	r24
 4f2:	84 23       	and	r24, r20
 4f4:	8c 93       	st	X, r24
						DDRD |= (Copy_u8Value << Copy_u8PinID);
 4f6:	a1 e3       	ldi	r26, 0x31	; 49
 4f8:	b0 e0       	ldi	r27, 0x00	; 0
 4fa:	e1 e3       	ldi	r30, 0x31	; 49
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	48 2f       	mov	r20, r24
 502:	8c 81       	ldd	r24, Y+4	; 0x04
 504:	28 2f       	mov	r18, r24
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	8b 81       	ldd	r24, Y+3	; 0x03
 50a:	88 2f       	mov	r24, r24
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	b9 01       	movw	r22, r18
 510:	02 c0       	rjmp	.+4      	; 0x516 <DIO_enuSetPinDirection+0x1b0>
 512:	66 0f       	add	r22, r22
 514:	77 1f       	adc	r23, r23
 516:	8a 95       	dec	r24
 518:	e2 f7       	brpl	.-8      	; 0x512 <DIO_enuSetPinDirection+0x1ac>
 51a:	cb 01       	movw	r24, r22
 51c:	84 2b       	or	r24, r20
 51e:	8c 93       	st	X, r24
					break;
				}
				Local_enuErrorState = ES_OK;
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	89 83       	std	Y+1, r24	; 0x01
 524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_enuSetPinDirection+0x1c4>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
 526:	83 e0       	ldi	r24, 0x03	; 3
 528:	89 83       	std	Y+1, r24	; 0x01
			}

			return Local_enuErrorState;
 52a:	89 81       	ldd	r24, Y+1	; 0x01

}
 52c:	26 96       	adiw	r28, 0x06	; 6
 52e:	0f b6       	in	r0, 0x3f	; 63
 530:	f8 94       	cli
 532:	de bf       	out	0x3e, r29	; 62
 534:	0f be       	out	0x3f, r0	; 63
 536:	cd bf       	out	0x3d, r28	; 61
 538:	cf 91       	pop	r28
 53a:	df 91       	pop	r29
 53c:	08 95       	ret

0000053e <DIO_enuSetPinVal>:

ES_t DIO_enuSetPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID, u8 Copy_u8Value){
 53e:	df 93       	push	r29
 540:	cf 93       	push	r28
 542:	00 d0       	rcall	.+0      	; 0x544 <DIO_enuSetPinVal+0x6>
 544:	00 d0       	rcall	.+0      	; 0x546 <DIO_enuSetPinVal+0x8>
 546:	00 d0       	rcall	.+0      	; 0x548 <DIO_enuSetPinVal+0xa>
 548:	cd b7       	in	r28, 0x3d	; 61
 54a:	de b7       	in	r29, 0x3e	; 62
 54c:	8a 83       	std	Y+2, r24	; 0x02
 54e:	6b 83       	std	Y+3, r22	; 0x03
 550:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
 552:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_PORTD	&& Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT){
 554:	8a 81       	ldd	r24, Y+2	; 0x02
 556:	84 30       	cpi	r24, 0x04	; 4
 558:	08 f0       	brcs	.+2      	; 0x55c <DIO_enuSetPinVal+0x1e>
 55a:	d1 c0       	rjmp	.+418    	; 0x6fe <DIO_enuSetPinVal+0x1c0>
 55c:	8b 81       	ldd	r24, Y+3	; 0x03
 55e:	88 30       	cpi	r24, 0x08	; 8
 560:	08 f0       	brcs	.+2      	; 0x564 <DIO_enuSetPinVal+0x26>
 562:	cd c0       	rjmp	.+410    	; 0x6fe <DIO_enuSetPinVal+0x1c0>
 564:	8c 81       	ldd	r24, Y+4	; 0x04
 566:	82 30       	cpi	r24, 0x02	; 2
 568:	08 f0       	brcs	.+2      	; 0x56c <DIO_enuSetPinVal+0x2e>
 56a:	c9 c0       	rjmp	.+402    	; 0x6fe <DIO_enuSetPinVal+0x1c0>
		switch(Copy_u8PortID)
 56c:	8a 81       	ldd	r24, Y+2	; 0x02
 56e:	28 2f       	mov	r18, r24
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	3e 83       	std	Y+6, r19	; 0x06
 574:	2d 83       	std	Y+5, r18	; 0x05
 576:	6d 81       	ldd	r22, Y+5	; 0x05
 578:	7e 81       	ldd	r23, Y+6	; 0x06
 57a:	61 30       	cpi	r22, 0x01	; 1
 57c:	71 05       	cpc	r23, r1
 57e:	09 f4       	brne	.+2      	; 0x582 <DIO_enuSetPinVal+0x44>
 580:	41 c0       	rjmp	.+130    	; 0x604 <DIO_enuSetPinVal+0xc6>
 582:	8d 81       	ldd	r24, Y+5	; 0x05
 584:	9e 81       	ldd	r25, Y+6	; 0x06
 586:	82 30       	cpi	r24, 0x02	; 2
 588:	91 05       	cpc	r25, r1
 58a:	34 f4       	brge	.+12     	; 0x598 <DIO_enuSetPinVal+0x5a>
 58c:	2d 81       	ldd	r18, Y+5	; 0x05
 58e:	3e 81       	ldd	r19, Y+6	; 0x06
 590:	21 15       	cp	r18, r1
 592:	31 05       	cpc	r19, r1
 594:	71 f0       	breq	.+28     	; 0x5b2 <DIO_enuSetPinVal+0x74>
 596:	b0 c0       	rjmp	.+352    	; 0x6f8 <DIO_enuSetPinVal+0x1ba>
 598:	6d 81       	ldd	r22, Y+5	; 0x05
 59a:	7e 81       	ldd	r23, Y+6	; 0x06
 59c:	62 30       	cpi	r22, 0x02	; 2
 59e:	71 05       	cpc	r23, r1
 5a0:	09 f4       	brne	.+2      	; 0x5a4 <DIO_enuSetPinVal+0x66>
 5a2:	59 c0       	rjmp	.+178    	; 0x656 <DIO_enuSetPinVal+0x118>
 5a4:	8d 81       	ldd	r24, Y+5	; 0x05
 5a6:	9e 81       	ldd	r25, Y+6	; 0x06
 5a8:	83 30       	cpi	r24, 0x03	; 3
 5aa:	91 05       	cpc	r25, r1
 5ac:	09 f4       	brne	.+2      	; 0x5b0 <DIO_enuSetPinVal+0x72>
 5ae:	7c c0       	rjmp	.+248    	; 0x6a8 <DIO_enuSetPinVal+0x16a>
 5b0:	a3 c0       	rjmp	.+326    	; 0x6f8 <DIO_enuSetPinVal+0x1ba>
					{
						case DIO_PORTA:
							PORTA &=~(1 << Copy_u8PinID);
 5b2:	ab e3       	ldi	r26, 0x3B	; 59
 5b4:	b0 e0       	ldi	r27, 0x00	; 0
 5b6:	eb e3       	ldi	r30, 0x3B	; 59
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	80 81       	ld	r24, Z
 5bc:	48 2f       	mov	r20, r24
 5be:	8b 81       	ldd	r24, Y+3	; 0x03
 5c0:	28 2f       	mov	r18, r24
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_enuSetPinVal+0x90>
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	2a 95       	dec	r18
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_enuSetPinVal+0x8c>
 5d2:	80 95       	com	r24
 5d4:	84 23       	and	r24, r20
 5d6:	8c 93       	st	X, r24
							PORTA |= (Copy_u8Value << Copy_u8PinID);
 5d8:	ab e3       	ldi	r26, 0x3B	; 59
 5da:	b0 e0       	ldi	r27, 0x00	; 0
 5dc:	eb e3       	ldi	r30, 0x3B	; 59
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	80 81       	ld	r24, Z
 5e2:	48 2f       	mov	r20, r24
 5e4:	8c 81       	ldd	r24, Y+4	; 0x04
 5e6:	28 2f       	mov	r18, r24
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	8b 81       	ldd	r24, Y+3	; 0x03
 5ec:	88 2f       	mov	r24, r24
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	b9 01       	movw	r22, r18
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <DIO_enuSetPinVal+0xba>
 5f4:	66 0f       	add	r22, r22
 5f6:	77 1f       	adc	r23, r23
 5f8:	8a 95       	dec	r24
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <DIO_enuSetPinVal+0xb6>
 5fc:	cb 01       	movw	r24, r22
 5fe:	84 2b       	or	r24, r20
 600:	8c 93       	st	X, r24
 602:	7a c0       	rjmp	.+244    	; 0x6f8 <DIO_enuSetPinVal+0x1ba>
						break;

						case DIO_PORTB:
							PORTB &=~(1 << Copy_u8PinID);
 604:	a8 e3       	ldi	r26, 0x38	; 56
 606:	b0 e0       	ldi	r27, 0x00	; 0
 608:	e8 e3       	ldi	r30, 0x38	; 56
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	80 81       	ld	r24, Z
 60e:	48 2f       	mov	r20, r24
 610:	8b 81       	ldd	r24, Y+3	; 0x03
 612:	28 2f       	mov	r18, r24
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	02 c0       	rjmp	.+4      	; 0x620 <DIO_enuSetPinVal+0xe2>
 61c:	88 0f       	add	r24, r24
 61e:	99 1f       	adc	r25, r25
 620:	2a 95       	dec	r18
 622:	e2 f7       	brpl	.-8      	; 0x61c <DIO_enuSetPinVal+0xde>
 624:	80 95       	com	r24
 626:	84 23       	and	r24, r20
 628:	8c 93       	st	X, r24
							PORTB |= (Copy_u8Value << Copy_u8PinID);
 62a:	a8 e3       	ldi	r26, 0x38	; 56
 62c:	b0 e0       	ldi	r27, 0x00	; 0
 62e:	e8 e3       	ldi	r30, 0x38	; 56
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	80 81       	ld	r24, Z
 634:	48 2f       	mov	r20, r24
 636:	8c 81       	ldd	r24, Y+4	; 0x04
 638:	28 2f       	mov	r18, r24
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	8b 81       	ldd	r24, Y+3	; 0x03
 63e:	88 2f       	mov	r24, r24
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	b9 01       	movw	r22, r18
 644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_enuSetPinVal+0x10c>
 646:	66 0f       	add	r22, r22
 648:	77 1f       	adc	r23, r23
 64a:	8a 95       	dec	r24
 64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_enuSetPinVal+0x108>
 64e:	cb 01       	movw	r24, r22
 650:	84 2b       	or	r24, r20
 652:	8c 93       	st	X, r24
 654:	51 c0       	rjmp	.+162    	; 0x6f8 <DIO_enuSetPinVal+0x1ba>
						break;

						case DIO_PORTC:
							PORTC &=~(1 << Copy_u8PinID);
 656:	a5 e3       	ldi	r26, 0x35	; 53
 658:	b0 e0       	ldi	r27, 0x00	; 0
 65a:	e5 e3       	ldi	r30, 0x35	; 53
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	80 81       	ld	r24, Z
 660:	48 2f       	mov	r20, r24
 662:	8b 81       	ldd	r24, Y+3	; 0x03
 664:	28 2f       	mov	r18, r24
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	02 c0       	rjmp	.+4      	; 0x672 <DIO_enuSetPinVal+0x134>
 66e:	88 0f       	add	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	2a 95       	dec	r18
 674:	e2 f7       	brpl	.-8      	; 0x66e <DIO_enuSetPinVal+0x130>
 676:	80 95       	com	r24
 678:	84 23       	and	r24, r20
 67a:	8c 93       	st	X, r24
							PORTC|= (Copy_u8Value << Copy_u8PinID);
 67c:	a5 e3       	ldi	r26, 0x35	; 53
 67e:	b0 e0       	ldi	r27, 0x00	; 0
 680:	e5 e3       	ldi	r30, 0x35	; 53
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	80 81       	ld	r24, Z
 686:	48 2f       	mov	r20, r24
 688:	8c 81       	ldd	r24, Y+4	; 0x04
 68a:	28 2f       	mov	r18, r24
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	8b 81       	ldd	r24, Y+3	; 0x03
 690:	88 2f       	mov	r24, r24
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	b9 01       	movw	r22, r18
 696:	02 c0       	rjmp	.+4      	; 0x69c <DIO_enuSetPinVal+0x15e>
 698:	66 0f       	add	r22, r22
 69a:	77 1f       	adc	r23, r23
 69c:	8a 95       	dec	r24
 69e:	e2 f7       	brpl	.-8      	; 0x698 <DIO_enuSetPinVal+0x15a>
 6a0:	cb 01       	movw	r24, r22
 6a2:	84 2b       	or	r24, r20
 6a4:	8c 93       	st	X, r24
 6a6:	28 c0       	rjmp	.+80     	; 0x6f8 <DIO_enuSetPinVal+0x1ba>
						break;

						case DIO_PORTD:
							PORTD &=~(1 << Copy_u8PinID);
 6a8:	a2 e3       	ldi	r26, 0x32	; 50
 6aa:	b0 e0       	ldi	r27, 0x00	; 0
 6ac:	e2 e3       	ldi	r30, 0x32	; 50
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	80 81       	ld	r24, Z
 6b2:	48 2f       	mov	r20, r24
 6b4:	8b 81       	ldd	r24, Y+3	; 0x03
 6b6:	28 2f       	mov	r18, r24
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <DIO_enuSetPinVal+0x186>
 6c0:	88 0f       	add	r24, r24
 6c2:	99 1f       	adc	r25, r25
 6c4:	2a 95       	dec	r18
 6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <DIO_enuSetPinVal+0x182>
 6c8:	80 95       	com	r24
 6ca:	84 23       	and	r24, r20
 6cc:	8c 93       	st	X, r24
							PORTD |= (Copy_u8Value << Copy_u8PinID);
 6ce:	a2 e3       	ldi	r26, 0x32	; 50
 6d0:	b0 e0       	ldi	r27, 0x00	; 0
 6d2:	e2 e3       	ldi	r30, 0x32	; 50
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	80 81       	ld	r24, Z
 6d8:	48 2f       	mov	r20, r24
 6da:	8c 81       	ldd	r24, Y+4	; 0x04
 6dc:	28 2f       	mov	r18, r24
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	8b 81       	ldd	r24, Y+3	; 0x03
 6e2:	88 2f       	mov	r24, r24
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	b9 01       	movw	r22, r18
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <DIO_enuSetPinVal+0x1b0>
 6ea:	66 0f       	add	r22, r22
 6ec:	77 1f       	adc	r23, r23
 6ee:	8a 95       	dec	r24
 6f0:	e2 f7       	brpl	.-8      	; 0x6ea <DIO_enuSetPinVal+0x1ac>
 6f2:	cb 01       	movw	r24, r22
 6f4:	84 2b       	or	r24, r20
 6f6:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorState = ES_OK;
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	89 83       	std	Y+1, r24	; 0x01
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_enuSetPinVal+0x1c4>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
 6fe:	83 e0       	ldi	r24, 0x03	; 3
 700:	89 83       	std	Y+1, r24	; 0x01
				}

				return Local_enuErrorState;
 702:	89 81       	ldd	r24, Y+1	; 0x01
}
 704:	26 96       	adiw	r28, 0x06	; 6
 706:	0f b6       	in	r0, 0x3f	; 63
 708:	f8 94       	cli
 70a:	de bf       	out	0x3e, r29	; 62
 70c:	0f be       	out	0x3f, r0	; 63
 70e:	cd bf       	out	0x3d, r28	; 61
 710:	cf 91       	pop	r28
 712:	df 91       	pop	r29
 714:	08 95       	ret

00000716 <DIO_enuGetPinVal>:

ES_t DIO_enuGetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID,u8 *Copy_pu8Value){
 716:	df 93       	push	r29
 718:	cf 93       	push	r28
 71a:	cd b7       	in	r28, 0x3d	; 61
 71c:	de b7       	in	r29, 0x3e	; 62
 71e:	27 97       	sbiw	r28, 0x07	; 7
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	f8 94       	cli
 724:	de bf       	out	0x3e, r29	; 62
 726:	0f be       	out	0x3f, r0	; 63
 728:	cd bf       	out	0x3d, r28	; 61
 72a:	8a 83       	std	Y+2, r24	; 0x02
 72c:	6b 83       	std	Y+3, r22	; 0x03
 72e:	5d 83       	std	Y+5, r21	; 0x05
 730:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
 732:	19 82       	std	Y+1, r1	; 0x01

	 if(Copy_pu8Value!=NULL){
 734:	8c 81       	ldd	r24, Y+4	; 0x04
 736:	9d 81       	ldd	r25, Y+5	; 0x05
 738:	00 97       	sbiw	r24, 0x00	; 0
 73a:	09 f4       	brne	.+2      	; 0x73e <DIO_enuGetPinVal+0x28>
 73c:	7a c0       	rjmp	.+244    	; 0x832 <DIO_enuGetPinVal+0x11c>
			if(Copy_u8PortID <= DIO_PORTD)
 73e:	8a 81       	ldd	r24, Y+2	; 0x02
 740:	84 30       	cpi	r24, 0x04	; 4
 742:	08 f0       	brcs	.+2      	; 0x746 <DIO_enuGetPinVal+0x30>
 744:	73 c0       	rjmp	.+230    	; 0x82c <DIO_enuGetPinVal+0x116>
			{
				switch(Copy_u8PortID)
 746:	8a 81       	ldd	r24, Y+2	; 0x02
 748:	28 2f       	mov	r18, r24
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	3f 83       	std	Y+7, r19	; 0x07
 74e:	2e 83       	std	Y+6, r18	; 0x06
 750:	4e 81       	ldd	r20, Y+6	; 0x06
 752:	5f 81       	ldd	r21, Y+7	; 0x07
 754:	41 30       	cpi	r20, 0x01	; 1
 756:	51 05       	cpc	r21, r1
 758:	59 f1       	breq	.+86     	; 0x7b0 <DIO_enuGetPinVal+0x9a>
 75a:	8e 81       	ldd	r24, Y+6	; 0x06
 75c:	9f 81       	ldd	r25, Y+7	; 0x07
 75e:	82 30       	cpi	r24, 0x02	; 2
 760:	91 05       	cpc	r25, r1
 762:	34 f4       	brge	.+12     	; 0x770 <DIO_enuGetPinVal+0x5a>
 764:	2e 81       	ldd	r18, Y+6	; 0x06
 766:	3f 81       	ldd	r19, Y+7	; 0x07
 768:	21 15       	cp	r18, r1
 76a:	31 05       	cpc	r19, r1
 76c:	69 f0       	breq	.+26     	; 0x788 <DIO_enuGetPinVal+0x72>
 76e:	5b c0       	rjmp	.+182    	; 0x826 <DIO_enuGetPinVal+0x110>
 770:	4e 81       	ldd	r20, Y+6	; 0x06
 772:	5f 81       	ldd	r21, Y+7	; 0x07
 774:	42 30       	cpi	r20, 0x02	; 2
 776:	51 05       	cpc	r21, r1
 778:	79 f1       	breq	.+94     	; 0x7d8 <DIO_enuGetPinVal+0xc2>
 77a:	8e 81       	ldd	r24, Y+6	; 0x06
 77c:	9f 81       	ldd	r25, Y+7	; 0x07
 77e:	83 30       	cpi	r24, 0x03	; 3
 780:	91 05       	cpc	r25, r1
 782:	09 f4       	brne	.+2      	; 0x786 <DIO_enuGetPinVal+0x70>
 784:	3d c0       	rjmp	.+122    	; 0x800 <DIO_enuGetPinVal+0xea>
 786:	4f c0       	rjmp	.+158    	; 0x826 <DIO_enuGetPinVal+0x110>
				{
					case DIO_PORTA:
					 *Copy_pu8Value=((PINA >> Copy_u8PinID) & 1);
 788:	e9 e3       	ldi	r30, 0x39	; 57
 78a:	f0 e0       	ldi	r31, 0x00	; 0
 78c:	80 81       	ld	r24, Z
 78e:	28 2f       	mov	r18, r24
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	8b 81       	ldd	r24, Y+3	; 0x03
 794:	88 2f       	mov	r24, r24
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	a9 01       	movw	r20, r18
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <DIO_enuGetPinVal+0x8a>
 79c:	55 95       	asr	r21
 79e:	47 95       	ror	r20
 7a0:	8a 95       	dec	r24
 7a2:	e2 f7       	brpl	.-8      	; 0x79c <DIO_enuGetPinVal+0x86>
 7a4:	ca 01       	movw	r24, r20
 7a6:	81 70       	andi	r24, 0x01	; 1
 7a8:	ec 81       	ldd	r30, Y+4	; 0x04
 7aa:	fd 81       	ldd	r31, Y+5	; 0x05
 7ac:	80 83       	st	Z, r24
 7ae:	3b c0       	rjmp	.+118    	; 0x826 <DIO_enuGetPinVal+0x110>
					break;

					case DIO_PORTB:
					 *Copy_pu8Value=((PINB >> Copy_u8PinID) & 1);
 7b0:	e6 e3       	ldi	r30, 0x36	; 54
 7b2:	f0 e0       	ldi	r31, 0x00	; 0
 7b4:	80 81       	ld	r24, Z
 7b6:	28 2f       	mov	r18, r24
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	8b 81       	ldd	r24, Y+3	; 0x03
 7bc:	88 2f       	mov	r24, r24
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	a9 01       	movw	r20, r18
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <DIO_enuGetPinVal+0xb2>
 7c4:	55 95       	asr	r21
 7c6:	47 95       	ror	r20
 7c8:	8a 95       	dec	r24
 7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <DIO_enuGetPinVal+0xae>
 7cc:	ca 01       	movw	r24, r20
 7ce:	81 70       	andi	r24, 0x01	; 1
 7d0:	ec 81       	ldd	r30, Y+4	; 0x04
 7d2:	fd 81       	ldd	r31, Y+5	; 0x05
 7d4:	80 83       	st	Z, r24
 7d6:	27 c0       	rjmp	.+78     	; 0x826 <DIO_enuGetPinVal+0x110>
					break;

					case DIO_PORTC:
					 *Copy_pu8Value=((PINC >> Copy_u8PinID) & 1);
 7d8:	e3 e3       	ldi	r30, 0x33	; 51
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	80 81       	ld	r24, Z
 7de:	28 2f       	mov	r18, r24
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	8b 81       	ldd	r24, Y+3	; 0x03
 7e4:	88 2f       	mov	r24, r24
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	a9 01       	movw	r20, r18
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <DIO_enuGetPinVal+0xda>
 7ec:	55 95       	asr	r21
 7ee:	47 95       	ror	r20
 7f0:	8a 95       	dec	r24
 7f2:	e2 f7       	brpl	.-8      	; 0x7ec <DIO_enuGetPinVal+0xd6>
 7f4:	ca 01       	movw	r24, r20
 7f6:	81 70       	andi	r24, 0x01	; 1
 7f8:	ec 81       	ldd	r30, Y+4	; 0x04
 7fa:	fd 81       	ldd	r31, Y+5	; 0x05
 7fc:	80 83       	st	Z, r24
 7fe:	13 c0       	rjmp	.+38     	; 0x826 <DIO_enuGetPinVal+0x110>
					break;

					case DIO_PORTD:
				    *Copy_pu8Value=((PIND >> Copy_u8PinID) & 1);
 800:	e0 e3       	ldi	r30, 0x30	; 48
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	80 81       	ld	r24, Z
 806:	28 2f       	mov	r18, r24
 808:	30 e0       	ldi	r19, 0x00	; 0
 80a:	8b 81       	ldd	r24, Y+3	; 0x03
 80c:	88 2f       	mov	r24, r24
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	a9 01       	movw	r20, r18
 812:	02 c0       	rjmp	.+4      	; 0x818 <DIO_enuGetPinVal+0x102>
 814:	55 95       	asr	r21
 816:	47 95       	ror	r20
 818:	8a 95       	dec	r24
 81a:	e2 f7       	brpl	.-8      	; 0x814 <DIO_enuGetPinVal+0xfe>
 81c:	ca 01       	movw	r24, r20
 81e:	81 70       	andi	r24, 0x01	; 1
 820:	ec 81       	ldd	r30, Y+4	; 0x04
 822:	fd 81       	ldd	r31, Y+5	; 0x05
 824:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorState = ES_OK;
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	89 83       	std	Y+1, r24	; 0x01
 82a:	05 c0       	rjmp	.+10     	; 0x836 <DIO_enuGetPinVal+0x120>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
 82c:	83 e0       	ldi	r24, 0x03	; 3
 82e:	89 83       	std	Y+1, r24	; 0x01
 830:	02 c0       	rjmp	.+4      	; 0x836 <DIO_enuGetPinVal+0x120>
			}
	 }
	 else{
		 Local_enuErrorState = ES_NULL_POINTER;
 832:	82 e0       	ldi	r24, 0x02	; 2
 834:	89 83       	std	Y+1, r24	; 0x01
	 }
			return Local_enuErrorState;
 836:	89 81       	ldd	r24, Y+1	; 0x01


}
 838:	27 96       	adiw	r28, 0x07	; 7
 83a:	0f b6       	in	r0, 0x3f	; 63
 83c:	f8 94       	cli
 83e:	de bf       	out	0x3e, r29	; 62
 840:	0f be       	out	0x3f, r0	; 63
 842:	cd bf       	out	0x3d, r28	; 61
 844:	cf 91       	pop	r28
 846:	df 91       	pop	r29
 848:	08 95       	ret

0000084a <DIO_enuTogPinVal>:
ES_t DIO_enuTogPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID){
 84a:	df 93       	push	r29
 84c:	cf 93       	push	r28
 84e:	00 d0       	rcall	.+0      	; 0x850 <DIO_enuTogPinVal+0x6>
 850:	00 d0       	rcall	.+0      	; 0x852 <DIO_enuTogPinVal+0x8>
 852:	0f 92       	push	r0
 854:	cd b7       	in	r28, 0x3d	; 61
 856:	de b7       	in	r29, 0x3e	; 62
 858:	8a 83       	std	Y+2, r24	; 0x02
 85a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 85c:	19 82       	std	Y+1, r1	; 0x01

				if(Copy_u8PortID <= DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
 85e:	8a 81       	ldd	r24, Y+2	; 0x02
 860:	84 30       	cpi	r24, 0x04	; 4
 862:	08 f0       	brcs	.+2      	; 0x866 <__stack+0x7>
 864:	66 c0       	rjmp	.+204    	; 0x932 <__stack+0xd3>
 866:	8b 81       	ldd	r24, Y+3	; 0x03
 868:	88 30       	cpi	r24, 0x08	; 8
 86a:	08 f0       	brcs	.+2      	; 0x86e <__stack+0xf>
 86c:	62 c0       	rjmp	.+196    	; 0x932 <__stack+0xd3>
				{
					switch(Copy_u8PortID)
 86e:	8a 81       	ldd	r24, Y+2	; 0x02
 870:	28 2f       	mov	r18, r24
 872:	30 e0       	ldi	r19, 0x00	; 0
 874:	3d 83       	std	Y+5, r19	; 0x05
 876:	2c 83       	std	Y+4, r18	; 0x04
 878:	8c 81       	ldd	r24, Y+4	; 0x04
 87a:	9d 81       	ldd	r25, Y+5	; 0x05
 87c:	81 30       	cpi	r24, 0x01	; 1
 87e:	91 05       	cpc	r25, r1
 880:	49 f1       	breq	.+82     	; 0x8d4 <__stack+0x75>
 882:	2c 81       	ldd	r18, Y+4	; 0x04
 884:	3d 81       	ldd	r19, Y+5	; 0x05
 886:	22 30       	cpi	r18, 0x02	; 2
 888:	31 05       	cpc	r19, r1
 88a:	2c f4       	brge	.+10     	; 0x896 <__stack+0x37>
 88c:	8c 81       	ldd	r24, Y+4	; 0x04
 88e:	9d 81       	ldd	r25, Y+5	; 0x05
 890:	00 97       	sbiw	r24, 0x00	; 0
 892:	61 f0       	breq	.+24     	; 0x8ac <__stack+0x4d>
 894:	4b c0       	rjmp	.+150    	; 0x92c <__stack+0xcd>
 896:	2c 81       	ldd	r18, Y+4	; 0x04
 898:	3d 81       	ldd	r19, Y+5	; 0x05
 89a:	22 30       	cpi	r18, 0x02	; 2
 89c:	31 05       	cpc	r19, r1
 89e:	49 f1       	breq	.+82     	; 0x8f2 <__stack+0x93>
 8a0:	8c 81       	ldd	r24, Y+4	; 0x04
 8a2:	9d 81       	ldd	r25, Y+5	; 0x05
 8a4:	83 30       	cpi	r24, 0x03	; 3
 8a6:	91 05       	cpc	r25, r1
 8a8:	99 f1       	breq	.+102    	; 0x910 <__stack+0xb1>
 8aa:	40 c0       	rjmp	.+128    	; 0x92c <__stack+0xcd>
					{
						case DIO_PORTA:
						 PORTA^=(1 << Copy_u8PinID);
 8ac:	ab e3       	ldi	r26, 0x3B	; 59
 8ae:	b0 e0       	ldi	r27, 0x00	; 0
 8b0:	eb e3       	ldi	r30, 0x3B	; 59
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	80 81       	ld	r24, Z
 8b6:	48 2f       	mov	r20, r24
 8b8:	8b 81       	ldd	r24, Y+3	; 0x03
 8ba:	28 2f       	mov	r18, r24
 8bc:	30 e0       	ldi	r19, 0x00	; 0
 8be:	81 e0       	ldi	r24, 0x01	; 1
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	02 2e       	mov	r0, r18
 8c4:	02 c0       	rjmp	.+4      	; 0x8ca <__stack+0x6b>
 8c6:	88 0f       	add	r24, r24
 8c8:	99 1f       	adc	r25, r25
 8ca:	0a 94       	dec	r0
 8cc:	e2 f7       	brpl	.-8      	; 0x8c6 <__stack+0x67>
 8ce:	84 27       	eor	r24, r20
 8d0:	8c 93       	st	X, r24
 8d2:	2c c0       	rjmp	.+88     	; 0x92c <__stack+0xcd>
						break;

						case DIO_PORTB:
						 PORTB=(1 << Copy_u8PinID);
 8d4:	e8 e3       	ldi	r30, 0x38	; 56
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	8b 81       	ldd	r24, Y+3	; 0x03
 8da:	28 2f       	mov	r18, r24
 8dc:	30 e0       	ldi	r19, 0x00	; 0
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	02 2e       	mov	r0, r18
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <__stack+0x8b>
 8e6:	88 0f       	add	r24, r24
 8e8:	99 1f       	adc	r25, r25
 8ea:	0a 94       	dec	r0
 8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <__stack+0x87>
 8ee:	80 83       	st	Z, r24
 8f0:	1d c0       	rjmp	.+58     	; 0x92c <__stack+0xcd>
						break;

						case DIO_PORTC:
						 PORTC=(1 << Copy_u8PinID);
 8f2:	e5 e3       	ldi	r30, 0x35	; 53
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	8b 81       	ldd	r24, Y+3	; 0x03
 8f8:	28 2f       	mov	r18, r24
 8fa:	30 e0       	ldi	r19, 0x00	; 0
 8fc:	81 e0       	ldi	r24, 0x01	; 1
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	02 2e       	mov	r0, r18
 902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0xa9>
 904:	88 0f       	add	r24, r24
 906:	99 1f       	adc	r25, r25
 908:	0a 94       	dec	r0
 90a:	e2 f7       	brpl	.-8      	; 0x904 <__stack+0xa5>
 90c:	80 83       	st	Z, r24
 90e:	0e c0       	rjmp	.+28     	; 0x92c <__stack+0xcd>
						break;

						case DIO_PORTD:
						 PORTD=(1 << Copy_u8PinID);
 910:	e2 e3       	ldi	r30, 0x32	; 50
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	8b 81       	ldd	r24, Y+3	; 0x03
 916:	28 2f       	mov	r18, r24
 918:	30 e0       	ldi	r19, 0x00	; 0
 91a:	81 e0       	ldi	r24, 0x01	; 1
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	02 2e       	mov	r0, r18
 920:	02 c0       	rjmp	.+4      	; 0x926 <__stack+0xc7>
 922:	88 0f       	add	r24, r24
 924:	99 1f       	adc	r25, r25
 926:	0a 94       	dec	r0
 928:	e2 f7       	brpl	.-8      	; 0x922 <__stack+0xc3>
 92a:	80 83       	st	Z, r24
						break;
					}
					Local_enuErrorState = ES_OK;
 92c:	81 e0       	ldi	r24, 0x01	; 1
 92e:	89 83       	std	Y+1, r24	; 0x01
 930:	02 c0       	rjmp	.+4      	; 0x936 <__stack+0xd7>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
 932:	83 e0       	ldi	r24, 0x03	; 3
 934:	89 83       	std	Y+1, r24	; 0x01
				}

				return Local_enuErrorState;
 936:	89 81       	ldd	r24, Y+1	; 0x01

	}
 938:	0f 90       	pop	r0
 93a:	0f 90       	pop	r0
 93c:	0f 90       	pop	r0
 93e:	0f 90       	pop	r0
 940:	0f 90       	pop	r0
 942:	cf 91       	pop	r28
 944:	df 91       	pop	r29
 946:	08 95       	ret

00000948 <main>:
#include "DIO_int.h"
#include <util/delay.h>
#include "DIO_config.h"

int main(void)
{
 948:	df 93       	push	r29
 94a:	cf 93       	push	r28
 94c:	cd b7       	in	r28, 0x3d	; 61
 94e:	de b7       	in	r29, 0x3e	; 62
		DIO_enuInit();
 950:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_enuInit>
 954:	ff cf       	rjmp	.-2      	; 0x954 <main+0xc>

00000956 <_exit>:
 956:	f8 94       	cli

00000958 <__stop_program>:
 958:	ff cf       	rjmp	.-2      	; 0x958 <__stop_program>
