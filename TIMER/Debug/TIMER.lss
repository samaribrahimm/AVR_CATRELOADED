
TIMER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  000028a6  0000293a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00800186  00800186  00002a60  2**0
                  ALLOC
  3 .stab         0000291c  00000000  00000000  00002a60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000145e  00000000  00000000  0000537c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000067da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d4  00000000  00000000  0000695a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000218c  00000000  00000000  00006b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000122c  00000000  00000000  00008cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001103  00000000  00000000  00009ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000afec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ee  00000000  00000000  0000b18c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000932  00000000  00000000  0000b47a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bdac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <__vector_1>
       8:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__vector_2>
       c:	0c 94 82 0d 	jmp	0x1b04	; 0x1b04 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__vector_10>
      2c:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3a       	cpi	r26, 0xA7	; 167
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <main>
      8a:	0c 94 51 14 	jmp	0x28a2	; 0x28a2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 36 14 	jmp	0x286c	; 0x286c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 26 14 	jmp	0x284c	; 0x284c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 26 14 	jmp	0x284c	; 0x284c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 36 14 	jmp	0x286c	; 0x286c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 26 14 	jmp	0x284c	; 0x284c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 26 14 	jmp	0x284c	; 0x284c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__epilogue_restores__+0x18>

0000084a <__fixsfsi>:
     84a:	ac e0       	ldi	r26, 0x0C	; 12
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <__prologue_saves__+0x20>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	be 01       	movw	r22, r28
     864:	6b 5f       	subi	r22, 0xFB	; 251
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     86c:	8d 81       	ldd	r24, Y+5	; 0x05
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	61 f1       	breq	.+88     	; 0x8ca <__stack+0x6b>
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	50 f1       	brcs	.+84     	; 0x8ca <__stack+0x6b>
     876:	84 30       	cpi	r24, 0x04	; 4
     878:	21 f4       	brne	.+8      	; 0x882 <__stack+0x23>
     87a:	8e 81       	ldd	r24, Y+6	; 0x06
     87c:	88 23       	and	r24, r24
     87e:	51 f1       	breq	.+84     	; 0x8d4 <__stack+0x75>
     880:	2e c0       	rjmp	.+92     	; 0x8de <__stack+0x7f>
     882:	2f 81       	ldd	r18, Y+7	; 0x07
     884:	38 85       	ldd	r19, Y+8	; 0x08
     886:	37 fd       	sbrc	r19, 7
     888:	20 c0       	rjmp	.+64     	; 0x8ca <__stack+0x6b>
     88a:	6e 81       	ldd	r22, Y+6	; 0x06
     88c:	2f 31       	cpi	r18, 0x1F	; 31
     88e:	31 05       	cpc	r19, r1
     890:	1c f0       	brlt	.+6      	; 0x898 <__stack+0x39>
     892:	66 23       	and	r22, r22
     894:	f9 f0       	breq	.+62     	; 0x8d4 <__stack+0x75>
     896:	23 c0       	rjmp	.+70     	; 0x8de <__stack+0x7f>
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	82 1b       	sub	r24, r18
     89e:	93 0b       	sbc	r25, r19
     8a0:	29 85       	ldd	r18, Y+9	; 0x09
     8a2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8a6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <__stack+0x53>
     8aa:	56 95       	lsr	r21
     8ac:	47 95       	ror	r20
     8ae:	37 95       	ror	r19
     8b0:	27 95       	ror	r18
     8b2:	8a 95       	dec	r24
     8b4:	d2 f7       	brpl	.-12     	; 0x8aa <__stack+0x4b>
     8b6:	66 23       	and	r22, r22
     8b8:	b1 f0       	breq	.+44     	; 0x8e6 <__stack+0x87>
     8ba:	50 95       	com	r21
     8bc:	40 95       	com	r20
     8be:	30 95       	com	r19
     8c0:	21 95       	neg	r18
     8c2:	3f 4f       	sbci	r19, 0xFF	; 255
     8c4:	4f 4f       	sbci	r20, 0xFF	; 255
     8c6:	5f 4f       	sbci	r21, 0xFF	; 255
     8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <__stack+0x87>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <__stack+0x87>
     8d4:	2f ef       	ldi	r18, 0xFF	; 255
     8d6:	3f ef       	ldi	r19, 0xFF	; 255
     8d8:	4f ef       	ldi	r20, 0xFF	; 255
     8da:	5f e7       	ldi	r21, 0x7F	; 127
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <__stack+0x87>
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e8       	ldi	r21, 0x80	; 128
     8e6:	b9 01       	movw	r22, r18
     8e8:	ca 01       	movw	r24, r20
     8ea:	2c 96       	adiw	r28, 0x0c	; 12
     8ec:	e2 e0       	ldi	r30, 0x02	; 2
     8ee:	0c 94 46 14 	jmp	0x288c	; 0x288c <__epilogue_restores__+0x20>

000008f2 <__floatunsisf>:
     8f2:	a8 e0       	ldi	r26, 0x08	; 8
     8f4:	b0 e0       	ldi	r27, 0x00	; 0
     8f6:	ef e7       	ldi	r30, 0x7F	; 127
     8f8:	f4 e0       	ldi	r31, 0x04	; 4
     8fa:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__prologue_saves__+0x10>
     8fe:	7b 01       	movw	r14, r22
     900:	8c 01       	movw	r16, r24
     902:	61 15       	cp	r22, r1
     904:	71 05       	cpc	r23, r1
     906:	81 05       	cpc	r24, r1
     908:	91 05       	cpc	r25, r1
     90a:	19 f4       	brne	.+6      	; 0x912 <__floatunsisf+0x20>
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	89 83       	std	Y+1, r24	; 0x01
     910:	60 c0       	rjmp	.+192    	; 0x9d2 <__floatunsisf+0xe0>
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	89 83       	std	Y+1, r24	; 0x01
     916:	8e e1       	ldi	r24, 0x1E	; 30
     918:	c8 2e       	mov	r12, r24
     91a:	d1 2c       	mov	r13, r1
     91c:	dc 82       	std	Y+4, r13	; 0x04
     91e:	cb 82       	std	Y+3, r12	; 0x03
     920:	ed 82       	std	Y+5, r14	; 0x05
     922:	fe 82       	std	Y+6, r15	; 0x06
     924:	0f 83       	std	Y+7, r16	; 0x07
     926:	18 87       	std	Y+8, r17	; 0x08
     928:	c8 01       	movw	r24, r16
     92a:	b7 01       	movw	r22, r14
     92c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__clzsi2>
     930:	fc 01       	movw	r30, r24
     932:	31 97       	sbiw	r30, 0x01	; 1
     934:	f7 ff       	sbrs	r31, 7
     936:	3b c0       	rjmp	.+118    	; 0x9ae <__floatunsisf+0xbc>
     938:	22 27       	eor	r18, r18
     93a:	33 27       	eor	r19, r19
     93c:	2e 1b       	sub	r18, r30
     93e:	3f 0b       	sbc	r19, r31
     940:	57 01       	movw	r10, r14
     942:	68 01       	movw	r12, r16
     944:	02 2e       	mov	r0, r18
     946:	04 c0       	rjmp	.+8      	; 0x950 <__floatunsisf+0x5e>
     948:	d6 94       	lsr	r13
     94a:	c7 94       	ror	r12
     94c:	b7 94       	ror	r11
     94e:	a7 94       	ror	r10
     950:	0a 94       	dec	r0
     952:	d2 f7       	brpl	.-12     	; 0x948 <__floatunsisf+0x56>
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	a0 e0       	ldi	r26, 0x00	; 0
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	04 c0       	rjmp	.+8      	; 0x96e <__floatunsisf+0x7c>
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	aa 1f       	adc	r26, r26
     96c:	bb 1f       	adc	r27, r27
     96e:	2a 95       	dec	r18
     970:	d2 f7       	brpl	.-12     	; 0x966 <__floatunsisf+0x74>
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	a1 09       	sbc	r26, r1
     976:	b1 09       	sbc	r27, r1
     978:	8e 21       	and	r24, r14
     97a:	9f 21       	and	r25, r15
     97c:	a0 23       	and	r26, r16
     97e:	b1 23       	and	r27, r17
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	a1 05       	cpc	r26, r1
     984:	b1 05       	cpc	r27, r1
     986:	21 f0       	breq	.+8      	; 0x990 <__floatunsisf+0x9e>
     988:	41 e0       	ldi	r20, 0x01	; 1
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	4a 29       	or	r20, r10
     992:	5b 29       	or	r21, r11
     994:	6c 29       	or	r22, r12
     996:	7d 29       	or	r23, r13
     998:	4d 83       	std	Y+5, r20	; 0x05
     99a:	5e 83       	std	Y+6, r21	; 0x06
     99c:	6f 83       	std	Y+7, r22	; 0x07
     99e:	78 87       	std	Y+8, r23	; 0x08
     9a0:	8e e1       	ldi	r24, 0x1E	; 30
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	8e 1b       	sub	r24, r30
     9a6:	9f 0b       	sbc	r25, r31
     9a8:	9c 83       	std	Y+4, r25	; 0x04
     9aa:	8b 83       	std	Y+3, r24	; 0x03
     9ac:	12 c0       	rjmp	.+36     	; 0x9d2 <__floatunsisf+0xe0>
     9ae:	30 97       	sbiw	r30, 0x00	; 0
     9b0:	81 f0       	breq	.+32     	; 0x9d2 <__floatunsisf+0xe0>
     9b2:	0e 2e       	mov	r0, r30
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0xcc>
     9b6:	ee 0c       	add	r14, r14
     9b8:	ff 1c       	adc	r15, r15
     9ba:	00 1f       	adc	r16, r16
     9bc:	11 1f       	adc	r17, r17
     9be:	0a 94       	dec	r0
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0xc4>
     9c2:	ed 82       	std	Y+5, r14	; 0x05
     9c4:	fe 82       	std	Y+6, r15	; 0x06
     9c6:	0f 83       	std	Y+7, r16	; 0x07
     9c8:	18 87       	std	Y+8, r17	; 0x08
     9ca:	ce 1a       	sub	r12, r30
     9cc:	df 0a       	sbc	r13, r31
     9ce:	dc 82       	std	Y+4, r13	; 0x04
     9d0:	cb 82       	std	Y+3, r12	; 0x03
     9d2:	1a 82       	std	Y+2, r1	; 0x02
     9d4:	ce 01       	movw	r24, r28
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     9dc:	28 96       	adiw	r28, 0x08	; 8
     9de:	ea e0       	ldi	r30, 0x0A	; 10
     9e0:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__epilogue_restores__+0x10>

000009e4 <__clzsi2>:
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	7b 01       	movw	r14, r22
     9ee:	8c 01       	movw	r16, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	e8 16       	cp	r14, r24
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	f8 06       	cpc	r15, r24
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	08 07       	cpc	r16, r24
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	18 07       	cpc	r17, r24
     a00:	88 f4       	brcc	.+34     	; 0xa24 <__clzsi2+0x40>
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	e8 16       	cp	r14, r24
     a06:	f1 04       	cpc	r15, r1
     a08:	01 05       	cpc	r16, r1
     a0a:	11 05       	cpc	r17, r1
     a0c:	31 f0       	breq	.+12     	; 0xa1a <__clzsi2+0x36>
     a0e:	28 f0       	brcs	.+10     	; 0xa1a <__clzsi2+0x36>
     a10:	88 e0       	ldi	r24, 0x08	; 8
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	a0 e0       	ldi	r26, 0x00	; 0
     a16:	b0 e0       	ldi	r27, 0x00	; 0
     a18:	17 c0       	rjmp	.+46     	; 0xa48 <__clzsi2+0x64>
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	a0 e0       	ldi	r26, 0x00	; 0
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	12 c0       	rjmp	.+36     	; 0xa48 <__clzsi2+0x64>
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	e8 16       	cp	r14, r24
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	f8 06       	cpc	r15, r24
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	08 07       	cpc	r16, r24
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	18 07       	cpc	r17, r24
     a34:	28 f0       	brcs	.+10     	; 0xa40 <__clzsi2+0x5c>
     a36:	88 e1       	ldi	r24, 0x18	; 24
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	a0 e0       	ldi	r26, 0x00	; 0
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__clzsi2+0x64>
     a40:	80 e1       	ldi	r24, 0x10	; 16
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	20 e2       	ldi	r18, 0x20	; 32
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	28 1b       	sub	r18, r24
     a52:	39 0b       	sbc	r19, r25
     a54:	4a 0b       	sbc	r20, r26
     a56:	5b 0b       	sbc	r21, r27
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x7e>
     a5a:	16 95       	lsr	r17
     a5c:	07 95       	ror	r16
     a5e:	f7 94       	ror	r15
     a60:	e7 94       	ror	r14
     a62:	8a 95       	dec	r24
     a64:	d2 f7       	brpl	.-12     	; 0xa5a <__clzsi2+0x76>
     a66:	f7 01       	movw	r30, r14
     a68:	e8 59       	subi	r30, 0x98	; 152
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	80 81       	ld	r24, Z
     a6e:	28 1b       	sub	r18, r24
     a70:	31 09       	sbc	r19, r1
     a72:	41 09       	sbc	r20, r1
     a74:	51 09       	sbc	r21, r1
     a76:	c9 01       	movw	r24, r18
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	08 95       	ret

00000a82 <__pack_f>:
     a82:	df 92       	push	r13
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	fc 01       	movw	r30, r24
     a8e:	e4 80       	ldd	r14, Z+4	; 0x04
     a90:	f5 80       	ldd	r15, Z+5	; 0x05
     a92:	06 81       	ldd	r16, Z+6	; 0x06
     a94:	17 81       	ldd	r17, Z+7	; 0x07
     a96:	d1 80       	ldd	r13, Z+1	; 0x01
     a98:	80 81       	ld	r24, Z
     a9a:	82 30       	cpi	r24, 0x02	; 2
     a9c:	48 f4       	brcc	.+18     	; 0xab0 <__pack_f+0x2e>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	a0 e1       	ldi	r26, 0x10	; 16
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	e8 2a       	or	r14, r24
     aa8:	f9 2a       	or	r15, r25
     aaa:	0a 2b       	or	r16, r26
     aac:	1b 2b       	or	r17, r27
     aae:	a5 c0       	rjmp	.+330    	; 0xbfa <__pack_f+0x178>
     ab0:	84 30       	cpi	r24, 0x04	; 4
     ab2:	09 f4       	brne	.+2      	; 0xab6 <__pack_f+0x34>
     ab4:	9f c0       	rjmp	.+318    	; 0xbf4 <__pack_f+0x172>
     ab6:	82 30       	cpi	r24, 0x02	; 2
     ab8:	21 f4       	brne	.+8      	; 0xac2 <__pack_f+0x40>
     aba:	ee 24       	eor	r14, r14
     abc:	ff 24       	eor	r15, r15
     abe:	87 01       	movw	r16, r14
     ac0:	05 c0       	rjmp	.+10     	; 0xacc <__pack_f+0x4a>
     ac2:	e1 14       	cp	r14, r1
     ac4:	f1 04       	cpc	r15, r1
     ac6:	01 05       	cpc	r16, r1
     ac8:	11 05       	cpc	r17, r1
     aca:	19 f4       	brne	.+6      	; 0xad2 <__pack_f+0x50>
     acc:	e0 e0       	ldi	r30, 0x00	; 0
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	96 c0       	rjmp	.+300    	; 0xbfe <__pack_f+0x17c>
     ad2:	62 81       	ldd	r22, Z+2	; 0x02
     ad4:	73 81       	ldd	r23, Z+3	; 0x03
     ad6:	9f ef       	ldi	r25, 0xFF	; 255
     ad8:	62 38       	cpi	r22, 0x82	; 130
     ada:	79 07       	cpc	r23, r25
     adc:	0c f0       	brlt	.+2      	; 0xae0 <__pack_f+0x5e>
     ade:	5b c0       	rjmp	.+182    	; 0xb96 <__pack_f+0x114>
     ae0:	22 e8       	ldi	r18, 0x82	; 130
     ae2:	3f ef       	ldi	r19, 0xFF	; 255
     ae4:	26 1b       	sub	r18, r22
     ae6:	37 0b       	sbc	r19, r23
     ae8:	2a 31       	cpi	r18, 0x1A	; 26
     aea:	31 05       	cpc	r19, r1
     aec:	2c f0       	brlt	.+10     	; 0xaf8 <__pack_f+0x76>
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	40 e0       	ldi	r20, 0x00	; 0
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	2a c0       	rjmp	.+84     	; 0xb4c <__pack_f+0xca>
     af8:	b8 01       	movw	r22, r16
     afa:	a7 01       	movw	r20, r14
     afc:	02 2e       	mov	r0, r18
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__pack_f+0x86>
     b00:	76 95       	lsr	r23
     b02:	67 95       	ror	r22
     b04:	57 95       	ror	r21
     b06:	47 95       	ror	r20
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__pack_f+0x7e>
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	a0 e0       	ldi	r26, 0x00	; 0
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <__pack_f+0x9c>
     b16:	88 0f       	add	r24, r24
     b18:	99 1f       	adc	r25, r25
     b1a:	aa 1f       	adc	r26, r26
     b1c:	bb 1f       	adc	r27, r27
     b1e:	2a 95       	dec	r18
     b20:	d2 f7       	brpl	.-12     	; 0xb16 <__pack_f+0x94>
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	a1 09       	sbc	r26, r1
     b26:	b1 09       	sbc	r27, r1
     b28:	8e 21       	and	r24, r14
     b2a:	9f 21       	and	r25, r15
     b2c:	a0 23       	and	r26, r16
     b2e:	b1 23       	and	r27, r17
     b30:	00 97       	sbiw	r24, 0x00	; 0
     b32:	a1 05       	cpc	r26, r1
     b34:	b1 05       	cpc	r27, r1
     b36:	21 f0       	breq	.+8      	; 0xb40 <__pack_f+0xbe>
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	9a 01       	movw	r18, r20
     b42:	ab 01       	movw	r20, r22
     b44:	28 2b       	or	r18, r24
     b46:	39 2b       	or	r19, r25
     b48:	4a 2b       	or	r20, r26
     b4a:	5b 2b       	or	r21, r27
     b4c:	da 01       	movw	r26, r20
     b4e:	c9 01       	movw	r24, r18
     b50:	8f 77       	andi	r24, 0x7F	; 127
     b52:	90 70       	andi	r25, 0x00	; 0
     b54:	a0 70       	andi	r26, 0x00	; 0
     b56:	b0 70       	andi	r27, 0x00	; 0
     b58:	80 34       	cpi	r24, 0x40	; 64
     b5a:	91 05       	cpc	r25, r1
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	39 f4       	brne	.+14     	; 0xb70 <__pack_f+0xee>
     b62:	27 ff       	sbrs	r18, 7
     b64:	09 c0       	rjmp	.+18     	; 0xb78 <__pack_f+0xf6>
     b66:	20 5c       	subi	r18, 0xC0	; 192
     b68:	3f 4f       	sbci	r19, 0xFF	; 255
     b6a:	4f 4f       	sbci	r20, 0xFF	; 255
     b6c:	5f 4f       	sbci	r21, 0xFF	; 255
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__pack_f+0xf6>
     b70:	21 5c       	subi	r18, 0xC1	; 193
     b72:	3f 4f       	sbci	r19, 0xFF	; 255
     b74:	4f 4f       	sbci	r20, 0xFF	; 255
     b76:	5f 4f       	sbci	r21, 0xFF	; 255
     b78:	e0 e0       	ldi	r30, 0x00	; 0
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	3a 07       	cpc	r19, r26
     b82:	a0 e0       	ldi	r26, 0x00	; 0
     b84:	4a 07       	cpc	r20, r26
     b86:	a0 e4       	ldi	r26, 0x40	; 64
     b88:	5a 07       	cpc	r21, r26
     b8a:	10 f0       	brcs	.+4      	; 0xb90 <__pack_f+0x10e>
     b8c:	e1 e0       	ldi	r30, 0x01	; 1
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	79 01       	movw	r14, r18
     b92:	8a 01       	movw	r16, r20
     b94:	27 c0       	rjmp	.+78     	; 0xbe4 <__pack_f+0x162>
     b96:	60 38       	cpi	r22, 0x80	; 128
     b98:	71 05       	cpc	r23, r1
     b9a:	64 f5       	brge	.+88     	; 0xbf4 <__pack_f+0x172>
     b9c:	fb 01       	movw	r30, r22
     b9e:	e1 58       	subi	r30, 0x81	; 129
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	d8 01       	movw	r26, r16
     ba4:	c7 01       	movw	r24, r14
     ba6:	8f 77       	andi	r24, 0x7F	; 127
     ba8:	90 70       	andi	r25, 0x00	; 0
     baa:	a0 70       	andi	r26, 0x00	; 0
     bac:	b0 70       	andi	r27, 0x00	; 0
     bae:	80 34       	cpi	r24, 0x40	; 64
     bb0:	91 05       	cpc	r25, r1
     bb2:	a1 05       	cpc	r26, r1
     bb4:	b1 05       	cpc	r27, r1
     bb6:	39 f4       	brne	.+14     	; 0xbc6 <__pack_f+0x144>
     bb8:	e7 fe       	sbrs	r14, 7
     bba:	0d c0       	rjmp	.+26     	; 0xbd6 <__pack_f+0x154>
     bbc:	80 e4       	ldi	r24, 0x40	; 64
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <__pack_f+0x14c>
     bc6:	8f e3       	ldi	r24, 0x3F	; 63
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	a0 e0       	ldi	r26, 0x00	; 0
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e8 0e       	add	r14, r24
     bd0:	f9 1e       	adc	r15, r25
     bd2:	0a 1f       	adc	r16, r26
     bd4:	1b 1f       	adc	r17, r27
     bd6:	17 ff       	sbrs	r17, 7
     bd8:	05 c0       	rjmp	.+10     	; 0xbe4 <__pack_f+0x162>
     bda:	16 95       	lsr	r17
     bdc:	07 95       	ror	r16
     bde:	f7 94       	ror	r15
     be0:	e7 94       	ror	r14
     be2:	31 96       	adiw	r30, 0x01	; 1
     be4:	87 e0       	ldi	r24, 0x07	; 7
     be6:	16 95       	lsr	r17
     be8:	07 95       	ror	r16
     bea:	f7 94       	ror	r15
     bec:	e7 94       	ror	r14
     bee:	8a 95       	dec	r24
     bf0:	d1 f7       	brne	.-12     	; 0xbe6 <__pack_f+0x164>
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x17c>
     bf4:	ee 24       	eor	r14, r14
     bf6:	ff 24       	eor	r15, r15
     bf8:	87 01       	movw	r16, r14
     bfa:	ef ef       	ldi	r30, 0xFF	; 255
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	6e 2f       	mov	r22, r30
     c00:	67 95       	ror	r22
     c02:	66 27       	eor	r22, r22
     c04:	67 95       	ror	r22
     c06:	90 2f       	mov	r25, r16
     c08:	9f 77       	andi	r25, 0x7F	; 127
     c0a:	d7 94       	ror	r13
     c0c:	dd 24       	eor	r13, r13
     c0e:	d7 94       	ror	r13
     c10:	8e 2f       	mov	r24, r30
     c12:	86 95       	lsr	r24
     c14:	49 2f       	mov	r20, r25
     c16:	46 2b       	or	r20, r22
     c18:	58 2f       	mov	r21, r24
     c1a:	5d 29       	or	r21, r13
     c1c:	b7 01       	movw	r22, r14
     c1e:	ca 01       	movw	r24, r20
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	ff 90       	pop	r15
     c26:	ef 90       	pop	r14
     c28:	df 90       	pop	r13
     c2a:	08 95       	ret

00000c2c <__unpack_f>:
     c2c:	fc 01       	movw	r30, r24
     c2e:	db 01       	movw	r26, r22
     c30:	40 81       	ld	r20, Z
     c32:	51 81       	ldd	r21, Z+1	; 0x01
     c34:	22 81       	ldd	r18, Z+2	; 0x02
     c36:	62 2f       	mov	r22, r18
     c38:	6f 77       	andi	r22, 0x7F	; 127
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	22 1f       	adc	r18, r18
     c3e:	22 27       	eor	r18, r18
     c40:	22 1f       	adc	r18, r18
     c42:	93 81       	ldd	r25, Z+3	; 0x03
     c44:	89 2f       	mov	r24, r25
     c46:	88 0f       	add	r24, r24
     c48:	82 2b       	or	r24, r18
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	99 1f       	adc	r25, r25
     c50:	99 27       	eor	r25, r25
     c52:	99 1f       	adc	r25, r25
     c54:	11 96       	adiw	r26, 0x01	; 1
     c56:	9c 93       	st	X, r25
     c58:	11 97       	sbiw	r26, 0x01	; 1
     c5a:	21 15       	cp	r18, r1
     c5c:	31 05       	cpc	r19, r1
     c5e:	a9 f5       	brne	.+106    	; 0xcca <__unpack_f+0x9e>
     c60:	41 15       	cp	r20, r1
     c62:	51 05       	cpc	r21, r1
     c64:	61 05       	cpc	r22, r1
     c66:	71 05       	cpc	r23, r1
     c68:	11 f4       	brne	.+4      	; 0xc6e <__unpack_f+0x42>
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	37 c0       	rjmp	.+110    	; 0xcdc <__unpack_f+0xb0>
     c6e:	82 e8       	ldi	r24, 0x82	; 130
     c70:	9f ef       	ldi	r25, 0xFF	; 255
     c72:	13 96       	adiw	r26, 0x03	; 3
     c74:	9c 93       	st	X, r25
     c76:	8e 93       	st	-X, r24
     c78:	12 97       	sbiw	r26, 0x02	; 2
     c7a:	9a 01       	movw	r18, r20
     c7c:	ab 01       	movw	r20, r22
     c7e:	67 e0       	ldi	r22, 0x07	; 7
     c80:	22 0f       	add	r18, r18
     c82:	33 1f       	adc	r19, r19
     c84:	44 1f       	adc	r20, r20
     c86:	55 1f       	adc	r21, r21
     c88:	6a 95       	dec	r22
     c8a:	d1 f7       	brne	.-12     	; 0xc80 <__unpack_f+0x54>
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	8c 93       	st	X, r24
     c90:	0d c0       	rjmp	.+26     	; 0xcac <__unpack_f+0x80>
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	44 1f       	adc	r20, r20
     c98:	55 1f       	adc	r21, r21
     c9a:	12 96       	adiw	r26, 0x02	; 2
     c9c:	8d 91       	ld	r24, X+
     c9e:	9c 91       	ld	r25, X
     ca0:	13 97       	sbiw	r26, 0x03	; 3
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	13 96       	adiw	r26, 0x03	; 3
     ca6:	9c 93       	st	X, r25
     ca8:	8e 93       	st	-X, r24
     caa:	12 97       	sbiw	r26, 0x02	; 2
     cac:	20 30       	cpi	r18, 0x00	; 0
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	38 07       	cpc	r19, r24
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	48 07       	cpc	r20, r24
     cb6:	80 e4       	ldi	r24, 0x40	; 64
     cb8:	58 07       	cpc	r21, r24
     cba:	58 f3       	brcs	.-42     	; 0xc92 <__unpack_f+0x66>
     cbc:	14 96       	adiw	r26, 0x04	; 4
     cbe:	2d 93       	st	X+, r18
     cc0:	3d 93       	st	X+, r19
     cc2:	4d 93       	st	X+, r20
     cc4:	5c 93       	st	X, r21
     cc6:	17 97       	sbiw	r26, 0x07	; 7
     cc8:	08 95       	ret
     cca:	2f 3f       	cpi	r18, 0xFF	; 255
     ccc:	31 05       	cpc	r19, r1
     cce:	79 f4       	brne	.+30     	; 0xcee <__unpack_f+0xc2>
     cd0:	41 15       	cp	r20, r1
     cd2:	51 05       	cpc	r21, r1
     cd4:	61 05       	cpc	r22, r1
     cd6:	71 05       	cpc	r23, r1
     cd8:	19 f4       	brne	.+6      	; 0xce0 <__unpack_f+0xb4>
     cda:	84 e0       	ldi	r24, 0x04	; 4
     cdc:	8c 93       	st	X, r24
     cde:	08 95       	ret
     ce0:	64 ff       	sbrs	r22, 4
     ce2:	03 c0       	rjmp	.+6      	; 0xcea <__unpack_f+0xbe>
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	8c 93       	st	X, r24
     ce8:	12 c0       	rjmp	.+36     	; 0xd0e <__unpack_f+0xe2>
     cea:	1c 92       	st	X, r1
     cec:	10 c0       	rjmp	.+32     	; 0xd0e <__unpack_f+0xe2>
     cee:	2f 57       	subi	r18, 0x7F	; 127
     cf0:	30 40       	sbci	r19, 0x00	; 0
     cf2:	13 96       	adiw	r26, 0x03	; 3
     cf4:	3c 93       	st	X, r19
     cf6:	2e 93       	st	-X, r18
     cf8:	12 97       	sbiw	r26, 0x02	; 2
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	8c 93       	st	X, r24
     cfe:	87 e0       	ldi	r24, 0x07	; 7
     d00:	44 0f       	add	r20, r20
     d02:	55 1f       	adc	r21, r21
     d04:	66 1f       	adc	r22, r22
     d06:	77 1f       	adc	r23, r23
     d08:	8a 95       	dec	r24
     d0a:	d1 f7       	brne	.-12     	; 0xd00 <__unpack_f+0xd4>
     d0c:	70 64       	ori	r23, 0x40	; 64
     d0e:	14 96       	adiw	r26, 0x04	; 4
     d10:	4d 93       	st	X+, r20
     d12:	5d 93       	st	X+, r21
     d14:	6d 93       	st	X+, r22
     d16:	7c 93       	st	X, r23
     d18:	17 97       	sbiw	r26, 0x07	; 7
     d1a:	08 95       	ret

00000d1c <__fpcmp_parts_f>:
     d1c:	1f 93       	push	r17
     d1e:	dc 01       	movw	r26, r24
     d20:	fb 01       	movw	r30, r22
     d22:	9c 91       	ld	r25, X
     d24:	92 30       	cpi	r25, 0x02	; 2
     d26:	08 f4       	brcc	.+2      	; 0xd2a <__fpcmp_parts_f+0xe>
     d28:	47 c0       	rjmp	.+142    	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d2a:	80 81       	ld	r24, Z
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	08 f4       	brcc	.+2      	; 0xd32 <__fpcmp_parts_f+0x16>
     d30:	43 c0       	rjmp	.+134    	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d32:	94 30       	cpi	r25, 0x04	; 4
     d34:	51 f4       	brne	.+20     	; 0xd4a <__fpcmp_parts_f+0x2e>
     d36:	11 96       	adiw	r26, 0x01	; 1
     d38:	1c 91       	ld	r17, X
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	99 f5       	brne	.+102    	; 0xda4 <__fpcmp_parts_f+0x88>
     d3e:	81 81       	ldd	r24, Z+1	; 0x01
     d40:	68 2f       	mov	r22, r24
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	61 1b       	sub	r22, r17
     d46:	71 09       	sbc	r23, r1
     d48:	3f c0       	rjmp	.+126    	; 0xdc8 <__fpcmp_parts_f+0xac>
     d4a:	84 30       	cpi	r24, 0x04	; 4
     d4c:	21 f0       	breq	.+8      	; 0xd56 <__fpcmp_parts_f+0x3a>
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	31 f4       	brne	.+12     	; 0xd5e <__fpcmp_parts_f+0x42>
     d52:	82 30       	cpi	r24, 0x02	; 2
     d54:	b9 f1       	breq	.+110    	; 0xdc4 <__fpcmp_parts_f+0xa8>
     d56:	81 81       	ldd	r24, Z+1	; 0x01
     d58:	88 23       	and	r24, r24
     d5a:	89 f1       	breq	.+98     	; 0xdbe <__fpcmp_parts_f+0xa2>
     d5c:	2d c0       	rjmp	.+90     	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d5e:	11 96       	adiw	r26, 0x01	; 1
     d60:	1c 91       	ld	r17, X
     d62:	11 97       	sbiw	r26, 0x01	; 1
     d64:	82 30       	cpi	r24, 0x02	; 2
     d66:	f1 f0       	breq	.+60     	; 0xda4 <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	18 17       	cp	r17, r24
     d6c:	d9 f4       	brne	.+54     	; 0xda4 <__fpcmp_parts_f+0x88>
     d6e:	12 96       	adiw	r26, 0x02	; 2
     d70:	2d 91       	ld	r18, X+
     d72:	3c 91       	ld	r19, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	82 81       	ldd	r24, Z+2	; 0x02
     d78:	93 81       	ldd	r25, Z+3	; 0x03
     d7a:	82 17       	cp	r24, r18
     d7c:	93 07       	cpc	r25, r19
     d7e:	94 f0       	brlt	.+36     	; 0xda4 <__fpcmp_parts_f+0x88>
     d80:	28 17       	cp	r18, r24
     d82:	39 07       	cpc	r19, r25
     d84:	bc f0       	brlt	.+46     	; 0xdb4 <__fpcmp_parts_f+0x98>
     d86:	14 96       	adiw	r26, 0x04	; 4
     d88:	8d 91       	ld	r24, X+
     d8a:	9d 91       	ld	r25, X+
     d8c:	0d 90       	ld	r0, X+
     d8e:	bc 91       	ld	r27, X
     d90:	a0 2d       	mov	r26, r0
     d92:	24 81       	ldd	r18, Z+4	; 0x04
     d94:	35 81       	ldd	r19, Z+5	; 0x05
     d96:	46 81       	ldd	r20, Z+6	; 0x06
     d98:	57 81       	ldd	r21, Z+7	; 0x07
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	4a 07       	cpc	r20, r26
     da0:	5b 07       	cpc	r21, r27
     da2:	18 f4       	brcc	.+6      	; 0xdaa <__fpcmp_parts_f+0x8e>
     da4:	11 23       	and	r17, r17
     da6:	41 f0       	breq	.+16     	; 0xdb8 <__fpcmp_parts_f+0x9c>
     da8:	0a c0       	rjmp	.+20     	; 0xdbe <__fpcmp_parts_f+0xa2>
     daa:	82 17       	cp	r24, r18
     dac:	93 07       	cpc	r25, r19
     dae:	a4 07       	cpc	r26, r20
     db0:	b5 07       	cpc	r27, r21
     db2:	40 f4       	brcc	.+16     	; 0xdc4 <__fpcmp_parts_f+0xa8>
     db4:	11 23       	and	r17, r17
     db6:	19 f0       	breq	.+6      	; 0xdbe <__fpcmp_parts_f+0xa2>
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <__fpcmp_parts_f+0xac>
     dbe:	6f ef       	ldi	r22, 0xFF	; 255
     dc0:	7f ef       	ldi	r23, 0xFF	; 255
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <__fpcmp_parts_f+0xac>
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	cb 01       	movw	r24, r22
     dca:	1f 91       	pop	r17
     dcc:	08 95       	ret

00000dce <TIMER0_enuInit>:
volatile static void *TIMER0_Pvidparameter_CTC = NULL;

u32 Global_u32NumOvf=0;
u8 Global_u8Preload=0;
u32 TIMER0_f32OC0Val=0;
ES_t TIMER0_enuInit(void){
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	0f 92       	push	r0
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     dd8:	19 82       	std	Y+1, r1	; 0x01
	TCCR0&=0xB7; //mask bit for modes
     dda:	a3 e5       	ldi	r26, 0x53	; 83
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e3 e5       	ldi	r30, 0x53	; 83
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	87 7b       	andi	r24, 0xB7	; 183
     de6:	8c 93       	st	X, r24

#if  TIMER_MODE==OVF
	TCCR0 &= ~(1 << WGM00);
     de8:	a3 e5       	ldi	r26, 0x53	; 83
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e3 e5       	ldi	r30, 0x53	; 83
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	8f 7b       	andi	r24, 0xBF	; 191
     df4:	8c 93       	st	X, r24
	TCCR0 &= ~(1 << WGM01);
     df6:	a3 e5       	ldi	r26, 0x53	; 83
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e3 e5       	ldi	r30, 0x53	; 83
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	87 7f       	andi	r24, 0xF7	; 247
     e02:	8c 93       	st	X, r24
	 TCCR0 |= (1 << WGM01);
#else
#error "TIMER0_mode has a wrong config"
#endif

	 TCCR0&=0xf8; //mask bit for prescaler
     e04:	a3 e5       	ldi	r26, 0x53	; 83
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e3 e5       	ldi	r30, 0x53	; 83
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	88 7f       	andi	r24, 0xF8	; 248
     e10:	8c 93       	st	X, r24

#if   TIMER_PRES == PRES_1024
	 TCCR0 |= (1<<CS02);
     e12:	a3 e5       	ldi	r26, 0x53	; 83
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e3 e5       	ldi	r30, 0x53	; 83
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	84 60       	ori	r24, 0x04	; 4
     e1e:	8c 93       	st	X, r24
	 TCCR0 &= ~(1<<CS01);
     e20:	a3 e5       	ldi	r26, 0x53	; 83
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e3 e5       	ldi	r30, 0x53	; 83
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	8d 7f       	andi	r24, 0xFD	; 253
     e2c:	8c 93       	st	X, r24
	 TCCR0 |= (1<<CS00);
     e2e:	a3 e5       	ldi	r26, 0x53	; 83
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e3 e5       	ldi	r30, 0x53	; 83
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	81 60       	ori	r24, 0x01	; 1
     e3a:	8c 93       	st	X, r24
	 TCCR0 |= (1<<CS01);
	 TCCR0 |= (1<<CS00);
#else
#error "TIMER0_PRES has a wrong config"
#endif
	 TCCR0&=0xCF; //mask bit for oc_mode
     e3c:	a3 e5       	ldi	r26, 0x53	; 83
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e3 e5       	ldi	r30, 0x53	; 83
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	8f 7c       	andi	r24, 0xCF	; 207
     e48:	8c 93       	st	X, r24
#if   OC_MODE == DISCONNECTED
	 TCCR0 &= ~(1<<COM01);
     e4a:	a3 e5       	ldi	r26, 0x53	; 83
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e3 e5       	ldi	r30, 0x53	; 83
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	8f 7d       	andi	r24, 0xDF	; 223
     e56:	8c 93       	st	X, r24
	 TCCR0 &= ~(1<<COM00);
     e58:	a3 e5       	ldi	r26, 0x53	; 83
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e3 e5       	ldi	r30, 0x53	; 83
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8f 7e       	andi	r24, 0xEF	; 239
     e64:	8c 93       	st	X, r24
#endif
#else
#error "TIMER0_OC_MODE has a wrong config"
#endif

return Local_enuErrorState;
     e66:	89 81       	ldd	r24, Y+1	; 0x01
}
     e68:	0f 90       	pop	r0
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <TIMER0_enuSetPreload>:
ES_t TIMER0_enuSetPreload(u8 Copy_u8Preload){
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	00 d0       	rcall	.+0      	; 0xe76 <TIMER0_enuSetPreload+0x6>
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     e7c:	19 82       	std	Y+1, r1	; 0x01
	TCNT0=Copy_u8Preload;
     e7e:	e2 e5       	ldi	r30, 0x52	; 82
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <TIMER0_enuSetAsyncDelay>:
//fun for interrupt
ES_t TIMER0_enuSetAsyncDelay(u32 Copy_u32Time,void (*Copy_pfunAppFun)(void*),void * Copy_pvidParameter){
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	66 97       	sbiw	r28, 0x16	; 22
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	6f 87       	std	Y+15, r22	; 0x0f
     eac:	78 8b       	std	Y+16, r23	; 0x10
     eae:	89 8b       	std	Y+17, r24	; 0x11
     eb0:	9a 8b       	std	Y+18, r25	; 0x12
     eb2:	5c 8b       	std	Y+20, r21	; 0x14
     eb4:	4b 8b       	std	Y+19, r20	; 0x13
     eb6:	3e 8b       	std	Y+22, r19	; 0x16
     eb8:	2d 8b       	std	Y+21, r18	; 0x15
	ES_t Local_enuErrorState = ES_NOK;
     eba:	1e 86       	std	Y+14, r1	; 0x0e

		f32 Local_f32TimeOvf=256 * ((f32)TIMER_PRES/TIMER_F_CPU); //cal Time of overflow
     ebc:	8f e6       	ldi	r24, 0x6F	; 111
     ebe:	92 e1       	ldi	r25, 0x12	; 18
     ec0:	a3 e8       	ldi	r26, 0x83	; 131
     ec2:	b3 e4       	ldi	r27, 0x43	; 67
     ec4:	8a 87       	std	Y+10, r24	; 0x0a
     ec6:	9b 87       	std	Y+11, r25	; 0x0b
     ec8:	ac 87       	std	Y+12, r26	; 0x0c
     eca:	bd 87       	std	Y+13, r27	; 0x0d
		f32 Local_f32NumOvf= Copy_u32Time/Local_f32TimeOvf;      // cal Number of overflow
     ecc:	6f 85       	ldd	r22, Y+15	; 0x0f
     ece:	78 89       	ldd	r23, Y+16	; 0x10
     ed0:	89 89       	ldd	r24, Y+17	; 0x11
     ed2:	9a 89       	ldd	r25, Y+18	; 0x12
     ed4:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	bc 01       	movw	r22, r24
     ede:	cd 01       	movw	r24, r26
     ee0:	2a 85       	ldd	r18, Y+10	; 0x0a
     ee2:	3b 85       	ldd	r19, Y+11	; 0x0b
     ee4:	4c 85       	ldd	r20, Y+12	; 0x0c
     ee6:	5d 85       	ldd	r21, Y+13	; 0x0d
     ee8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	8e 83       	std	Y+6, r24	; 0x06
     ef2:	9f 83       	std	Y+7, r25	; 0x07
     ef4:	a8 87       	std	Y+8, r26	; 0x08
     ef6:	b9 87       	std	Y+9, r27	; 0x09
		if((Local_f32NumOvf-(u32)Local_f32NumOvf)!=0.0){
     ef8:	6e 81       	ldd	r22, Y+6	; 0x06
     efa:	7f 81       	ldd	r23, Y+7	; 0x07
     efc:	88 85       	ldd	r24, Y+8	; 0x08
     efe:	99 85       	ldd	r25, Y+9	; 0x09
     f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	bc 01       	movw	r22, r24
     f0a:	cd 01       	movw	r24, r26
     f0c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     f10:	9b 01       	movw	r18, r22
     f12:	ac 01       	movw	r20, r24
     f14:	6e 81       	ldd	r22, Y+6	; 0x06
     f16:	7f 81       	ldd	r23, Y+7	; 0x07
     f18:	88 85       	ldd	r24, Y+8	; 0x08
     f1a:	99 85       	ldd	r25, Y+9	; 0x09
     f1c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	bc 01       	movw	r22, r24
     f26:	cd 01       	movw	r24, r26
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
     f34:	88 23       	and	r24, r24
     f36:	09 f4       	brne	.+2      	; 0xf3a <TIMER0_enuSetAsyncDelay+0xa4>
     f38:	5a c0       	rjmp	.+180    	; 0xfee <TIMER0_enuSetAsyncDelay+0x158>
			u32 Local_u32NumOvf_int=(u32)Local_f32NumOvf+1;
     f3a:	6e 81       	ldd	r22, Y+6	; 0x06
     f3c:	7f 81       	ldd	r23, Y+7	; 0x07
     f3e:	88 85       	ldd	r24, Y+8	; 0x08
     f40:	99 85       	ldd	r25, Y+9	; 0x09
     f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	a1 1d       	adc	r26, r1
     f4e:	b1 1d       	adc	r27, r1
     f50:	8a 83       	std	Y+2, r24	; 0x02
     f52:	9b 83       	std	Y+3, r25	; 0x03
     f54:	ac 83       	std	Y+4, r26	; 0x04
     f56:	bd 83       	std	Y+5, r27	; 0x05
			Local_f32NumOvf=Local_f32NumOvf-(u32)Local_f32NumOvf;
     f58:	6e 81       	ldd	r22, Y+6	; 0x06
     f5a:	7f 81       	ldd	r23, Y+7	; 0x07
     f5c:	88 85       	ldd	r24, Y+8	; 0x08
     f5e:	99 85       	ldd	r25, Y+9	; 0x09
     f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	bc 01       	movw	r22, r24
     f6a:	cd 01       	movw	r24, r26
     f6c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
     f70:	9b 01       	movw	r18, r22
     f72:	ac 01       	movw	r20, r24
     f74:	6e 81       	ldd	r22, Y+6	; 0x06
     f76:	7f 81       	ldd	r23, Y+7	; 0x07
     f78:	88 85       	ldd	r24, Y+8	; 0x08
     f7a:	99 85       	ldd	r25, Y+9	; 0x09
     f7c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	8e 83       	std	Y+6, r24	; 0x06
     f86:	9f 83       	std	Y+7, r25	; 0x07
     f88:	a8 87       	std	Y+8, r26	; 0x08
     f8a:	b9 87       	std	Y+9, r27	; 0x09
			u8 Local_u8Preload=256-(256*Local_f32NumOvf);
     f8c:	6e 81       	ldd	r22, Y+6	; 0x06
     f8e:	7f 81       	ldd	r23, Y+7	; 0x07
     f90:	88 85       	ldd	r24, Y+8	; 0x08
     f92:	99 85       	ldd	r25, Y+9	; 0x09
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	40 e8       	ldi	r20, 0x80	; 128
     f9a:	53 ec       	ldi	r21, 0xC3	; 195
     f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	bc 01       	movw	r22, r24
     fa6:	cd 01       	movw	r24, r26
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	40 e8       	ldi	r20, 0x80	; 128
     fae:	53 e4       	ldi	r21, 0x43	; 67
     fb0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	bc 01       	movw	r22, r24
     fba:	cd 01       	movw	r24, r26
     fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	89 83       	std	Y+1, r24	; 0x01
			TCNT0=Local_u8Preload;
     fc6:	e2 e5       	ldi	r30, 0x52	; 82
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	80 83       	st	Z, r24
			 Global_u32NumOvf=Local_u32NumOvf_int;
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	9b 81       	ldd	r25, Y+3	; 0x03
     fd2:	ac 81       	ldd	r26, Y+4	; 0x04
     fd4:	bd 81       	ldd	r27, Y+5	; 0x05
     fd6:	80 93 8e 01 	sts	0x018E, r24
     fda:	90 93 8f 01 	sts	0x018F, r25
     fde:	a0 93 90 01 	sts	0x0190, r26
     fe2:	b0 93 91 01 	sts	0x0191, r27
			 Global_u8Preload=Local_u8Preload;}
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	80 93 92 01 	sts	0x0192, r24
     fec:	10 c0       	rjmp	.+32     	; 0x100e <TIMER0_enuSetAsyncDelay+0x178>
			 else
			 	{
				 Global_u32NumOvf = (u32)Local_f32NumOvf;
     fee:	6e 81       	ldd	r22, Y+6	; 0x06
     ff0:	7f 81       	ldd	r23, Y+7	; 0x07
     ff2:	88 85       	ldd	r24, Y+8	; 0x08
     ff4:	99 85       	ldd	r25, Y+9	; 0x09
     ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	80 93 8e 01 	sts	0x018E, r24
    1002:	90 93 8f 01 	sts	0x018F, r25
    1006:	a0 93 90 01 	sts	0x0190, r26
    100a:	b0 93 91 01 	sts	0x0191, r27

			 	}

			 	if(Copy_pfunAppFun != NULL)
    100e:	8b 89       	ldd	r24, Y+19	; 0x13
    1010:	9c 89       	ldd	r25, Y+20	; 0x14
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	69 f0       	breq	.+26     	; 0x1030 <TIMER0_enuSetAsyncDelay+0x19a>
			 	{
			 		Timer0_ApFun_OVF= Copy_pfunAppFun;
    1016:	8b 89       	ldd	r24, Y+19	; 0x13
    1018:	9c 89       	ldd	r25, Y+20	; 0x14
    101a:	90 93 87 01 	sts	0x0187, r25
    101e:	80 93 86 01 	sts	0x0186, r24
			 		Timer0_Apvidparameter_OVF = Copy_pvidParameter;
    1022:	8d 89       	ldd	r24, Y+21	; 0x15
    1024:	9e 89       	ldd	r25, Y+22	; 0x16
    1026:	90 93 89 01 	sts	0x0189, r25
    102a:	80 93 88 01 	sts	0x0188, r24
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <TIMER0_enuSetAsyncDelay+0x19e>

			 	}
			 	else
			 	{
			 		Local_enuErrorState = ES_NULL_POINTER;
    1030:	82 e0       	ldi	r24, 0x02	; 2
    1032:	8e 87       	std	Y+14, r24	; 0x0e
			 	}

			 	TIMSK |= (1 << TOIE0);
    1034:	a9 e5       	ldi	r26, 0x59	; 89
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e9 e5       	ldi	r30, 0x59	; 89
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	81 60       	ori	r24, 0x01	; 1
    1040:	8c 93       	st	X, r24

			 	return Local_enuErrorState;
    1042:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
    1044:	66 96       	adiw	r28, 0x16	; 22
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <TIMER0_enuSetsyncDelay>:


//fun busy wait

ES_t TIMER0_enuSetsyncDelay(u32 Copy_u32Time){
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	66 97       	sbiw	r28, 0x16	; 22
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    106a:	6b 8b       	std	Y+19, r22	; 0x13
    106c:	7c 8b       	std	Y+20, r23	; 0x14
    106e:	8d 8b       	std	Y+21, r24	; 0x15
    1070:	9e 8b       	std	Y+22, r25	; 0x16
	ES_t Local_enuErrorState = ES_NOK;
    1072:	1a 8a       	std	Y+18, r1	; 0x12
	TIMSK&=~(1<<TOIE0); //disable for interrupt
    1074:	a9 e5       	ldi	r26, 0x59	; 89
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e9 e5       	ldi	r30, 0x59	; 89
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	8e 7f       	andi	r24, 0xFE	; 254
    1080:	8c 93       	st	X, r24
	f32 Local_f32TimeOvf=256 * ((f32)TIMER_PRES/TIMER_F_CPU); //cal Time of overflow
    1082:	8f e6       	ldi	r24, 0x6F	; 111
    1084:	92 e1       	ldi	r25, 0x12	; 18
    1086:	a3 e8       	ldi	r26, 0x83	; 131
    1088:	b3 e4       	ldi	r27, 0x43	; 67
    108a:	8e 87       	std	Y+14, r24	; 0x0e
    108c:	9f 87       	std	Y+15, r25	; 0x0f
    108e:	a8 8b       	std	Y+16, r26	; 0x10
    1090:	b9 8b       	std	Y+17, r27	; 0x11
	f32 Local_f32NumOvf= (f32)Copy_u32Time/Local_f32TimeOvf; // cal Number of overflow
    1092:	6b 89       	ldd	r22, Y+19	; 0x13
    1094:	7c 89       	ldd	r23, Y+20	; 0x14
    1096:	8d 89       	ldd	r24, Y+21	; 0x15
    1098:	9e 89       	ldd	r25, Y+22	; 0x16
    109a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	bc 01       	movw	r22, r24
    10a4:	cd 01       	movw	r24, r26
    10a6:	2e 85       	ldd	r18, Y+14	; 0x0e
    10a8:	3f 85       	ldd	r19, Y+15	; 0x0f
    10aa:	48 89       	ldd	r20, Y+16	; 0x10
    10ac:	59 89       	ldd	r21, Y+17	; 0x11
    10ae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	8a 87       	std	Y+10, r24	; 0x0a
    10b8:	9b 87       	std	Y+11, r25	; 0x0b
    10ba:	ac 87       	std	Y+12, r26	; 0x0c
    10bc:	bd 87       	std	Y+13, r27	; 0x0d

	if((Local_f32NumOvf-(u32)Local_f32NumOvf)!=0.0){
    10be:	6a 85       	ldd	r22, Y+10	; 0x0a
    10c0:	7b 85       	ldd	r23, Y+11	; 0x0b
    10c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    10c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    10c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ca:	dc 01       	movw	r26, r24
    10cc:	cb 01       	movw	r24, r22
    10ce:	bc 01       	movw	r22, r24
    10d0:	cd 01       	movw	r24, r26
    10d2:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    10d6:	9b 01       	movw	r18, r22
    10d8:	ac 01       	movw	r20, r24
    10da:	6a 85       	ldd	r22, Y+10	; 0x0a
    10dc:	7b 85       	ldd	r23, Y+11	; 0x0b
    10de:	8c 85       	ldd	r24, Y+12	; 0x0c
    10e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    10e2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	40 e0       	ldi	r20, 0x00	; 0
    10f4:	50 e0       	ldi	r21, 0x00	; 0
    10f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    10fa:	88 23       	and	r24, r24
    10fc:	09 f4       	brne	.+2      	; 0x1100 <TIMER0_enuSetsyncDelay+0xaa>
    10fe:	6f c0       	rjmp	.+222    	; 0x11de <TIMER0_enuSetsyncDelay+0x188>

		u32 Local_u32NumOvf_int=(u32)Local_f32NumOvf+1;
    1100:	6a 85       	ldd	r22, Y+10	; 0x0a
    1102:	7b 85       	ldd	r23, Y+11	; 0x0b
    1104:	8c 85       	ldd	r24, Y+12	; 0x0c
    1106:	9d 85       	ldd	r25, Y+13	; 0x0d
    1108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	01 96       	adiw	r24, 0x01	; 1
    1112:	a1 1d       	adc	r26, r1
    1114:	b1 1d       	adc	r27, r1
    1116:	8e 83       	std	Y+6, r24	; 0x06
    1118:	9f 83       	std	Y+7, r25	; 0x07
    111a:	a8 87       	std	Y+8, r26	; 0x08
    111c:	b9 87       	std	Y+9, r27	; 0x09
		Local_f32NumOvf=Local_f32NumOvf-(u32)Local_f32NumOvf;
    111e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1120:	7b 85       	ldd	r23, Y+11	; 0x0b
    1122:	8c 85       	ldd	r24, Y+12	; 0x0c
    1124:	9d 85       	ldd	r25, Y+13	; 0x0d
    1126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	bc 01       	movw	r22, r24
    1130:	cd 01       	movw	r24, r26
    1132:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    1136:	9b 01       	movw	r18, r22
    1138:	ac 01       	movw	r20, r24
    113a:	6a 85       	ldd	r22, Y+10	; 0x0a
    113c:	7b 85       	ldd	r23, Y+11	; 0x0b
    113e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1140:	9d 85       	ldd	r25, Y+13	; 0x0d
    1142:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	8a 87       	std	Y+10, r24	; 0x0a
    114c:	9b 87       	std	Y+11, r25	; 0x0b
    114e:	ac 87       	std	Y+12, r26	; 0x0c
    1150:	bd 87       	std	Y+13, r27	; 0x0d
		u8 Local_u8Preload=256-(256*Local_f32NumOvf);
    1152:	6a 85       	ldd	r22, Y+10	; 0x0a
    1154:	7b 85       	ldd	r23, Y+11	; 0x0b
    1156:	8c 85       	ldd	r24, Y+12	; 0x0c
    1158:	9d 85       	ldd	r25, Y+13	; 0x0d
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	40 e8       	ldi	r20, 0x80	; 128
    1160:	53 ec       	ldi	r21, 0xC3	; 195
    1162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	bc 01       	movw	r22, r24
    116c:	cd 01       	movw	r24, r26
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e8       	ldi	r20, 0x80	; 128
    1174:	53 e4       	ldi	r21, 0x43	; 67
    1176:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	bc 01       	movw	r22, r24
    1180:	cd 01       	movw	r24, r26
    1182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	8d 83       	std	Y+5, r24	; 0x05
		TCNT0=Local_u8Preload;
    118c:	e2 e5       	ldi	r30, 0x52	; 82
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	8d 81       	ldd	r24, Y+5	; 0x05
    1192:	80 83       	st	Z, r24
    1194:	1b c0       	rjmp	.+54     	; 0x11cc <TIMER0_enuSetsyncDelay+0x176>

		while(Local_u32NumOvf_int){
			while(!((TIFR >> TOV0) & 1));
    1196:	e8 e5       	ldi	r30, 0x58	; 88
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	88 2f       	mov	r24, r24
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	81 70       	andi	r24, 0x01	; 1
    11a2:	90 70       	andi	r25, 0x00	; 0
    11a4:	00 97       	sbiw	r24, 0x00	; 0
    11a6:	b9 f3       	breq	.-18     	; 0x1196 <TIMER0_enuSetsyncDelay+0x140>
						TIFR |= (1 << TOV0);   //clear flag
    11a8:	a8 e5       	ldi	r26, 0x58	; 88
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e8 e5       	ldi	r30, 0x58	; 88
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	81 60       	ori	r24, 0x01	; 1
    11b4:	8c 93       	st	X, r24
						Local_u32NumOvf_int--;
    11b6:	8e 81       	ldd	r24, Y+6	; 0x06
    11b8:	9f 81       	ldd	r25, Y+7	; 0x07
    11ba:	a8 85       	ldd	r26, Y+8	; 0x08
    11bc:	b9 85       	ldd	r27, Y+9	; 0x09
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	a1 09       	sbc	r26, r1
    11c2:	b1 09       	sbc	r27, r1
    11c4:	8e 83       	std	Y+6, r24	; 0x06
    11c6:	9f 83       	std	Y+7, r25	; 0x07
    11c8:	a8 87       	std	Y+8, r26	; 0x08
    11ca:	b9 87       	std	Y+9, r27	; 0x09
		u32 Local_u32NumOvf_int=(u32)Local_f32NumOvf+1;
		Local_f32NumOvf=Local_f32NumOvf-(u32)Local_f32NumOvf;
		u8 Local_u8Preload=256-(256*Local_f32NumOvf);
		TCNT0=Local_u8Preload;

		while(Local_u32NumOvf_int){
    11cc:	8e 81       	ldd	r24, Y+6	; 0x06
    11ce:	9f 81       	ldd	r25, Y+7	; 0x07
    11d0:	a8 85       	ldd	r26, Y+8	; 0x08
    11d2:	b9 85       	ldd	r27, Y+9	; 0x09
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	a1 05       	cpc	r26, r1
    11d8:	b1 05       	cpc	r27, r1
    11da:	e9 f6       	brne	.-70     	; 0x1196 <TIMER0_enuSetsyncDelay+0x140>
    11dc:	30 c0       	rjmp	.+96     	; 0x123e <TIMER0_enuSetsyncDelay+0x1e8>
						TIFR |= (1 << TOV0);   //clear flag
						Local_u32NumOvf_int--;
		}
	}
		else {
			u32 Local_u32NumOvf_int=(u32)Local_f32NumOvf;
    11de:	6a 85       	ldd	r22, Y+10	; 0x0a
    11e0:	7b 85       	ldd	r23, Y+11	; 0x0b
    11e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    11e4:	9d 85       	ldd	r25, Y+13	; 0x0d
    11e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	9a 83       	std	Y+2, r25	; 0x02
    11f2:	ab 83       	std	Y+3, r26	; 0x03
    11f4:	bc 83       	std	Y+4, r27	; 0x04
    11f6:	1b c0       	rjmp	.+54     	; 0x122e <TIMER0_enuSetsyncDelay+0x1d8>
			while(Local_u32NumOvf_int){
					while(!((TIFR >> TOV0) & 1));
    11f8:	e8 e5       	ldi	r30, 0x58	; 88
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	81 70       	andi	r24, 0x01	; 1
    1204:	90 70       	andi	r25, 0x00	; 0
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	b9 f3       	breq	.-18     	; 0x11f8 <TIMER0_enuSetsyncDelay+0x1a2>
								TIFR |= (1 << TOV0);  //clear flag
    120a:	a8 e5       	ldi	r26, 0x58	; 88
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e8 e5       	ldi	r30, 0x58	; 88
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	81 60       	ori	r24, 0x01	; 1
    1216:	8c 93       	st	X, r24
								Local_u32NumOvf_int--;
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	9a 81       	ldd	r25, Y+2	; 0x02
    121c:	ab 81       	ldd	r26, Y+3	; 0x03
    121e:	bc 81       	ldd	r27, Y+4	; 0x04
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	a1 09       	sbc	r26, r1
    1224:	b1 09       	sbc	r27, r1
    1226:	89 83       	std	Y+1, r24	; 0x01
    1228:	9a 83       	std	Y+2, r25	; 0x02
    122a:	ab 83       	std	Y+3, r26	; 0x03
    122c:	bc 83       	std	Y+4, r27	; 0x04
						Local_u32NumOvf_int--;
		}
	}
		else {
			u32 Local_u32NumOvf_int=(u32)Local_f32NumOvf;
			while(Local_u32NumOvf_int){
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	9a 81       	ldd	r25, Y+2	; 0x02
    1232:	ab 81       	ldd	r26, Y+3	; 0x03
    1234:	bc 81       	ldd	r27, Y+4	; 0x04
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	a1 05       	cpc	r26, r1
    123a:	b1 05       	cpc	r27, r1
    123c:	e9 f6       	brne	.-70     	; 0x11f8 <TIMER0_enuSetsyncDelay+0x1a2>
					while(!((TIFR >> TOV0) & 1));
								TIFR |= (1 << TOV0);  //clear flag
								Local_u32NumOvf_int--;
				}
		}
	return Local_enuErrorState;
    123e:	8a 89       	ldd	r24, Y+18	; 0x12
	}
    1240:	66 96       	adiw	r28, 0x16	; 22
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <TIMER0_enuGeneratePWM>:
	return Local_enuErrorState;
}
*/

ES_t TIMER0_enuGeneratePWM(u8 Copy_u8DutyCycle)
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	00 d0       	rcall	.+0      	; 0x1258 <TIMER0_enuGeneratePWM+0x6>
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    125e:	19 82       	std	Y+1, r1	; 0x01
	#else
	#error "OC0 has a wrong config"
	#endif
	#endif

	OCR0 = TIMER0_f32OC0Val;
    1260:	ec e5       	ldi	r30, 0x5C	; 92
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 91 93 01 	lds	r24, 0x0193
    1268:	90 91 94 01 	lds	r25, 0x0194
    126c:	a0 91 95 01 	lds	r26, 0x0195
    1270:	b0 91 96 01 	lds	r27, 0x0196
    1274:	80 83       	st	Z, r24

	return Local_enuErrorState;
    1276:	89 81       	ldd	r24, Y+1	; 0x01
}
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <TIMER0_enuSetCTCVal>:
ES_t TIMER0_enuSetCTCVal(u8 Copy_u8CTC_Val){
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	00 d0       	rcall	.+0      	; 0x1288 <TIMER0_enuSetCTCVal+0x6>
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	8a 83       	std	Y+2, r24	; 0x02
ES_t Local_enuErrorState = ES_NOK;
    128e:	19 82       	std	Y+1, r1	; 0x01

	OCR0 = Copy_u8CTC_Val;
    1290:	ec e5       	ldi	r30, 0x5C	; 92
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;}
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <TIMER0_enuSetCALLBACK_CTC>:

ES_t TIMER0_enuSetCALLBACK_CTC(void (*Copy_PFunApp)(void *), void *Copy_PParameterApp)
{
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <TIMER0_enuSetCALLBACK_CTC+0x6>
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <TIMER0_enuSetCALLBACK_CTC+0x8>
    12b0:	0f 92       	push	r0
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	9b 83       	std	Y+3, r25	; 0x03
    12b8:	8a 83       	std	Y+2, r24	; 0x02
    12ba:	7d 83       	std	Y+5, r23	; 0x05
    12bc:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    12be:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PFunApp != NULL)
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	9b 81       	ldd	r25, Y+3	; 0x03
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	79 f0       	breq	.+30     	; 0x12e6 <TIMER0_enuSetCALLBACK_CTC+0x3e>
	{
		TIMER0_PFun_CTC = Copy_PFunApp;
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	9b 81       	ldd	r25, Y+3	; 0x03
    12cc:	90 93 8b 01 	sts	0x018B, r25
    12d0:	80 93 8a 01 	sts	0x018A, r24
		TIMER0_Pvidparameter_CTC = Copy_PParameterApp;
    12d4:	8c 81       	ldd	r24, Y+4	; 0x04
    12d6:	9d 81       	ldd	r25, Y+5	; 0x05
    12d8:	90 93 8d 01 	sts	0x018D, r25
    12dc:	80 93 8c 01 	sts	0x018C, r24
		Local_enuErrorState = ES_OK;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	89 83       	std	Y+1, r24	; 0x01
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <TIMER0_enuSetCALLBACK_CTC+0x42>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    12e6:	82 e0       	ldi	r24, 0x02	; 2
    12e8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <TIMER0_enuEnableOVFInterrupt>:

ES_t TIMER0_enuEnableOVFInterrupt(void)
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	0f 92       	push	r0
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1306:	19 82       	std	Y+1, r1	; 0x01

	TIMSK |= (1 << TOIE0);
    1308:	a9 e5       	ldi	r26, 0x59	; 89
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e9 e5       	ldi	r30, 0x59	; 89
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	81 60       	ori	r24, 0x01	; 1
    1314:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    131a:	89 81       	ldd	r24, Y+1	; 0x01
}
    131c:	0f 90       	pop	r0
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <TIMER0_enuEnableCTCInterrupt>:

ES_t TIMER0_enuEnableCTCInterrupt(void)
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	0f 92       	push	r0
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    132e:	19 82       	std	Y+1, r1	; 0x01

	TIMSK |= (1 << OCIE0);
    1330:	a9 e5       	ldi	r26, 0x59	; 89
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e9 e5       	ldi	r30, 0x59	; 89
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	82 60       	ori	r24, 0x02	; 2
    133c:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1342:	89 81       	ldd	r24, Y+1	; 0x01
}
    1344:	0f 90       	pop	r0
    1346:	cf 91       	pop	r28
    1348:	df 91       	pop	r29
    134a:	08 95       	ret

0000134c <__vector_10>:



ISR(VECT_TIMER0_CTC)
{
    134c:	1f 92       	push	r1
    134e:	0f 92       	push	r0
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	0f 92       	push	r0
    1354:	11 24       	eor	r1, r1
    1356:	2f 93       	push	r18
    1358:	3f 93       	push	r19
    135a:	4f 93       	push	r20
    135c:	5f 93       	push	r21
    135e:	6f 93       	push	r22
    1360:	7f 93       	push	r23
    1362:	8f 93       	push	r24
    1364:	9f 93       	push	r25
    1366:	af 93       	push	r26
    1368:	bf 93       	push	r27
    136a:	ef 93       	push	r30
    136c:	ff 93       	push	r31
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_PFun_CTC != NULL)
    1376:	80 91 8a 01 	lds	r24, 0x018A
    137a:	90 91 8b 01 	lds	r25, 0x018B
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	49 f0       	breq	.+18     	; 0x1394 <__vector_10+0x48>
	{
		TIMER0_PFun_CTC((void *)TIMER0_Pvidparameter_CTC);
    1382:	e0 91 8a 01 	lds	r30, 0x018A
    1386:	f0 91 8b 01 	lds	r31, 0x018B
    138a:	80 91 8c 01 	lds	r24, 0x018C
    138e:	90 91 8d 01 	lds	r25, 0x018D
    1392:	09 95       	icall
	}
}
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	ff 91       	pop	r31
    139a:	ef 91       	pop	r30
    139c:	bf 91       	pop	r27
    139e:	af 91       	pop	r26
    13a0:	9f 91       	pop	r25
    13a2:	8f 91       	pop	r24
    13a4:	7f 91       	pop	r23
    13a6:	6f 91       	pop	r22
    13a8:	5f 91       	pop	r21
    13aa:	4f 91       	pop	r20
    13ac:	3f 91       	pop	r19
    13ae:	2f 91       	pop	r18
    13b0:	0f 90       	pop	r0
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	0f 90       	pop	r0
    13b6:	1f 90       	pop	r1
    13b8:	18 95       	reti

000013ba <__vector_11>:
ISR(VECT_TIMER0_OVF	)
{
    13ba:	1f 92       	push	r1
    13bc:	0f 92       	push	r0
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	0f 92       	push	r0
    13c2:	11 24       	eor	r1, r1
    13c4:	2f 93       	push	r18
    13c6:	3f 93       	push	r19
    13c8:	4f 93       	push	r20
    13ca:	5f 93       	push	r21
    13cc:	6f 93       	push	r22
    13ce:	7f 93       	push	r23
    13d0:	8f 93       	push	r24
    13d2:	9f 93       	push	r25
    13d4:	af 93       	push	r26
    13d6:	bf 93       	push	r27
    13d8:	ef 93       	push	r30
    13da:	ff 93       	push	r31
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_ApFun_OVF != NULL)
    13e4:	80 91 86 01 	lds	r24, 0x0186
    13e8:	90 91 87 01 	lds	r25, 0x0187
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <__vector_11+0x38>
    13f0:	3e c0       	rjmp	.+124    	; 0x146e <__vector_11+0xb4>
	{
		static u32 Local_u32Counter = 0;
		Local_u32Counter++;
    13f2:	80 91 97 01 	lds	r24, 0x0197
    13f6:	90 91 98 01 	lds	r25, 0x0198
    13fa:	a0 91 99 01 	lds	r26, 0x0199
    13fe:	b0 91 9a 01 	lds	r27, 0x019A
    1402:	01 96       	adiw	r24, 0x01	; 1
    1404:	a1 1d       	adc	r26, r1
    1406:	b1 1d       	adc	r27, r1
    1408:	80 93 97 01 	sts	0x0197, r24
    140c:	90 93 98 01 	sts	0x0198, r25
    1410:	a0 93 99 01 	sts	0x0199, r26
    1414:	b0 93 9a 01 	sts	0x019A, r27
		if(Local_u32Counter == Global_u32NumOvf)
    1418:	20 91 97 01 	lds	r18, 0x0197
    141c:	30 91 98 01 	lds	r19, 0x0198
    1420:	40 91 99 01 	lds	r20, 0x0199
    1424:	50 91 9a 01 	lds	r21, 0x019A
    1428:	80 91 8e 01 	lds	r24, 0x018E
    142c:	90 91 8f 01 	lds	r25, 0x018F
    1430:	a0 91 90 01 	lds	r26, 0x0190
    1434:	b0 91 91 01 	lds	r27, 0x0191
    1438:	28 17       	cp	r18, r24
    143a:	39 07       	cpc	r19, r25
    143c:	4a 07       	cpc	r20, r26
    143e:	5b 07       	cpc	r21, r27
    1440:	b1 f4       	brne	.+44     	; 0x146e <__vector_11+0xb4>
		{
			TCNT0 = Global_u8Preload;
    1442:	e2 e5       	ldi	r30, 0x52	; 82
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 91 92 01 	lds	r24, 0x0192
    144a:	80 83       	st	Z, r24
			Timer0_ApFun_OVF((void *)Timer0_Apvidparameter_OVF);
    144c:	e0 91 86 01 	lds	r30, 0x0186
    1450:	f0 91 87 01 	lds	r31, 0x0187
    1454:	80 91 88 01 	lds	r24, 0x0188
    1458:	90 91 89 01 	lds	r25, 0x0189
    145c:	09 95       	icall
			Local_u32Counter = 0;
    145e:	10 92 97 01 	sts	0x0197, r1
    1462:	10 92 98 01 	sts	0x0198, r1
    1466:	10 92 99 01 	sts	0x0199, r1
    146a:	10 92 9a 01 	sts	0x019A, r1
		}
	}
}
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	ff 91       	pop	r31
    1474:	ef 91       	pop	r30
    1476:	bf 91       	pop	r27
    1478:	af 91       	pop	r26
    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	7f 91       	pop	r23
    1480:	6f 91       	pop	r22
    1482:	5f 91       	pop	r21
    1484:	4f 91       	pop	r20
    1486:	3f 91       	pop	r19
    1488:	2f 91       	pop	r18
    148a:	0f 90       	pop	r0
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	0f 90       	pop	r0
    1490:	1f 90       	pop	r1
    1492:	18 95       	reti

00001494 <GIE_enuGloable_Interrupt_Enable>:
#include "../../LIB/errorStates.h"

#include "GIE_priv.h"

ES_t GIE_enuGloable_Interrupt_Enable(void)
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	0f 92       	push	r0
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    149e:	19 82       	std	Y+1, r1	; 0x01

	SREG &= ~(1 << GIE_I);
    14a0:	af e5       	ldi	r26, 0x5F	; 95
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	ef e5       	ldi	r30, 0x5F	; 95
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	8f 77       	andi	r24, 0x7F	; 127
    14ac:	8c 93       	st	X, r24
	SREG |= (1 << GIE_I);
    14ae:	af e5       	ldi	r26, 0x5F	; 95
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	ef e5       	ldi	r30, 0x5F	; 95
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	80 68       	ori	r24, 0x80	; 128
    14ba:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c2:	0f 90       	pop	r0
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	08 95       	ret

000014ca <GIE_enuGloable_Interrupt_Disable>:

ES_t GIE_enuGloable_Interrupt_Disable(void)
{
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	0f 92       	push	r0
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    14d4:	19 82       	std	Y+1, r1	; 0x01

	SREG &= ~(1<< GIE_I);
    14d6:	af e5       	ldi	r26, 0x5F	; 95
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	ef e5       	ldi	r30, 0x5F	; 95
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	8f 77       	andi	r24, 0x7F	; 127
    14e2:	8c 93       	st	X, r24
	Local_enuErrorState = ES_OK;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ea:	0f 90       	pop	r0
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <EXTI_enuInit>:
static volatile void (*EXTI_ApfunINTFun[3])(void*) = {NULL,NULL,NULL};
void * EXTI_ApvidGenericparameter[3] = {NULL,NULL,NULL};

// fun to initialize the external interrupt take pointer to  id of interrupt

ES_t EXTI_enuInit (EXTI_t * Copy_pstrEXTIConfig){
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	2d 97       	sbiw	r28, 0x0d	; 13
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	9d 83       	std	Y+5, r25	; 0x05
    1508:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    150a:	1b 82       	std	Y+3, r1	; 0x03
	if(Copy_pstrEXTIConfig!=NULL){
    150c:	8c 81       	ldd	r24, Y+4	; 0x04
    150e:	9d 81       	ldd	r25, Y+5	; 0x05
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	09 f4       	brne	.+2      	; 0x1516 <EXTI_enuInit+0x24>
    1514:	10 c1       	rjmp	.+544    	; 0x1736 <EXTI_enuInit+0x244>
		u8 Local_u8Iter=0;
    1516:	1a 82       	std	Y+2, r1	; 0x02
    for (Local_u8Iter =0; Local_u8Iter < 3 ; Local_u8Iter++)
    1518:	1a 82       	std	Y+2, r1	; 0x02
    151a:	08 c1       	rjmp	.+528    	; 0x172c <EXTI_enuInit+0x23a>
    {
    	if (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8State == ENABLE)
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	88 2f       	mov	r24, r24
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	9c 01       	movw	r18, r24
    1524:	22 0f       	add	r18, r18
    1526:	33 1f       	adc	r19, r19
    1528:	8c 81       	ldd	r24, Y+4	; 0x04
    152a:	9d 81       	ldd	r25, Y+5	; 0x05
    152c:	fc 01       	movw	r30, r24
    152e:	e2 0f       	add	r30, r18
    1530:	f3 1f       	adc	r31, r19
    1532:	80 81       	ld	r24, Z
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	09 f0       	breq	.+2      	; 0x153a <EXTI_enuInit+0x48>
    1538:	f6 c0       	rjmp	.+492    	; 0x1726 <EXTI_enuInit+0x234>
    	{
    		switch (Local_u8Iter)
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	3d 87       	std	Y+13, r19	; 0x0d
    1542:	2c 87       	std	Y+12, r18	; 0x0c
    1544:	8c 85       	ldd	r24, Y+12	; 0x0c
    1546:	9d 85       	ldd	r25, Y+13	; 0x0d
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	91 05       	cpc	r25, r1
    154c:	09 f4       	brne	.+2      	; 0x1550 <EXTI_enuInit+0x5e>
    154e:	60 c0       	rjmp	.+192    	; 0x1610 <EXTI_enuInit+0x11e>
    1550:	2c 85       	ldd	r18, Y+12	; 0x0c
    1552:	3d 85       	ldd	r19, Y+13	; 0x0d
    1554:	22 30       	cpi	r18, 0x02	; 2
    1556:	31 05       	cpc	r19, r1
    1558:	09 f4       	brne	.+2      	; 0x155c <EXTI_enuInit+0x6a>
    155a:	af c0       	rjmp	.+350    	; 0x16ba <EXTI_enuInit+0x1c8>
    155c:	8c 85       	ldd	r24, Y+12	; 0x0c
    155e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	09 f0       	breq	.+2      	; 0x1566 <EXTI_enuInit+0x74>
    1564:	de c0       	rjmp	.+444    	; 0x1722 <EXTI_enuInit+0x230>
    						{
    		case INT0:
    			 MCUCR &=~ (3<<0);
    1566:	a5 e5       	ldi	r26, 0x55	; 85
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e5 e5       	ldi	r30, 0x55	; 85
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	8c 7f       	andi	r24, 0xFC	; 252
    1572:	8c 93       	st	X, r24
    			 GICR|=(1<<6);
    1574:	ab e5       	ldi	r26, 0x5B	; 91
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	eb e5       	ldi	r30, 0x5B	; 91
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	80 64       	ori	r24, 0x40	; 64
    1580:	8c 93       	st	X, r24

    			switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenseLevel)
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	88 2f       	mov	r24, r24
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	9c 01       	movw	r18, r24
    158a:	22 0f       	add	r18, r18
    158c:	33 1f       	adc	r19, r19
    158e:	8c 81       	ldd	r24, Y+4	; 0x04
    1590:	9d 81       	ldd	r25, Y+5	; 0x05
    1592:	fc 01       	movw	r30, r24
    1594:	e2 0f       	add	r30, r18
    1596:	f3 1f       	adc	r31, r19
    1598:	81 81       	ldd	r24, Z+1	; 0x01
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	3b 87       	std	Y+11, r19	; 0x0b
    15a0:	2a 87       	std	Y+10, r18	; 0x0a
    15a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    15a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    15a6:	82 30       	cpi	r24, 0x02	; 2
    15a8:	91 05       	cpc	r25, r1
    15aa:	f9 f0       	breq	.+62     	; 0x15ea <EXTI_enuInit+0xf8>
    15ac:	2a 85       	ldd	r18, Y+10	; 0x0a
    15ae:	3b 85       	ldd	r19, Y+11	; 0x0b
    15b0:	23 30       	cpi	r18, 0x03	; 3
    15b2:	31 05       	cpc	r19, r1
    15b4:	34 f4       	brge	.+12     	; 0x15c2 <EXTI_enuInit+0xd0>
    15b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    15b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    15ba:	81 30       	cpi	r24, 0x01	; 1
    15bc:	91 05       	cpc	r25, r1
    15be:	e9 f0       	breq	.+58     	; 0x15fa <EXTI_enuInit+0x108>
    15c0:	24 c0       	rjmp	.+72     	; 0x160a <EXTI_enuInit+0x118>
    15c2:	2a 85       	ldd	r18, Y+10	; 0x0a
    15c4:	3b 85       	ldd	r19, Y+11	; 0x0b
    15c6:	23 30       	cpi	r18, 0x03	; 3
    15c8:	31 05       	cpc	r19, r1
    15ca:	39 f0       	breq	.+14     	; 0x15da <EXTI_enuInit+0xe8>
    15cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    15ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    15d0:	84 30       	cpi	r24, 0x04	; 4
    15d2:	91 05       	cpc	r25, r1
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <EXTI_enuInit+0xe6>
    15d6:	a7 c0       	rjmp	.+334    	; 0x1726 <EXTI_enuInit+0x234>
    15d8:	18 c0       	rjmp	.+48     	; 0x160a <EXTI_enuInit+0x118>
    			{
                     case LOW_LEVEL:
                    	 break;
                     case ANY_LOGIC:
                    	 MCUCR |=(1<<0);
    15da:	a5 e5       	ldi	r26, 0x55	; 85
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e5 e5       	ldi	r30, 0x55	; 85
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	81 60       	ori	r24, 0x01	; 1
    15e6:	8c 93       	st	X, r24
    15e8:	9e c0       	rjmp	.+316    	; 0x1726 <EXTI_enuInit+0x234>
                    	 break;
                     case FALLING_EDGE:
                    	 MCUCR |=(1<<1);
    15ea:	a5 e5       	ldi	r26, 0x55	; 85
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e5 e5       	ldi	r30, 0x55	; 85
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	82 60       	ori	r24, 0x02	; 2
    15f6:	8c 93       	st	X, r24
    15f8:	96 c0       	rjmp	.+300    	; 0x1726 <EXTI_enuInit+0x234>
                    	 break;
                     case RISING_EDGE:
                    	 MCUCR |=(3<<0);
    15fa:	a5 e5       	ldi	r26, 0x55	; 85
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e5 e5       	ldi	r30, 0x55	; 85
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	83 60       	ori	r24, 0x03	; 3
    1606:	8c 93       	st	X, r24
    1608:	8e c0       	rjmp	.+284    	; 0x1726 <EXTI_enuInit+0x234>
                    	 break;
                    default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    160a:	83 e0       	ldi	r24, 0x03	; 3
    160c:	8b 83       	std	Y+3, r24	; 0x03
    160e:	8b c0       	rjmp	.+278    	; 0x1726 <EXTI_enuInit+0x234>
					}
					break;

    		case INT1:
    			MCUCR &=~ (3<<2);
    1610:	a5 e5       	ldi	r26, 0x55	; 85
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e5 e5       	ldi	r30, 0x55	; 85
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	83 7f       	andi	r24, 0xF3	; 243
    161c:	8c 93       	st	X, r24
    			GICR |= (1<<7);
    161e:	ab e5       	ldi	r26, 0x5B	; 91
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	eb e5       	ldi	r30, 0x5B	; 91
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	80 68       	ori	r24, 0x80	; 128
    162a:	8c 93       	st	X, r24

    			switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenseLevel)
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	88 2f       	mov	r24, r24
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	9c 01       	movw	r18, r24
    1634:	22 0f       	add	r18, r18
    1636:	33 1f       	adc	r19, r19
    1638:	8c 81       	ldd	r24, Y+4	; 0x04
    163a:	9d 81       	ldd	r25, Y+5	; 0x05
    163c:	fc 01       	movw	r30, r24
    163e:	e2 0f       	add	r30, r18
    1640:	f3 1f       	adc	r31, r19
    1642:	81 81       	ldd	r24, Z+1	; 0x01
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	39 87       	std	Y+9, r19	; 0x09
    164a:	28 87       	std	Y+8, r18	; 0x08
    164c:	88 85       	ldd	r24, Y+8	; 0x08
    164e:	99 85       	ldd	r25, Y+9	; 0x09
    1650:	82 30       	cpi	r24, 0x02	; 2
    1652:	91 05       	cpc	r25, r1
    1654:	f9 f0       	breq	.+62     	; 0x1694 <EXTI_enuInit+0x1a2>
    1656:	28 85       	ldd	r18, Y+8	; 0x08
    1658:	39 85       	ldd	r19, Y+9	; 0x09
    165a:	23 30       	cpi	r18, 0x03	; 3
    165c:	31 05       	cpc	r19, r1
    165e:	34 f4       	brge	.+12     	; 0x166c <EXTI_enuInit+0x17a>
    1660:	88 85       	ldd	r24, Y+8	; 0x08
    1662:	99 85       	ldd	r25, Y+9	; 0x09
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	91 05       	cpc	r25, r1
    1668:	e9 f0       	breq	.+58     	; 0x16a4 <EXTI_enuInit+0x1b2>
    166a:	24 c0       	rjmp	.+72     	; 0x16b4 <EXTI_enuInit+0x1c2>
    166c:	28 85       	ldd	r18, Y+8	; 0x08
    166e:	39 85       	ldd	r19, Y+9	; 0x09
    1670:	23 30       	cpi	r18, 0x03	; 3
    1672:	31 05       	cpc	r19, r1
    1674:	39 f0       	breq	.+14     	; 0x1684 <EXTI_enuInit+0x192>
    1676:	88 85       	ldd	r24, Y+8	; 0x08
    1678:	99 85       	ldd	r25, Y+9	; 0x09
    167a:	84 30       	cpi	r24, 0x04	; 4
    167c:	91 05       	cpc	r25, r1
    167e:	09 f4       	brne	.+2      	; 0x1682 <EXTI_enuInit+0x190>
    1680:	52 c0       	rjmp	.+164    	; 0x1726 <EXTI_enuInit+0x234>
    1682:	18 c0       	rjmp	.+48     	; 0x16b4 <EXTI_enuInit+0x1c2>
    			{
    	         case LOW_LEVEL:
    	        	 break;
    	         case ANY_LOGIC:
    	        	 MCUCR |=(1<<2);
    1684:	a5 e5       	ldi	r26, 0x55	; 85
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e5 e5       	ldi	r30, 0x55	; 85
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	84 60       	ori	r24, 0x04	; 4
    1690:	8c 93       	st	X, r24
    1692:	49 c0       	rjmp	.+146    	; 0x1726 <EXTI_enuInit+0x234>
    	        	 break;

    	         case FALLING_EDGE:
    	        	 MCUCR |=(1<<3);
    1694:	a5 e5       	ldi	r26, 0x55	; 85
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e5 e5       	ldi	r30, 0x55	; 85
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	88 60       	ori	r24, 0x08	; 8
    16a0:	8c 93       	st	X, r24
    16a2:	41 c0       	rjmp	.+130    	; 0x1726 <EXTI_enuInit+0x234>
    	        	 break;

    	         case RISING_EDGE:
    	        	 MCUCR |=(3<<2);
    16a4:	a5 e5       	ldi	r26, 0x55	; 85
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e5 e5       	ldi	r30, 0x55	; 85
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	8c 60       	ori	r24, 0x0C	; 12
    16b0:	8c 93       	st	X, r24
    16b2:	39 c0       	rjmp	.+114    	; 0x1726 <EXTI_enuInit+0x234>
    	        	 break;

    	        default:
    				Local_enuErrorState = ES_OUT_OF_RANGE;
    16b4:	83 e0       	ldi	r24, 0x03	; 3
    16b6:	8b 83       	std	Y+3, r24	; 0x03
    16b8:	36 c0       	rjmp	.+108    	; 0x1726 <EXTI_enuInit+0x234>
    			}
    			break;

    		case INT2:
    			MCUCSR &=~(1<<6);
    16ba:	a4 e5       	ldi	r26, 0x54	; 84
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e4 e5       	ldi	r30, 0x54	; 84
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	8f 7b       	andi	r24, 0xBF	; 191
    16c6:	8c 93       	st	X, r24
    			GICR |= (1<<5);
    16c8:	ab e5       	ldi	r26, 0x5B	; 91
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	eb e5       	ldi	r30, 0x5B	; 91
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	80 62       	ori	r24, 0x20	; 32
    16d4:	8c 93       	st	X, r24

    			switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenseLevel)
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	88 2f       	mov	r24, r24
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	9c 01       	movw	r18, r24
    16de:	22 0f       	add	r18, r18
    16e0:	33 1f       	adc	r19, r19
    16e2:	8c 81       	ldd	r24, Y+4	; 0x04
    16e4:	9d 81       	ldd	r25, Y+5	; 0x05
    16e6:	fc 01       	movw	r30, r24
    16e8:	e2 0f       	add	r30, r18
    16ea:	f3 1f       	adc	r31, r19
    16ec:	81 81       	ldd	r24, Z+1	; 0x01
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	3f 83       	std	Y+7, r19	; 0x07
    16f4:	2e 83       	std	Y+6, r18	; 0x06
    16f6:	8e 81       	ldd	r24, Y+6	; 0x06
    16f8:	9f 81       	ldd	r25, Y+7	; 0x07
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	91 05       	cpc	r25, r1
    16fe:	31 f0       	breq	.+12     	; 0x170c <EXTI_enuInit+0x21a>
    1700:	2e 81       	ldd	r18, Y+6	; 0x06
    1702:	3f 81       	ldd	r19, Y+7	; 0x07
    1704:	22 30       	cpi	r18, 0x02	; 2
    1706:	31 05       	cpc	r19, r1
    1708:	71 f0       	breq	.+28     	; 0x1726 <EXTI_enuInit+0x234>
    170a:	08 c0       	rjmp	.+16     	; 0x171c <EXTI_enuInit+0x22a>
    		   	{
                 case FALLING_EDGE:
                	 break;

                 case RISING_EDGE:
                	 MCUCSR |= (1<<6);
    170c:	a4 e5       	ldi	r26, 0x54	; 84
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e4 e5       	ldi	r30, 0x54	; 84
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	80 64       	ori	r24, 0x40	; 64
    1718:	8c 93       	st	X, r24
    171a:	05 c0       	rjmp	.+10     	; 0x1726 <EXTI_enuInit+0x234>
                	 break;

                default:
  			    Local_enuErrorState = ES_OUT_OF_RANGE;
    171c:	83 e0       	ldi	r24, 0x03	; 3
    171e:	8b 83       	std	Y+3, r24	; 0x03
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <EXTI_enuInit+0x234>
  		        }
  		        break;

              default:
              Local_enuErrorState = ES_OUT_OF_RANGE;
    1722:	83 e0       	ldi	r24, 0x03	; 3
    1724:	8b 83       	std	Y+3, r24	; 0x03

ES_t EXTI_enuInit (EXTI_t * Copy_pstrEXTIConfig){
	ES_t Local_enuErrorState = ES_NOK;
	if(Copy_pstrEXTIConfig!=NULL){
		u8 Local_u8Iter=0;
    for (Local_u8Iter =0; Local_u8Iter < 3 ; Local_u8Iter++)
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	8f 5f       	subi	r24, 0xFF	; 255
    172a:	8a 83       	std	Y+2, r24	; 0x02
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	83 30       	cpi	r24, 0x03	; 3
    1730:	08 f4       	brcc	.+2      	; 0x1734 <EXTI_enuInit+0x242>
    1732:	f4 ce       	rjmp	.-536    	; 0x151c <EXTI_enuInit+0x2a>
    1734:	02 c0       	rjmp	.+4      	; 0x173a <EXTI_enuInit+0x248>

              default:
              Local_enuErrorState = ES_OUT_OF_RANGE;
    						}}}}
	else {
		ES_t Local_enuErrorState = ES_NULL_POINTER;
    1736:	82 e0       	ldi	r24, 0x02	; 2
    1738:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    173c:	2d 96       	adiw	r28, 0x0d	; 13
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	f8 94       	cli
    1742:	de bf       	out	0x3e, r29	; 62
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	cd bf       	out	0x3d, r28	; 61
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <EXTI_enuSetSenseLevel>:


/*** fun to set sense level
     take id ,sense level                              ***/
ES_t EXTI_enuSetSenseLevel(u8 Copy_u8EXTI_ID , u8 Copy_u8SenseLevel){
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	2a 97       	sbiw	r28, 0x0a	; 10
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	8b 83       	std	Y+3, r24	; 0x03
    1764:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1766:	1a 82       	std	Y+2, r1	; 0x02
 if(Copy_u8EXTI_ID < 3){
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	83 30       	cpi	r24, 0x03	; 3
    176c:	08 f0       	brcs	.+2      	; 0x1770 <EXTI_enuSetSenseLevel+0x22>
    176e:	ba c0       	rjmp	.+372    	; 0x18e4 <EXTI_enuSetSenseLevel+0x196>
	 if(Copy_u8EXTI_ID ==INT0){
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	88 23       	and	r24, r24
    1774:	09 f0       	breq	.+2      	; 0x1778 <EXTI_enuSetSenseLevel+0x2a>
    1776:	43 c0       	rjmp	.+134    	; 0x17fe <EXTI_enuSetSenseLevel+0xb0>
		 MCUCR &=~ (3<<0);
    1778:	a5 e5       	ldi	r26, 0x55	; 85
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e5 e5       	ldi	r30, 0x55	; 85
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	8c 7f       	andi	r24, 0xFC	; 252
    1784:	8c 93       	st	X, r24
			switch (Copy_u8SenseLevel)
    1786:	8c 81       	ldd	r24, Y+4	; 0x04
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	3a 87       	std	Y+10, r19	; 0x0a
    178e:	29 87       	std	Y+9, r18	; 0x09
    1790:	89 85       	ldd	r24, Y+9	; 0x09
    1792:	9a 85       	ldd	r25, Y+10	; 0x0a
    1794:	82 30       	cpi	r24, 0x02	; 2
    1796:	91 05       	cpc	r25, r1
    1798:	f9 f0       	breq	.+62     	; 0x17d8 <EXTI_enuSetSenseLevel+0x8a>
    179a:	29 85       	ldd	r18, Y+9	; 0x09
    179c:	3a 85       	ldd	r19, Y+10	; 0x0a
    179e:	23 30       	cpi	r18, 0x03	; 3
    17a0:	31 05       	cpc	r19, r1
    17a2:	34 f4       	brge	.+12     	; 0x17b0 <EXTI_enuSetSenseLevel+0x62>
    17a4:	89 85       	ldd	r24, Y+9	; 0x09
    17a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	91 05       	cpc	r25, r1
    17ac:	e9 f0       	breq	.+58     	; 0x17e8 <EXTI_enuSetSenseLevel+0x9a>
    17ae:	24 c0       	rjmp	.+72     	; 0x17f8 <EXTI_enuSetSenseLevel+0xaa>
    17b0:	29 85       	ldd	r18, Y+9	; 0x09
    17b2:	3a 85       	ldd	r19, Y+10	; 0x0a
    17b4:	23 30       	cpi	r18, 0x03	; 3
    17b6:	31 05       	cpc	r19, r1
    17b8:	39 f0       	breq	.+14     	; 0x17c8 <EXTI_enuSetSenseLevel+0x7a>
    17ba:	89 85       	ldd	r24, Y+9	; 0x09
    17bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17be:	84 30       	cpi	r24, 0x04	; 4
    17c0:	91 05       	cpc	r25, r1
    17c2:	09 f4       	brne	.+2      	; 0x17c6 <EXTI_enuSetSenseLevel+0x78>
    17c4:	91 c0       	rjmp	.+290    	; 0x18e8 <EXTI_enuSetSenseLevel+0x19a>
    17c6:	18 c0       	rjmp	.+48     	; 0x17f8 <EXTI_enuSetSenseLevel+0xaa>
		    			{
		                     case LOW_LEVEL:
		                    	 break;
		                     case ANY_LOGIC:
		                    	 MCUCR |=(1<<0);
    17c8:	a5 e5       	ldi	r26, 0x55	; 85
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e5 e5       	ldi	r30, 0x55	; 85
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	81 60       	ori	r24, 0x01	; 1
    17d4:	8c 93       	st	X, r24
    17d6:	88 c0       	rjmp	.+272    	; 0x18e8 <EXTI_enuSetSenseLevel+0x19a>
		                    	 break;
		                     case FALLING_EDGE:
		                    	 MCUCR |=(1<<1);
    17d8:	a5 e5       	ldi	r26, 0x55	; 85
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e5 e5       	ldi	r30, 0x55	; 85
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	82 60       	ori	r24, 0x02	; 2
    17e4:	8c 93       	st	X, r24
    17e6:	80 c0       	rjmp	.+256    	; 0x18e8 <EXTI_enuSetSenseLevel+0x19a>
		                    	 break;
		                     case RISING_EDGE:
		                    	 MCUCR |=(3<<0);
    17e8:	a5 e5       	ldi	r26, 0x55	; 85
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e5 e5       	ldi	r30, 0x55	; 85
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	83 60       	ori	r24, 0x03	; 3
    17f4:	8c 93       	st	X, r24
    17f6:	78 c0       	rjmp	.+240    	; 0x18e8 <EXTI_enuSetSenseLevel+0x19a>
		                    	 break;
		                    default:
								Local_enuErrorState = ES_OUT_OF_RANGE;
    17f8:	83 e0       	ldi	r24, 0x03	; 3
    17fa:	8a 83       	std	Y+2, r24	; 0x02
    17fc:	75 c0       	rjmp	.+234    	; 0x18e8 <EXTI_enuSetSenseLevel+0x19a>
							}
	 }
	 else if(Copy_u8EXTI_ID ==INT1){
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	81 30       	cpi	r24, 0x01	; 1
    1802:	09 f0       	breq	.+2      	; 0x1806 <EXTI_enuSetSenseLevel+0xb8>
    1804:	43 c0       	rjmp	.+134    	; 0x188c <EXTI_enuSetSenseLevel+0x13e>
		 MCUCR &=~ (3<<2);
    1806:	a5 e5       	ldi	r26, 0x55	; 85
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e5 e5       	ldi	r30, 0x55	; 85
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	83 7f       	andi	r24, 0xF3	; 243
    1812:	8c 93       	st	X, r24

		     			switch (Copy_u8SenseLevel)
    1814:	8c 81       	ldd	r24, Y+4	; 0x04
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	38 87       	std	Y+8, r19	; 0x08
    181c:	2f 83       	std	Y+7, r18	; 0x07
    181e:	8f 81       	ldd	r24, Y+7	; 0x07
    1820:	98 85       	ldd	r25, Y+8	; 0x08
    1822:	82 30       	cpi	r24, 0x02	; 2
    1824:	91 05       	cpc	r25, r1
    1826:	f9 f0       	breq	.+62     	; 0x1866 <EXTI_enuSetSenseLevel+0x118>
    1828:	2f 81       	ldd	r18, Y+7	; 0x07
    182a:	38 85       	ldd	r19, Y+8	; 0x08
    182c:	23 30       	cpi	r18, 0x03	; 3
    182e:	31 05       	cpc	r19, r1
    1830:	34 f4       	brge	.+12     	; 0x183e <EXTI_enuSetSenseLevel+0xf0>
    1832:	8f 81       	ldd	r24, Y+7	; 0x07
    1834:	98 85       	ldd	r25, Y+8	; 0x08
    1836:	81 30       	cpi	r24, 0x01	; 1
    1838:	91 05       	cpc	r25, r1
    183a:	e9 f0       	breq	.+58     	; 0x1876 <EXTI_enuSetSenseLevel+0x128>
    183c:	24 c0       	rjmp	.+72     	; 0x1886 <EXTI_enuSetSenseLevel+0x138>
    183e:	2f 81       	ldd	r18, Y+7	; 0x07
    1840:	38 85       	ldd	r19, Y+8	; 0x08
    1842:	23 30       	cpi	r18, 0x03	; 3
    1844:	31 05       	cpc	r19, r1
    1846:	39 f0       	breq	.+14     	; 0x1856 <EXTI_enuSetSenseLevel+0x108>
    1848:	8f 81       	ldd	r24, Y+7	; 0x07
    184a:	98 85       	ldd	r25, Y+8	; 0x08
    184c:	84 30       	cpi	r24, 0x04	; 4
    184e:	91 05       	cpc	r25, r1
    1850:	09 f4       	brne	.+2      	; 0x1854 <EXTI_enuSetSenseLevel+0x106>
    1852:	4a c0       	rjmp	.+148    	; 0x18e8 <EXTI_enuSetSenseLevel+0x19a>
    1854:	18 c0       	rjmp	.+48     	; 0x1886 <EXTI_enuSetSenseLevel+0x138>
		     			{
		     	         case LOW_LEVEL:
		     	        	 break;
		     	         case ANY_LOGIC:
		     	        	 MCUCR |=(1<<2);
    1856:	a5 e5       	ldi	r26, 0x55	; 85
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e5 e5       	ldi	r30, 0x55	; 85
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	84 60       	ori	r24, 0x04	; 4
    1862:	8c 93       	st	X, r24
    1864:	41 c0       	rjmp	.+130    	; 0x18e8 <EXTI_enuSetSenseLevel+0x19a>
		     	        	 break;

		     	         case FALLING_EDGE:
		     	        	 MCUCR |=(1<<3);
    1866:	a5 e5       	ldi	r26, 0x55	; 85
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e5 e5       	ldi	r30, 0x55	; 85
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	88 60       	ori	r24, 0x08	; 8
    1872:	8c 93       	st	X, r24
    1874:	39 c0       	rjmp	.+114    	; 0x18e8 <EXTI_enuSetSenseLevel+0x19a>
		     	        	 break;

		     	         case RISING_EDGE:
		     	        	 MCUCR |=(3<<2);
    1876:	a5 e5       	ldi	r26, 0x55	; 85
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e5 e5       	ldi	r30, 0x55	; 85
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8c 60       	ori	r24, 0x0C	; 12
    1882:	8c 93       	st	X, r24
    1884:	31 c0       	rjmp	.+98     	; 0x18e8 <EXTI_enuSetSenseLevel+0x19a>
		     	        	 break;

		     	        default:
		     				Local_enuErrorState = ES_OUT_OF_RANGE;
    1886:	83 e0       	ldi	r24, 0x03	; 3
    1888:	8a 83       	std	Y+2, r24	; 0x02
    188a:	2e c0       	rjmp	.+92     	; 0x18e8 <EXTI_enuSetSenseLevel+0x19a>
		     			}
	 }
	 else if(Copy_u8EXTI_ID ==INT2){
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	82 30       	cpi	r24, 0x02	; 2
    1890:	59 f5       	brne	.+86     	; 0x18e8 <EXTI_enuSetSenseLevel+0x19a>
		 MCUCSR &=~(1<<6);
    1892:	a4 e5       	ldi	r26, 0x54	; 84
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e4 e5       	ldi	r30, 0x54	; 84
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	8f 7b       	andi	r24, 0xBF	; 191
    189e:	8c 93       	st	X, r24
		     			GICR |= (1<<5);
    18a0:	ab e5       	ldi	r26, 0x5B	; 91
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	eb e5       	ldi	r30, 0x5B	; 91
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	80 62       	ori	r24, 0x20	; 32
    18ac:	8c 93       	st	X, r24

		     			switch (Copy_u8SenseLevel)
    18ae:	8c 81       	ldd	r24, Y+4	; 0x04
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	3e 83       	std	Y+6, r19	; 0x06
    18b6:	2d 83       	std	Y+5, r18	; 0x05
    18b8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ba:	9e 81       	ldd	r25, Y+6	; 0x06
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	91 05       	cpc	r25, r1
    18c0:	31 f0       	breq	.+12     	; 0x18ce <EXTI_enuSetSenseLevel+0x180>
    18c2:	2d 81       	ldd	r18, Y+5	; 0x05
    18c4:	3e 81       	ldd	r19, Y+6	; 0x06
    18c6:	22 30       	cpi	r18, 0x02	; 2
    18c8:	31 05       	cpc	r19, r1
    18ca:	71 f0       	breq	.+28     	; 0x18e8 <EXTI_enuSetSenseLevel+0x19a>
    18cc:	08 c0       	rjmp	.+16     	; 0x18de <EXTI_enuSetSenseLevel+0x190>
		     		   	{
		                  case FALLING_EDGE:
		                 	 break;

		                  case RISING_EDGE:
		                 	 MCUCSR |= (1<<6);
    18ce:	a4 e5       	ldi	r26, 0x54	; 84
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e4 e5       	ldi	r30, 0x54	; 84
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	80 64       	ori	r24, 0x40	; 64
    18da:	8c 93       	st	X, r24
    18dc:	05 c0       	rjmp	.+10     	; 0x18e8 <EXTI_enuSetSenseLevel+0x19a>
		                 	 break;

		                 default:
		   			    Local_enuErrorState = ES_OUT_OF_RANGE;
    18de:	83 e0       	ldi	r24, 0x03	; 3
    18e0:	8a 83       	std	Y+2, r24	; 0x02
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <EXTI_enuSetSenseLevel+0x19a>
		   		        }
		 }
 }
 else{
	 ES_t Local_enuErrorState = ES_OUT_OF_RANGE;
    18e4:	83 e0       	ldi	r24, 0x03	; 3
    18e6:	89 83       	std	Y+1, r24	; 0x01
 }
	return Local_enuErrorState;
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    18ea:	2a 96       	adiw	r28, 0x0a	; 10
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	cf 91       	pop	r28
    18f8:	df 91       	pop	r29
    18fa:	08 95       	ret

000018fc <EXTI_enuEnableINT>:

/*** fun to enable specific the interrupt
                      ***/
ES_t EXTI_enuEnableINT(u8 Copy_u8EXTI_ID){
    18fc:	df 93       	push	r29
    18fe:	cf 93       	push	r28
    1900:	00 d0       	rcall	.+0      	; 0x1902 <EXTI_enuEnableINT+0x6>
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
    1906:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1908:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8EXTI_ID < 3)
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	83 30       	cpi	r24, 0x03	; 3
    190e:	00 f5       	brcc	.+64     	; 0x1950 <EXTI_enuEnableINT+0x54>
		{
			if (Copy_u8EXTI_ID ==INT0)
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	88 23       	and	r24, r24
    1914:	41 f4       	brne	.+16     	; 0x1926 <EXTI_enuEnableINT+0x2a>
			{
				GICR |= (1<<6);
    1916:	ab e5       	ldi	r26, 0x5B	; 91
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	eb e5       	ldi	r30, 0x5B	; 91
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	80 64       	ori	r24, 0x40	; 64
    1922:	8c 93       	st	X, r24
    1924:	15 c0       	rjmp	.+42     	; 0x1950 <EXTI_enuEnableINT+0x54>
			}
			else if (Copy_u8EXTI_ID ==INT1)
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	81 30       	cpi	r24, 0x01	; 1
    192a:	41 f4       	brne	.+16     	; 0x193c <EXTI_enuEnableINT+0x40>
			{
				GICR |= (1<<7);
    192c:	ab e5       	ldi	r26, 0x5B	; 91
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	eb e5       	ldi	r30, 0x5B	; 91
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	80 68       	ori	r24, 0x80	; 128
    1938:	8c 93       	st	X, r24
    193a:	0a c0       	rjmp	.+20     	; 0x1950 <EXTI_enuEnableINT+0x54>
			}
			else if (Copy_u8EXTI_ID ==INT2)
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	82 30       	cpi	r24, 0x02	; 2
    1940:	39 f4       	brne	.+14     	; 0x1950 <EXTI_enuEnableINT+0x54>
			{
				GICR |= (1<<5);
    1942:	ab e5       	ldi	r26, 0x5B	; 91
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	eb e5       	ldi	r30, 0x5B	; 91
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	80 62       	ori	r24, 0x20	; 32
    194e:	8c 93       	st	X, r24
			}
		}

	return Local_enuErrorState;
    1950:	89 81       	ldd	r24, Y+1	; 0x01
}
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <EXTI_enuDisableINT>:

/***   fun to disable specific interrupt
                      ***/
ES_t EXTI_enuDisableINT(u8 Copy_u8EXTI_ID){
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	00 d0       	rcall	.+0      	; 0x1962 <EXTI_enuDisableINT+0x6>
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1968:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8EXTI_ID < 3)
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	83 30       	cpi	r24, 0x03	; 3
    196e:	00 f5       	brcc	.+64     	; 0x19b0 <EXTI_enuDisableINT+0x54>
		{
			if (Copy_u8EXTI_ID ==INT0)
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	88 23       	and	r24, r24
    1974:	41 f4       	brne	.+16     	; 0x1986 <EXTI_enuDisableINT+0x2a>
			{
				GICR &= ~(1<<6);
    1976:	ab e5       	ldi	r26, 0x5B	; 91
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	eb e5       	ldi	r30, 0x5B	; 91
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	8f 7b       	andi	r24, 0xBF	; 191
    1982:	8c 93       	st	X, r24
    1984:	15 c0       	rjmp	.+42     	; 0x19b0 <EXTI_enuDisableINT+0x54>
			}
			else if (Copy_u8EXTI_ID ==INT1)
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	41 f4       	brne	.+16     	; 0x199c <EXTI_enuDisableINT+0x40>
			{
				GICR&= ~(1<<7);
    198c:	ab e5       	ldi	r26, 0x5B	; 91
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	eb e5       	ldi	r30, 0x5B	; 91
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	8f 77       	andi	r24, 0x7F	; 127
    1998:	8c 93       	st	X, r24
    199a:	0a c0       	rjmp	.+20     	; 0x19b0 <EXTI_enuDisableINT+0x54>
			}
			else if (Copy_u8EXTI_ID ==INT2)
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	82 30       	cpi	r24, 0x02	; 2
    19a0:	39 f4       	brne	.+14     	; 0x19b0 <EXTI_enuDisableINT+0x54>
			{
				GICR &= ~(1<<5);
    19a2:	ab e5       	ldi	r26, 0x5B	; 91
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	eb e5       	ldi	r30, 0x5B	; 91
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	8f 7d       	andi	r24, 0xDF	; 223
    19ae:	8c 93       	st	X, r24
			}
		}

	return Local_enuErrorState;
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <EXTI_enuCallBack>:

 /***  call back fun to use function that exist in application level
                          ***/

ES_t EXTI_enuCallBack(volatile void (*Copy_pfunAppFun)(void*) , volatile void * Copy_pvidParameter , u8 Copy_u8EXTI_ID)
{
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <EXTI_enuCallBack+0x6>
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <EXTI_enuCallBack+0x8>
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <EXTI_enuCallBack+0xa>
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	9b 83       	std	Y+3, r25	; 0x03
    19cc:	8a 83       	std	Y+2, r24	; 0x02
    19ce:	7d 83       	std	Y+5, r23	; 0x05
    19d0:	6c 83       	std	Y+4, r22	; 0x04
    19d2:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    19d4:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pfunAppFun != NULL && Copy_u8EXTI_ID <3)
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	9b 81       	ldd	r25, Y+3	; 0x03
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	d9 f0       	breq	.+54     	; 0x1a14 <EXTI_enuCallBack+0x58>
    19de:	8e 81       	ldd	r24, Y+6	; 0x06
    19e0:	83 30       	cpi	r24, 0x03	; 3
    19e2:	c0 f4       	brcc	.+48     	; 0x1a14 <EXTI_enuCallBack+0x58>
	{
		EXTI_ApfunINTFun[Copy_u8EXTI_ID]=Copy_pfunAppFun;
    19e4:	8e 81       	ldd	r24, Y+6	; 0x06
    19e6:	88 2f       	mov	r24, r24
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	fc 01       	movw	r30, r24
    19f0:	e5 56       	subi	r30, 0x65	; 101
    19f2:	fe 4f       	sbci	r31, 0xFE	; 254
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	9b 81       	ldd	r25, Y+3	; 0x03
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	80 83       	st	Z, r24
		EXTI_ApvidGenericparameter[Copy_u8EXTI_ID] = Copy_pvidParameter;
    19fc:	8e 81       	ldd	r24, Y+6	; 0x06
    19fe:	88 2f       	mov	r24, r24
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	fc 01       	movw	r30, r24
    1a08:	ef 55       	subi	r30, 0x5F	; 95
    1a0a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a10:	91 83       	std	Z+1, r25	; 0x01
    1a12:	80 83       	st	Z, r24
	}

	return Local_enuErrorState;
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a16:	26 96       	adiw	r28, 0x06	; 6
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	cd bf       	out	0x3d, r28	; 61
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	08 95       	ret

00001a28 <__vector_1>:



ISR(VECT_INT0)
{
    1a28:	1f 92       	push	r1
    1a2a:	0f 92       	push	r0
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	0f 92       	push	r0
    1a30:	11 24       	eor	r1, r1
    1a32:	2f 93       	push	r18
    1a34:	3f 93       	push	r19
    1a36:	4f 93       	push	r20
    1a38:	5f 93       	push	r21
    1a3a:	6f 93       	push	r22
    1a3c:	7f 93       	push	r23
    1a3e:	8f 93       	push	r24
    1a40:	9f 93       	push	r25
    1a42:	af 93       	push	r26
    1a44:	bf 93       	push	r27
    1a46:	ef 93       	push	r30
    1a48:	ff 93       	push	r31
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[0] != NULL)
    1a52:	80 91 9b 01 	lds	r24, 0x019B
    1a56:	90 91 9c 01 	lds	r25, 0x019C
    1a5a:	00 97       	sbiw	r24, 0x00	; 0
    1a5c:	49 f0       	breq	.+18     	; 0x1a70 <__vector_1+0x48>
	{
		EXTI_ApfunINTFun[0] (EXTI_ApvidGenericparameter[0]);
    1a5e:	e0 91 9b 01 	lds	r30, 0x019B
    1a62:	f0 91 9c 01 	lds	r31, 0x019C
    1a66:	80 91 a1 01 	lds	r24, 0x01A1
    1a6a:	90 91 a2 01 	lds	r25, 0x01A2
    1a6e:	09 95       	icall
	}
}
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	ff 91       	pop	r31
    1a76:	ef 91       	pop	r30
    1a78:	bf 91       	pop	r27
    1a7a:	af 91       	pop	r26
    1a7c:	9f 91       	pop	r25
    1a7e:	8f 91       	pop	r24
    1a80:	7f 91       	pop	r23
    1a82:	6f 91       	pop	r22
    1a84:	5f 91       	pop	r21
    1a86:	4f 91       	pop	r20
    1a88:	3f 91       	pop	r19
    1a8a:	2f 91       	pop	r18
    1a8c:	0f 90       	pop	r0
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	0f 90       	pop	r0
    1a92:	1f 90       	pop	r1
    1a94:	18 95       	reti

00001a96 <__vector_2>:

ISR(VECT_INT1)
{
    1a96:	1f 92       	push	r1
    1a98:	0f 92       	push	r0
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	0f 92       	push	r0
    1a9e:	11 24       	eor	r1, r1
    1aa0:	2f 93       	push	r18
    1aa2:	3f 93       	push	r19
    1aa4:	4f 93       	push	r20
    1aa6:	5f 93       	push	r21
    1aa8:	6f 93       	push	r22
    1aaa:	7f 93       	push	r23
    1aac:	8f 93       	push	r24
    1aae:	9f 93       	push	r25
    1ab0:	af 93       	push	r26
    1ab2:	bf 93       	push	r27
    1ab4:	ef 93       	push	r30
    1ab6:	ff 93       	push	r31
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[1] != NULL)
    1ac0:	80 91 9d 01 	lds	r24, 0x019D
    1ac4:	90 91 9e 01 	lds	r25, 0x019E
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	49 f0       	breq	.+18     	; 0x1ade <__vector_2+0x48>
	{
		EXTI_ApfunINTFun[1] (EXTI_ApvidGenericparameter[1]);
    1acc:	e0 91 9d 01 	lds	r30, 0x019D
    1ad0:	f0 91 9e 01 	lds	r31, 0x019E
    1ad4:	80 91 a3 01 	lds	r24, 0x01A3
    1ad8:	90 91 a4 01 	lds	r25, 0x01A4
    1adc:	09 95       	icall
	}
}
    1ade:	cf 91       	pop	r28
    1ae0:	df 91       	pop	r29
    1ae2:	ff 91       	pop	r31
    1ae4:	ef 91       	pop	r30
    1ae6:	bf 91       	pop	r27
    1ae8:	af 91       	pop	r26
    1aea:	9f 91       	pop	r25
    1aec:	8f 91       	pop	r24
    1aee:	7f 91       	pop	r23
    1af0:	6f 91       	pop	r22
    1af2:	5f 91       	pop	r21
    1af4:	4f 91       	pop	r20
    1af6:	3f 91       	pop	r19
    1af8:	2f 91       	pop	r18
    1afa:	0f 90       	pop	r0
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	0f 90       	pop	r0
    1b00:	1f 90       	pop	r1
    1b02:	18 95       	reti

00001b04 <__vector_3>:

ISR(VECT_INT2)
{
    1b04:	1f 92       	push	r1
    1b06:	0f 92       	push	r0
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	0f 92       	push	r0
    1b0c:	11 24       	eor	r1, r1
    1b0e:	2f 93       	push	r18
    1b10:	3f 93       	push	r19
    1b12:	4f 93       	push	r20
    1b14:	5f 93       	push	r21
    1b16:	6f 93       	push	r22
    1b18:	7f 93       	push	r23
    1b1a:	8f 93       	push	r24
    1b1c:	9f 93       	push	r25
    1b1e:	af 93       	push	r26
    1b20:	bf 93       	push	r27
    1b22:	ef 93       	push	r30
    1b24:	ff 93       	push	r31
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[2] != NULL)
    1b2e:	80 91 9f 01 	lds	r24, 0x019F
    1b32:	90 91 a0 01 	lds	r25, 0x01A0
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	49 f0       	breq	.+18     	; 0x1b4c <__vector_3+0x48>
	{
		EXTI_ApfunINTFun[2] (EXTI_ApvidGenericparameter[2]);
    1b3a:	e0 91 9f 01 	lds	r30, 0x019F
    1b3e:	f0 91 a0 01 	lds	r31, 0x01A0
    1b42:	80 91 a5 01 	lds	r24, 0x01A5
    1b46:	90 91 a6 01 	lds	r25, 0x01A6
    1b4a:	09 95       	icall
	}
}
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	ff 91       	pop	r31
    1b52:	ef 91       	pop	r30
    1b54:	bf 91       	pop	r27
    1b56:	af 91       	pop	r26
    1b58:	9f 91       	pop	r25
    1b5a:	8f 91       	pop	r24
    1b5c:	7f 91       	pop	r23
    1b5e:	6f 91       	pop	r22
    1b60:	5f 91       	pop	r21
    1b62:	4f 91       	pop	r20
    1b64:	3f 91       	pop	r19
    1b66:	2f 91       	pop	r18
    1b68:	0f 90       	pop	r0
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	0f 90       	pop	r0
    1b6e:	1f 90       	pop	r1
    1b70:	18 95       	reti

00001b72 <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"


ES_t DIO_enuInit(void){
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	0f 92       	push	r0
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1b7c:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    1b7e:	ea e3       	ldi	r30, 0x3A	; 58
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	8f ef       	ldi	r24, 0xFF	; 255
    1b84:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    1b86:	e7 e3       	ldi	r30, 0x37	; 55
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	8f ef       	ldi	r24, 0xFF	; 255
    1b8c:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    1b8e:	e4 e3       	ldi	r30, 0x34	; 52
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	8d ec       	ldi	r24, 0xCD	; 205
    1b94:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    1b96:	e1 e3       	ldi	r30, 0x31	; 49
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	8d ec       	ldi	r24, 0xCD	; 205
    1b9c:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    1b9e:	eb e3       	ldi	r30, 0x3B	; 59
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	10 82       	st	Z, r1
    PORTB = CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
    1ba4:	e8 e3       	ldi	r30, 0x38	; 56
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	89 e8       	ldi	r24, 0x89	; 137
    1baa:	80 83       	st	Z, r24
	PORTC = CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
    1bac:	e5 e3       	ldi	r30, 0x35	; 53
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	89 e2       	ldi	r24, 0x29	; 41
    1bb2:	80 83       	st	Z, r24
	PORTD = CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
    1bb4:	e2 e3       	ldi	r30, 0x32	; 50
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	89 e2       	ldi	r24, 0x29	; 41
    1bba:	80 83       	st	Z, r24
	 Local_enuErrorState = ES_OK;
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bc2:	0f 90       	pop	r0
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	08 95       	ret

00001bca <DIO_enuSetPortDirection>:


ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value){
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	00 d0       	rcall	.+0      	; 0x1bd0 <DIO_enuSetPortDirection+0x6>
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <DIO_enuSetPortDirection+0x8>
    1bd2:	0f 92       	push	r0
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	8a 83       	std	Y+2, r24	; 0x02
    1bda:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1bdc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	84 30       	cpi	r24, 0x04	; 4
    1be2:	a8 f5       	brcc	.+106    	; 0x1c4e <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	3d 83       	std	Y+5, r19	; 0x05
    1bec:	2c 83       	std	Y+4, r18	; 0x04
    1bee:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf2:	81 30       	cpi	r24, 0x01	; 1
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	d1 f0       	breq	.+52     	; 0x1c2c <DIO_enuSetPortDirection+0x62>
    1bf8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bfa:	3d 81       	ldd	r19, Y+5	; 0x05
    1bfc:	22 30       	cpi	r18, 0x02	; 2
    1bfe:	31 05       	cpc	r19, r1
    1c00:	2c f4       	brge	.+10     	; 0x1c0c <DIO_enuSetPortDirection+0x42>
    1c02:	8c 81       	ldd	r24, Y+4	; 0x04
    1c04:	9d 81       	ldd	r25, Y+5	; 0x05
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	61 f0       	breq	.+24     	; 0x1c22 <DIO_enuSetPortDirection+0x58>
    1c0a:	1e c0       	rjmp	.+60     	; 0x1c48 <DIO_enuSetPortDirection+0x7e>
    1c0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c10:	22 30       	cpi	r18, 0x02	; 2
    1c12:	31 05       	cpc	r19, r1
    1c14:	81 f0       	breq	.+32     	; 0x1c36 <DIO_enuSetPortDirection+0x6c>
    1c16:	8c 81       	ldd	r24, Y+4	; 0x04
    1c18:	9d 81       	ldd	r25, Y+5	; 0x05
    1c1a:	83 30       	cpi	r24, 0x03	; 3
    1c1c:	91 05       	cpc	r25, r1
    1c1e:	81 f0       	breq	.+32     	; 0x1c40 <DIO_enuSetPortDirection+0x76>
    1c20:	13 c0       	rjmp	.+38     	; 0x1c48 <DIO_enuSetPortDirection+0x7e>
		{
			case DIO_PORTA:
			DDRA = Copy_u8Value;
    1c22:	ea e3       	ldi	r30, 0x3A	; 58
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	80 83       	st	Z, r24
    1c2a:	0e c0       	rjmp	.+28     	; 0x1c48 <DIO_enuSetPortDirection+0x7e>
			break;

			case DIO_PORTB:
			DDRB = Copy_u8Value;
    1c2c:	e7 e3       	ldi	r30, 0x37	; 55
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	80 83       	st	Z, r24
    1c34:	09 c0       	rjmp	.+18     	; 0x1c48 <DIO_enuSetPortDirection+0x7e>
			break;

			case DIO_PORTC:
			DDRC = Copy_u8Value;
    1c36:	e4 e3       	ldi	r30, 0x34	; 52
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	80 83       	st	Z, r24
    1c3e:	04 c0       	rjmp	.+8      	; 0x1c48 <DIO_enuSetPortDirection+0x7e>
			break;

			case DIO_PORTD:
			DDRD = Copy_u8Value;
    1c40:	e1 e3       	ldi	r30, 0x31	; 49
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1c4e:	83 e0       	ldi	r24, 0x03	; 3
    1c50:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1c52:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	cf 91       	pop	r28
    1c60:	df 91       	pop	r29
    1c62:	08 95       	ret

00001c64 <DIO_enuSetPortVal>:
ES_t DIO_enuSetPortVal(u8 Copy_u8PortID, u8 Copy_u8Value){
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	00 d0       	rcall	.+0      	; 0x1c6a <DIO_enuSetPortVal+0x6>
    1c6a:	00 d0       	rcall	.+0      	; 0x1c6c <DIO_enuSetPortVal+0x8>
    1c6c:	0f 92       	push	r0
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	8a 83       	std	Y+2, r24	; 0x02
    1c74:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1c76:	19 82       	std	Y+1, r1	; 0x01

		if(Copy_u8PortID <= DIO_PORTD)
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	84 30       	cpi	r24, 0x04	; 4
    1c7c:	a8 f5       	brcc	.+106    	; 0x1ce8 <DIO_enuSetPortVal+0x84>
		{
			switch(Copy_u8PortID)
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	28 2f       	mov	r18, r24
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	3d 83       	std	Y+5, r19	; 0x05
    1c86:	2c 83       	std	Y+4, r18	; 0x04
    1c88:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8c:	81 30       	cpi	r24, 0x01	; 1
    1c8e:	91 05       	cpc	r25, r1
    1c90:	d1 f0       	breq	.+52     	; 0x1cc6 <DIO_enuSetPortVal+0x62>
    1c92:	2c 81       	ldd	r18, Y+4	; 0x04
    1c94:	3d 81       	ldd	r19, Y+5	; 0x05
    1c96:	22 30       	cpi	r18, 0x02	; 2
    1c98:	31 05       	cpc	r19, r1
    1c9a:	2c f4       	brge	.+10     	; 0x1ca6 <DIO_enuSetPortVal+0x42>
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca0:	00 97       	sbiw	r24, 0x00	; 0
    1ca2:	61 f0       	breq	.+24     	; 0x1cbc <DIO_enuSetPortVal+0x58>
    1ca4:	1e c0       	rjmp	.+60     	; 0x1ce2 <DIO_enuSetPortVal+0x7e>
    1ca6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca8:	3d 81       	ldd	r19, Y+5	; 0x05
    1caa:	22 30       	cpi	r18, 0x02	; 2
    1cac:	31 05       	cpc	r19, r1
    1cae:	81 f0       	breq	.+32     	; 0x1cd0 <DIO_enuSetPortVal+0x6c>
    1cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb4:	83 30       	cpi	r24, 0x03	; 3
    1cb6:	91 05       	cpc	r25, r1
    1cb8:	81 f0       	breq	.+32     	; 0x1cda <DIO_enuSetPortVal+0x76>
    1cba:	13 c0       	rjmp	.+38     	; 0x1ce2 <DIO_enuSetPortVal+0x7e>
			{
				case DIO_PORTA:
				PORTA = Copy_u8Value;
    1cbc:	eb e3       	ldi	r30, 0x3B	; 59
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	80 83       	st	Z, r24
    1cc4:	0e c0       	rjmp	.+28     	; 0x1ce2 <DIO_enuSetPortVal+0x7e>
				break;

				case DIO_PORTB:
				PORTB = Copy_u8Value;
    1cc6:	e8 e3       	ldi	r30, 0x38	; 56
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	80 83       	st	Z, r24
    1cce:	09 c0       	rjmp	.+18     	; 0x1ce2 <DIO_enuSetPortVal+0x7e>
				break;

				case DIO_PORTC:
				PORTC = Copy_u8Value;
    1cd0:	e5 e3       	ldi	r30, 0x35	; 53
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	80 83       	st	Z, r24
    1cd8:	04 c0       	rjmp	.+8      	; 0x1ce2 <DIO_enuSetPortVal+0x7e>
				break;

				case DIO_PORTD:
				PORTD = Copy_u8Value;
    1cda:	e2 e3       	ldi	r30, 0x32	; 50
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <DIO_enuSetPortVal+0x88>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1ce8:	83 e0       	ldi	r24, 0x03	; 3
    1cea:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_enuErrorState;
    1cec:	89 81       	ldd	r24, Y+1	; 0x01

}
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <DIO_enuGetPortVal>:
ES_t DIO_enuGetPortVal(u8 Copy_u8PortID, u8 *Copy_pu8Value){
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	00 d0       	rcall	.+0      	; 0x1d04 <DIO_enuGetPortVal+0x6>
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <DIO_enuGetPortVal+0x8>
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <DIO_enuGetPortVal+0xa>
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	8a 83       	std	Y+2, r24	; 0x02
    1d0e:	7c 83       	std	Y+4, r23	; 0x04
    1d10:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1d12:	19 82       	std	Y+1, r1	; 0x01
 if(Copy_pu8Value!=NULL){
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	9c 81       	ldd	r25, Y+4	; 0x04
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <DIO_enuGetPortVal+0x20>
    1d1c:	43 c0       	rjmp	.+134    	; 0x1da4 <DIO_enuGetPortVal+0xa6>
		if(Copy_u8PortID <= DIO_PORTD)
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	84 30       	cpi	r24, 0x04	; 4
    1d22:	e8 f5       	brcc	.+122    	; 0x1d9e <DIO_enuGetPortVal+0xa0>
		{
			switch(Copy_u8PortID)
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	28 2f       	mov	r18, r24
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	3e 83       	std	Y+6, r19	; 0x06
    1d2c:	2d 83       	std	Y+5, r18	; 0x05
    1d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d30:	9e 81       	ldd	r25, Y+6	; 0x06
    1d32:	81 30       	cpi	r24, 0x01	; 1
    1d34:	91 05       	cpc	r25, r1
    1d36:	e1 f0       	breq	.+56     	; 0x1d70 <DIO_enuGetPortVal+0x72>
    1d38:	2d 81       	ldd	r18, Y+5	; 0x05
    1d3a:	3e 81       	ldd	r19, Y+6	; 0x06
    1d3c:	22 30       	cpi	r18, 0x02	; 2
    1d3e:	31 05       	cpc	r19, r1
    1d40:	2c f4       	brge	.+10     	; 0x1d4c <DIO_enuGetPortVal+0x4e>
    1d42:	8d 81       	ldd	r24, Y+5	; 0x05
    1d44:	9e 81       	ldd	r25, Y+6	; 0x06
    1d46:	00 97       	sbiw	r24, 0x00	; 0
    1d48:	61 f0       	breq	.+24     	; 0x1d62 <DIO_enuGetPortVal+0x64>
    1d4a:	26 c0       	rjmp	.+76     	; 0x1d98 <DIO_enuGetPortVal+0x9a>
    1d4c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d4e:	3e 81       	ldd	r19, Y+6	; 0x06
    1d50:	22 30       	cpi	r18, 0x02	; 2
    1d52:	31 05       	cpc	r19, r1
    1d54:	a1 f0       	breq	.+40     	; 0x1d7e <DIO_enuGetPortVal+0x80>
    1d56:	8d 81       	ldd	r24, Y+5	; 0x05
    1d58:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5a:	83 30       	cpi	r24, 0x03	; 3
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	b1 f0       	breq	.+44     	; 0x1d8c <DIO_enuGetPortVal+0x8e>
    1d60:	1b c0       	rjmp	.+54     	; 0x1d98 <DIO_enuGetPortVal+0x9a>
			{
				case DIO_PORTA:
				 *Copy_pu8Value=PINA; //PINA is a reg not pin
    1d62:	e9 e3       	ldi	r30, 0x39	; 57
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	eb 81       	ldd	r30, Y+3	; 0x03
    1d6a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d6c:	80 83       	st	Z, r24
    1d6e:	14 c0       	rjmp	.+40     	; 0x1d98 <DIO_enuGetPortVal+0x9a>
				break;

				case DIO_PORTB:
				 *Copy_pu8Value=PINB;
    1d70:	e6 e3       	ldi	r30, 0x36	; 54
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	eb 81       	ldd	r30, Y+3	; 0x03
    1d78:	fc 81       	ldd	r31, Y+4	; 0x04
    1d7a:	80 83       	st	Z, r24
    1d7c:	0d c0       	rjmp	.+26     	; 0x1d98 <DIO_enuGetPortVal+0x9a>
				break;

				case DIO_PORTC:
				 *Copy_pu8Value=PINC;
    1d7e:	e3 e3       	ldi	r30, 0x33	; 51
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	eb 81       	ldd	r30, Y+3	; 0x03
    1d86:	fc 81       	ldd	r31, Y+4	; 0x04
    1d88:	80 83       	st	Z, r24
    1d8a:	06 c0       	rjmp	.+12     	; 0x1d98 <DIO_enuGetPortVal+0x9a>
				break;

				case DIO_PORTD:
			    *Copy_pu8Value=PIND;
    1d8c:	e0 e3       	ldi	r30, 0x30	; 48
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	eb 81       	ldd	r30, Y+3	; 0x03
    1d94:	fc 81       	ldd	r31, Y+4	; 0x04
    1d96:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	89 83       	std	Y+1, r24	; 0x01
    1d9c:	05 c0       	rjmp	.+10     	; 0x1da8 <DIO_enuGetPortVal+0xaa>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1d9e:	83 e0       	ldi	r24, 0x03	; 3
    1da0:	89 83       	std	Y+1, r24	; 0x01
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <DIO_enuGetPortVal+0xaa>
		}
 }
 else{
	 Local_enuErrorState = ES_NULL_POINTER;
    1da4:	82 e0       	ldi	r24, 0x02	; 2
    1da6:	89 83       	std	Y+1, r24	; 0x01
 }
		return Local_enuErrorState;
    1da8:	89 81       	ldd	r24, Y+1	; 0x01


}
    1daa:	26 96       	adiw	r28, 0x06	; 6
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	de bf       	out	0x3e, r29	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	cd bf       	out	0x3d, r28	; 61
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	08 95       	ret

00001dbc <DIO_enuTogPortVal>:
ES_t DIO_enuTogPortVal(u8 Copy_u8PortID){
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	00 d0       	rcall	.+0      	; 0x1dc2 <DIO_enuTogPortVal+0x6>
    1dc2:	00 d0       	rcall	.+0      	; 0x1dc4 <DIO_enuTogPortVal+0x8>
    1dc4:	cd b7       	in	r28, 0x3d	; 61
    1dc6:	de b7       	in	r29, 0x3e	; 62
    1dc8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1dca:	19 82       	std	Y+1, r1	; 0x01

			if(Copy_u8PortID <= DIO_PORTD)
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	84 30       	cpi	r24, 0x04	; 4
    1dd0:	08 f0       	brcs	.+2      	; 0x1dd4 <DIO_enuTogPortVal+0x18>
    1dd2:	41 c0       	rjmp	.+130    	; 0x1e56 <DIO_enuTogPortVal+0x9a>
			{
				switch(Copy_u8PortID)
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	3c 83       	std	Y+4, r19	; 0x04
    1ddc:	2b 83       	std	Y+3, r18	; 0x03
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	9c 81       	ldd	r25, Y+4	; 0x04
    1de2:	81 30       	cpi	r24, 0x01	; 1
    1de4:	91 05       	cpc	r25, r1
    1de6:	e9 f0       	breq	.+58     	; 0x1e22 <DIO_enuTogPortVal+0x66>
    1de8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dea:	3c 81       	ldd	r19, Y+4	; 0x04
    1dec:	22 30       	cpi	r18, 0x02	; 2
    1dee:	31 05       	cpc	r19, r1
    1df0:	2c f4       	brge	.+10     	; 0x1dfc <DIO_enuTogPortVal+0x40>
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	9c 81       	ldd	r25, Y+4	; 0x04
    1df6:	00 97       	sbiw	r24, 0x00	; 0
    1df8:	61 f0       	breq	.+24     	; 0x1e12 <DIO_enuTogPortVal+0x56>
    1dfa:	2a c0       	rjmp	.+84     	; 0x1e50 <DIO_enuTogPortVal+0x94>
    1dfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dfe:	3c 81       	ldd	r19, Y+4	; 0x04
    1e00:	22 30       	cpi	r18, 0x02	; 2
    1e02:	31 05       	cpc	r19, r1
    1e04:	b1 f0       	breq	.+44     	; 0x1e32 <DIO_enuTogPortVal+0x76>
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0a:	83 30       	cpi	r24, 0x03	; 3
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	c9 f0       	breq	.+50     	; 0x1e42 <DIO_enuTogPortVal+0x86>
    1e10:	1f c0       	rjmp	.+62     	; 0x1e50 <DIO_enuTogPortVal+0x94>
				{
					case DIO_PORTA:
					 PORTA=~PORTA;
    1e12:	ab e3       	ldi	r26, 0x3B	; 59
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	eb e3       	ldi	r30, 0x3B	; 59
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	80 95       	com	r24
    1e1e:	8c 93       	st	X, r24
    1e20:	17 c0       	rjmp	.+46     	; 0x1e50 <DIO_enuTogPortVal+0x94>
					break;

					case DIO_PORTB:
					 PORTB=~PORTB;
    1e22:	a8 e3       	ldi	r26, 0x38	; 56
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e8 e3       	ldi	r30, 0x38	; 56
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	80 95       	com	r24
    1e2e:	8c 93       	st	X, r24
    1e30:	0f c0       	rjmp	.+30     	; 0x1e50 <DIO_enuTogPortVal+0x94>
					break;

					case DIO_PORTC:
					 PORTC=~PORTC;
    1e32:	a5 e3       	ldi	r26, 0x35	; 53
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e5 e3       	ldi	r30, 0x35	; 53
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	80 95       	com	r24
    1e3e:	8c 93       	st	X, r24
    1e40:	07 c0       	rjmp	.+14     	; 0x1e50 <DIO_enuTogPortVal+0x94>
					break;

					case DIO_PORTD:
					 PORTD=~PORTD;
    1e42:	a2 e3       	ldi	r26, 0x32	; 50
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e2 e3       	ldi	r30, 0x32	; 50
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	80 95       	com	r24
    1e4e:	8c 93       	st	X, r24
					break;
				}
				Local_enuErrorState = ES_OK;
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	89 83       	std	Y+1, r24	; 0x01
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <DIO_enuTogPortVal+0x9e>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    1e56:	83 e0       	ldi	r24, 0x03	; 3
    1e58:	89 83       	std	Y+1, r24	; 0x01
			}

			return Local_enuErrorState;
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <DIO_enuSetPinDirection>:


ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID, u8  Copy_u8Value){
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	00 d0       	rcall	.+0      	; 0x1e70 <DIO_enuSetPinDirection+0x6>
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <DIO_enuSetPinDirection+0x8>
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <DIO_enuSetPinDirection+0xa>
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	8a 83       	std	Y+2, r24	; 0x02
    1e7a:	6b 83       	std	Y+3, r22	; 0x03
    1e7c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1e7e:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8PortID <= DIO_PORTD	&& Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT){
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	84 30       	cpi	r24, 0x04	; 4
    1e84:	08 f0       	brcs	.+2      	; 0x1e88 <DIO_enuSetPinDirection+0x1e>
    1e86:	d1 c0       	rjmp	.+418    	; 0x202a <DIO_enuSetPinDirection+0x1c0>
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	88 30       	cpi	r24, 0x08	; 8
    1e8c:	08 f0       	brcs	.+2      	; 0x1e90 <DIO_enuSetPinDirection+0x26>
    1e8e:	cd c0       	rjmp	.+410    	; 0x202a <DIO_enuSetPinDirection+0x1c0>
    1e90:	8c 81       	ldd	r24, Y+4	; 0x04
    1e92:	82 30       	cpi	r24, 0x02	; 2
    1e94:	08 f0       	brcs	.+2      	; 0x1e98 <DIO_enuSetPinDirection+0x2e>
    1e96:	c9 c0       	rjmp	.+402    	; 0x202a <DIO_enuSetPinDirection+0x1c0>
	switch(Copy_u8PortID)
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	3e 83       	std	Y+6, r19	; 0x06
    1ea0:	2d 83       	std	Y+5, r18	; 0x05
    1ea2:	6d 81       	ldd	r22, Y+5	; 0x05
    1ea4:	7e 81       	ldd	r23, Y+6	; 0x06
    1ea6:	61 30       	cpi	r22, 0x01	; 1
    1ea8:	71 05       	cpc	r23, r1
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <DIO_enuSetPinDirection+0x44>
    1eac:	41 c0       	rjmp	.+130    	; 0x1f30 <DIO_enuSetPinDirection+0xc6>
    1eae:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb2:	82 30       	cpi	r24, 0x02	; 2
    1eb4:	91 05       	cpc	r25, r1
    1eb6:	34 f4       	brge	.+12     	; 0x1ec4 <DIO_enuSetPinDirection+0x5a>
    1eb8:	2d 81       	ldd	r18, Y+5	; 0x05
    1eba:	3e 81       	ldd	r19, Y+6	; 0x06
    1ebc:	21 15       	cp	r18, r1
    1ebe:	31 05       	cpc	r19, r1
    1ec0:	71 f0       	breq	.+28     	; 0x1ede <DIO_enuSetPinDirection+0x74>
    1ec2:	b0 c0       	rjmp	.+352    	; 0x2024 <DIO_enuSetPinDirection+0x1ba>
    1ec4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ec6:	7e 81       	ldd	r23, Y+6	; 0x06
    1ec8:	62 30       	cpi	r22, 0x02	; 2
    1eca:	71 05       	cpc	r23, r1
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <DIO_enuSetPinDirection+0x66>
    1ece:	59 c0       	rjmp	.+178    	; 0x1f82 <DIO_enuSetPinDirection+0x118>
    1ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed4:	83 30       	cpi	r24, 0x03	; 3
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <DIO_enuSetPinDirection+0x72>
    1eda:	7c c0       	rjmp	.+248    	; 0x1fd4 <DIO_enuSetPinDirection+0x16a>
    1edc:	a3 c0       	rjmp	.+326    	; 0x2024 <DIO_enuSetPinDirection+0x1ba>
				{
					case DIO_PORTA:
						DDRA &=~(1 << Copy_u8PinID);
    1ede:	aa e3       	ldi	r26, 0x3A	; 58
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	ea e3       	ldi	r30, 0x3A	; 58
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	48 2f       	mov	r20, r24
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	28 2f       	mov	r18, r24
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <DIO_enuSetPinDirection+0x90>
    1ef6:	88 0f       	add	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	2a 95       	dec	r18
    1efc:	e2 f7       	brpl	.-8      	; 0x1ef6 <DIO_enuSetPinDirection+0x8c>
    1efe:	80 95       	com	r24
    1f00:	84 23       	and	r24, r20
    1f02:	8c 93       	st	X, r24
						DDRA |= (Copy_u8Value << Copy_u8PinID);
    1f04:	aa e3       	ldi	r26, 0x3A	; 58
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	ea e3       	ldi	r30, 0x3A	; 58
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	48 2f       	mov	r20, r24
    1f10:	8c 81       	ldd	r24, Y+4	; 0x04
    1f12:	28 2f       	mov	r18, r24
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	88 2f       	mov	r24, r24
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	b9 01       	movw	r22, r18
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <DIO_enuSetPinDirection+0xba>
    1f20:	66 0f       	add	r22, r22
    1f22:	77 1f       	adc	r23, r23
    1f24:	8a 95       	dec	r24
    1f26:	e2 f7       	brpl	.-8      	; 0x1f20 <DIO_enuSetPinDirection+0xb6>
    1f28:	cb 01       	movw	r24, r22
    1f2a:	84 2b       	or	r24, r20
    1f2c:	8c 93       	st	X, r24
    1f2e:	7a c0       	rjmp	.+244    	; 0x2024 <DIO_enuSetPinDirection+0x1ba>
					break;

					case DIO_PORTB:
						DDRB &=~(1 << Copy_u8PinID);
    1f30:	a7 e3       	ldi	r26, 0x37	; 55
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e7 e3       	ldi	r30, 0x37	; 55
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	48 2f       	mov	r20, r24
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <DIO_enuSetPinDirection+0xe2>
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	2a 95       	dec	r18
    1f4e:	e2 f7       	brpl	.-8      	; 0x1f48 <DIO_enuSetPinDirection+0xde>
    1f50:	80 95       	com	r24
    1f52:	84 23       	and	r24, r20
    1f54:	8c 93       	st	X, r24
					    DDRB |= (Copy_u8Value << Copy_u8PinID);
    1f56:	a7 e3       	ldi	r26, 0x37	; 55
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	e7 e3       	ldi	r30, 0x37	; 55
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	48 2f       	mov	r20, r24
    1f62:	8c 81       	ldd	r24, Y+4	; 0x04
    1f64:	28 2f       	mov	r18, r24
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	88 2f       	mov	r24, r24
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	b9 01       	movw	r22, r18
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <DIO_enuSetPinDirection+0x10c>
    1f72:	66 0f       	add	r22, r22
    1f74:	77 1f       	adc	r23, r23
    1f76:	8a 95       	dec	r24
    1f78:	e2 f7       	brpl	.-8      	; 0x1f72 <DIO_enuSetPinDirection+0x108>
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	84 2b       	or	r24, r20
    1f7e:	8c 93       	st	X, r24
    1f80:	51 c0       	rjmp	.+162    	; 0x2024 <DIO_enuSetPinDirection+0x1ba>
					break;

					case DIO_PORTC:
						DDRC &=~(1 << Copy_u8PinID);
    1f82:	a4 e3       	ldi	r26, 0x34	; 52
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e4 e3       	ldi	r30, 0x34	; 52
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	48 2f       	mov	r20, r24
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <DIO_enuSetPinDirection+0x134>
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	2a 95       	dec	r18
    1fa0:	e2 f7       	brpl	.-8      	; 0x1f9a <DIO_enuSetPinDirection+0x130>
    1fa2:	80 95       	com	r24
    1fa4:	84 23       	and	r24, r20
    1fa6:	8c 93       	st	X, r24
						DDRC|= (Copy_u8Value << Copy_u8PinID);
    1fa8:	a4 e3       	ldi	r26, 0x34	; 52
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e4 e3       	ldi	r30, 0x34	; 52
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	48 2f       	mov	r20, r24
    1fb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	88 2f       	mov	r24, r24
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	b9 01       	movw	r22, r18
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <DIO_enuSetPinDirection+0x15e>
    1fc4:	66 0f       	add	r22, r22
    1fc6:	77 1f       	adc	r23, r23
    1fc8:	8a 95       	dec	r24
    1fca:	e2 f7       	brpl	.-8      	; 0x1fc4 <DIO_enuSetPinDirection+0x15a>
    1fcc:	cb 01       	movw	r24, r22
    1fce:	84 2b       	or	r24, r20
    1fd0:	8c 93       	st	X, r24
    1fd2:	28 c0       	rjmp	.+80     	; 0x2024 <DIO_enuSetPinDirection+0x1ba>
					break;

					case DIO_PORTD:
						DDRD &=~(1 << Copy_u8PinID);
    1fd4:	a1 e3       	ldi	r26, 0x31	; 49
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e1 e3       	ldi	r30, 0x31	; 49
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	48 2f       	mov	r20, r24
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	28 2f       	mov	r18, r24
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <DIO_enuSetPinDirection+0x186>
    1fec:	88 0f       	add	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	2a 95       	dec	r18
    1ff2:	e2 f7       	brpl	.-8      	; 0x1fec <DIO_enuSetPinDirection+0x182>
    1ff4:	80 95       	com	r24
    1ff6:	84 23       	and	r24, r20
    1ff8:	8c 93       	st	X, r24
						DDRD |= (Copy_u8Value << Copy_u8PinID);
    1ffa:	a1 e3       	ldi	r26, 0x31	; 49
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	e1 e3       	ldi	r30, 0x31	; 49
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	48 2f       	mov	r20, r24
    2006:	8c 81       	ldd	r24, Y+4	; 0x04
    2008:	28 2f       	mov	r18, r24
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	88 2f       	mov	r24, r24
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	b9 01       	movw	r22, r18
    2014:	02 c0       	rjmp	.+4      	; 0x201a <DIO_enuSetPinDirection+0x1b0>
    2016:	66 0f       	add	r22, r22
    2018:	77 1f       	adc	r23, r23
    201a:	8a 95       	dec	r24
    201c:	e2 f7       	brpl	.-8      	; 0x2016 <DIO_enuSetPinDirection+0x1ac>
    201e:	cb 01       	movw	r24, r22
    2020:	84 2b       	or	r24, r20
    2022:	8c 93       	st	X, r24
					break;
				}
				Local_enuErrorState = ES_OK;
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	89 83       	std	Y+1, r24	; 0x01
    2028:	02 c0       	rjmp	.+4      	; 0x202e <DIO_enuSetPinDirection+0x1c4>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    202a:	83 e0       	ldi	r24, 0x03	; 3
    202c:	89 83       	std	Y+1, r24	; 0x01
			}

			return Local_enuErrorState;
    202e:	89 81       	ldd	r24, Y+1	; 0x01

}
    2030:	26 96       	adiw	r28, 0x06	; 6
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	08 95       	ret

00002042 <DIO_enuSetPinVal>:

ES_t DIO_enuSetPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID, u8 Copy_u8Value){
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	00 d0       	rcall	.+0      	; 0x2048 <DIO_enuSetPinVal+0x6>
    2048:	00 d0       	rcall	.+0      	; 0x204a <DIO_enuSetPinVal+0x8>
    204a:	00 d0       	rcall	.+0      	; 0x204c <DIO_enuSetPinVal+0xa>
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    2050:	8a 83       	std	Y+2, r24	; 0x02
    2052:	6b 83       	std	Y+3, r22	; 0x03
    2054:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2056:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_PORTD	&& Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= HIGH){
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	84 30       	cpi	r24, 0x04	; 4
    205c:	08 f0       	brcs	.+2      	; 0x2060 <DIO_enuSetPinVal+0x1e>
    205e:	d1 c0       	rjmp	.+418    	; 0x2202 <DIO_enuSetPinVal+0x1c0>
    2060:	8b 81       	ldd	r24, Y+3	; 0x03
    2062:	88 30       	cpi	r24, 0x08	; 8
    2064:	08 f0       	brcs	.+2      	; 0x2068 <DIO_enuSetPinVal+0x26>
    2066:	cd c0       	rjmp	.+410    	; 0x2202 <DIO_enuSetPinVal+0x1c0>
    2068:	8c 81       	ldd	r24, Y+4	; 0x04
    206a:	82 30       	cpi	r24, 0x02	; 2
    206c:	08 f0       	brcs	.+2      	; 0x2070 <DIO_enuSetPinVal+0x2e>
    206e:	c9 c0       	rjmp	.+402    	; 0x2202 <DIO_enuSetPinVal+0x1c0>
		switch(Copy_u8PortID)
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	3e 83       	std	Y+6, r19	; 0x06
    2078:	2d 83       	std	Y+5, r18	; 0x05
    207a:	6d 81       	ldd	r22, Y+5	; 0x05
    207c:	7e 81       	ldd	r23, Y+6	; 0x06
    207e:	61 30       	cpi	r22, 0x01	; 1
    2080:	71 05       	cpc	r23, r1
    2082:	09 f4       	brne	.+2      	; 0x2086 <DIO_enuSetPinVal+0x44>
    2084:	41 c0       	rjmp	.+130    	; 0x2108 <DIO_enuSetPinVal+0xc6>
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	9e 81       	ldd	r25, Y+6	; 0x06
    208a:	82 30       	cpi	r24, 0x02	; 2
    208c:	91 05       	cpc	r25, r1
    208e:	34 f4       	brge	.+12     	; 0x209c <DIO_enuSetPinVal+0x5a>
    2090:	2d 81       	ldd	r18, Y+5	; 0x05
    2092:	3e 81       	ldd	r19, Y+6	; 0x06
    2094:	21 15       	cp	r18, r1
    2096:	31 05       	cpc	r19, r1
    2098:	71 f0       	breq	.+28     	; 0x20b6 <DIO_enuSetPinVal+0x74>
    209a:	b0 c0       	rjmp	.+352    	; 0x21fc <DIO_enuSetPinVal+0x1ba>
    209c:	6d 81       	ldd	r22, Y+5	; 0x05
    209e:	7e 81       	ldd	r23, Y+6	; 0x06
    20a0:	62 30       	cpi	r22, 0x02	; 2
    20a2:	71 05       	cpc	r23, r1
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <DIO_enuSetPinVal+0x66>
    20a6:	59 c0       	rjmp	.+178    	; 0x215a <DIO_enuSetPinVal+0x118>
    20a8:	8d 81       	ldd	r24, Y+5	; 0x05
    20aa:	9e 81       	ldd	r25, Y+6	; 0x06
    20ac:	83 30       	cpi	r24, 0x03	; 3
    20ae:	91 05       	cpc	r25, r1
    20b0:	09 f4       	brne	.+2      	; 0x20b4 <DIO_enuSetPinVal+0x72>
    20b2:	7c c0       	rjmp	.+248    	; 0x21ac <DIO_enuSetPinVal+0x16a>
    20b4:	a3 c0       	rjmp	.+326    	; 0x21fc <DIO_enuSetPinVal+0x1ba>
					{
						case DIO_PORTA:
							PORTA &=~(1 << Copy_u8PinID);
    20b6:	ab e3       	ldi	r26, 0x3B	; 59
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	eb e3       	ldi	r30, 0x3B	; 59
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	48 2f       	mov	r20, r24
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	28 2f       	mov	r18, r24
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <DIO_enuSetPinVal+0x90>
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	2a 95       	dec	r18
    20d4:	e2 f7       	brpl	.-8      	; 0x20ce <DIO_enuSetPinVal+0x8c>
    20d6:	80 95       	com	r24
    20d8:	84 23       	and	r24, r20
    20da:	8c 93       	st	X, r24
							PORTA |= (Copy_u8Value << Copy_u8PinID);
    20dc:	ab e3       	ldi	r26, 0x3B	; 59
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	eb e3       	ldi	r30, 0x3B	; 59
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	48 2f       	mov	r20, r24
    20e8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	88 2f       	mov	r24, r24
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	b9 01       	movw	r22, r18
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <DIO_enuSetPinVal+0xba>
    20f8:	66 0f       	add	r22, r22
    20fa:	77 1f       	adc	r23, r23
    20fc:	8a 95       	dec	r24
    20fe:	e2 f7       	brpl	.-8      	; 0x20f8 <DIO_enuSetPinVal+0xb6>
    2100:	cb 01       	movw	r24, r22
    2102:	84 2b       	or	r24, r20
    2104:	8c 93       	st	X, r24
    2106:	7a c0       	rjmp	.+244    	; 0x21fc <DIO_enuSetPinVal+0x1ba>
						break;

						case DIO_PORTB:
							PORTB &=~(1 << Copy_u8PinID);
    2108:	a8 e3       	ldi	r26, 0x38	; 56
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e8 e3       	ldi	r30, 0x38	; 56
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	48 2f       	mov	r20, r24
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	28 2f       	mov	r18, r24
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <DIO_enuSetPinVal+0xe2>
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	2a 95       	dec	r18
    2126:	e2 f7       	brpl	.-8      	; 0x2120 <DIO_enuSetPinVal+0xde>
    2128:	80 95       	com	r24
    212a:	84 23       	and	r24, r20
    212c:	8c 93       	st	X, r24
							PORTB |= (Copy_u8Value << Copy_u8PinID);
    212e:	a8 e3       	ldi	r26, 0x38	; 56
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e8 e3       	ldi	r30, 0x38	; 56
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	48 2f       	mov	r20, r24
    213a:	8c 81       	ldd	r24, Y+4	; 0x04
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	88 2f       	mov	r24, r24
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	b9 01       	movw	r22, r18
    2148:	02 c0       	rjmp	.+4      	; 0x214e <DIO_enuSetPinVal+0x10c>
    214a:	66 0f       	add	r22, r22
    214c:	77 1f       	adc	r23, r23
    214e:	8a 95       	dec	r24
    2150:	e2 f7       	brpl	.-8      	; 0x214a <DIO_enuSetPinVal+0x108>
    2152:	cb 01       	movw	r24, r22
    2154:	84 2b       	or	r24, r20
    2156:	8c 93       	st	X, r24
    2158:	51 c0       	rjmp	.+162    	; 0x21fc <DIO_enuSetPinVal+0x1ba>
						break;

						case DIO_PORTC:
							PORTC &=~(1 << Copy_u8PinID);
    215a:	a5 e3       	ldi	r26, 0x35	; 53
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	e5 e3       	ldi	r30, 0x35	; 53
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	48 2f       	mov	r20, r24
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	28 2f       	mov	r18, r24
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	02 c0       	rjmp	.+4      	; 0x2176 <DIO_enuSetPinVal+0x134>
    2172:	88 0f       	add	r24, r24
    2174:	99 1f       	adc	r25, r25
    2176:	2a 95       	dec	r18
    2178:	e2 f7       	brpl	.-8      	; 0x2172 <DIO_enuSetPinVal+0x130>
    217a:	80 95       	com	r24
    217c:	84 23       	and	r24, r20
    217e:	8c 93       	st	X, r24
							PORTC|= (Copy_u8Value << Copy_u8PinID);
    2180:	a5 e3       	ldi	r26, 0x35	; 53
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	e5 e3       	ldi	r30, 0x35	; 53
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	48 2f       	mov	r20, r24
    218c:	8c 81       	ldd	r24, Y+4	; 0x04
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	88 2f       	mov	r24, r24
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	b9 01       	movw	r22, r18
    219a:	02 c0       	rjmp	.+4      	; 0x21a0 <DIO_enuSetPinVal+0x15e>
    219c:	66 0f       	add	r22, r22
    219e:	77 1f       	adc	r23, r23
    21a0:	8a 95       	dec	r24
    21a2:	e2 f7       	brpl	.-8      	; 0x219c <DIO_enuSetPinVal+0x15a>
    21a4:	cb 01       	movw	r24, r22
    21a6:	84 2b       	or	r24, r20
    21a8:	8c 93       	st	X, r24
    21aa:	28 c0       	rjmp	.+80     	; 0x21fc <DIO_enuSetPinVal+0x1ba>
						break;

						case DIO_PORTD:
							PORTD &=~(1 << Copy_u8PinID);
    21ac:	a2 e3       	ldi	r26, 0x32	; 50
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e2 e3       	ldi	r30, 0x32	; 50
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	48 2f       	mov	r20, r24
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	28 2f       	mov	r18, r24
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	02 c0       	rjmp	.+4      	; 0x21c8 <DIO_enuSetPinVal+0x186>
    21c4:	88 0f       	add	r24, r24
    21c6:	99 1f       	adc	r25, r25
    21c8:	2a 95       	dec	r18
    21ca:	e2 f7       	brpl	.-8      	; 0x21c4 <DIO_enuSetPinVal+0x182>
    21cc:	80 95       	com	r24
    21ce:	84 23       	and	r24, r20
    21d0:	8c 93       	st	X, r24
							PORTD |= (Copy_u8Value << Copy_u8PinID);
    21d2:	a2 e3       	ldi	r26, 0x32	; 50
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	e2 e3       	ldi	r30, 0x32	; 50
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	48 2f       	mov	r20, r24
    21de:	8c 81       	ldd	r24, Y+4	; 0x04
    21e0:	28 2f       	mov	r18, r24
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	88 2f       	mov	r24, r24
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	b9 01       	movw	r22, r18
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <DIO_enuSetPinVal+0x1b0>
    21ee:	66 0f       	add	r22, r22
    21f0:	77 1f       	adc	r23, r23
    21f2:	8a 95       	dec	r24
    21f4:	e2 f7       	brpl	.-8      	; 0x21ee <DIO_enuSetPinVal+0x1ac>
    21f6:	cb 01       	movw	r24, r22
    21f8:	84 2b       	or	r24, r20
    21fa:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorState = ES_OK;
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	89 83       	std	Y+1, r24	; 0x01
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <DIO_enuSetPinVal+0x1c4>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
    2202:	83 e0       	ldi	r24, 0x03	; 3
    2204:	89 83       	std	Y+1, r24	; 0x01
				}

				return Local_enuErrorState;
    2206:	89 81       	ldd	r24, Y+1	; 0x01
}
    2208:	26 96       	adiw	r28, 0x06	; 6
    220a:	0f b6       	in	r0, 0x3f	; 63
    220c:	f8 94       	cli
    220e:	de bf       	out	0x3e, r29	; 62
    2210:	0f be       	out	0x3f, r0	; 63
    2212:	cd bf       	out	0x3d, r28	; 61
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	08 95       	ret

0000221a <DIO_enuGetPinVal>:

ES_t DIO_enuGetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID,u8 *Copy_pu8Value){
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
    2222:	27 97       	sbiw	r28, 0x07	; 7
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	de bf       	out	0x3e, r29	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	cd bf       	out	0x3d, r28	; 61
    222e:	8a 83       	std	Y+2, r24	; 0x02
    2230:	6b 83       	std	Y+3, r22	; 0x03
    2232:	5d 83       	std	Y+5, r21	; 0x05
    2234:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2236:	19 82       	std	Y+1, r1	; 0x01

	 if(Copy_pu8Value!=NULL){
    2238:	8c 81       	ldd	r24, Y+4	; 0x04
    223a:	9d 81       	ldd	r25, Y+5	; 0x05
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	09 f4       	brne	.+2      	; 0x2242 <DIO_enuGetPinVal+0x28>
    2240:	7a c0       	rjmp	.+244    	; 0x2336 <DIO_enuGetPinVal+0x11c>
			if(Copy_u8PortID <= DIO_PORTD)
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	84 30       	cpi	r24, 0x04	; 4
    2246:	08 f0       	brcs	.+2      	; 0x224a <DIO_enuGetPinVal+0x30>
    2248:	73 c0       	rjmp	.+230    	; 0x2330 <DIO_enuGetPinVal+0x116>
			{
				switch(Copy_u8PortID)
    224a:	8a 81       	ldd	r24, Y+2	; 0x02
    224c:	28 2f       	mov	r18, r24
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	3f 83       	std	Y+7, r19	; 0x07
    2252:	2e 83       	std	Y+6, r18	; 0x06
    2254:	4e 81       	ldd	r20, Y+6	; 0x06
    2256:	5f 81       	ldd	r21, Y+7	; 0x07
    2258:	41 30       	cpi	r20, 0x01	; 1
    225a:	51 05       	cpc	r21, r1
    225c:	59 f1       	breq	.+86     	; 0x22b4 <DIO_enuGetPinVal+0x9a>
    225e:	8e 81       	ldd	r24, Y+6	; 0x06
    2260:	9f 81       	ldd	r25, Y+7	; 0x07
    2262:	82 30       	cpi	r24, 0x02	; 2
    2264:	91 05       	cpc	r25, r1
    2266:	34 f4       	brge	.+12     	; 0x2274 <DIO_enuGetPinVal+0x5a>
    2268:	2e 81       	ldd	r18, Y+6	; 0x06
    226a:	3f 81       	ldd	r19, Y+7	; 0x07
    226c:	21 15       	cp	r18, r1
    226e:	31 05       	cpc	r19, r1
    2270:	69 f0       	breq	.+26     	; 0x228c <DIO_enuGetPinVal+0x72>
    2272:	5b c0       	rjmp	.+182    	; 0x232a <DIO_enuGetPinVal+0x110>
    2274:	4e 81       	ldd	r20, Y+6	; 0x06
    2276:	5f 81       	ldd	r21, Y+7	; 0x07
    2278:	42 30       	cpi	r20, 0x02	; 2
    227a:	51 05       	cpc	r21, r1
    227c:	79 f1       	breq	.+94     	; 0x22dc <DIO_enuGetPinVal+0xc2>
    227e:	8e 81       	ldd	r24, Y+6	; 0x06
    2280:	9f 81       	ldd	r25, Y+7	; 0x07
    2282:	83 30       	cpi	r24, 0x03	; 3
    2284:	91 05       	cpc	r25, r1
    2286:	09 f4       	brne	.+2      	; 0x228a <DIO_enuGetPinVal+0x70>
    2288:	3d c0       	rjmp	.+122    	; 0x2304 <DIO_enuGetPinVal+0xea>
    228a:	4f c0       	rjmp	.+158    	; 0x232a <DIO_enuGetPinVal+0x110>
				{
					case DIO_PORTA:
					 *Copy_pu8Value=((PINA >> Copy_u8PinID) & 1);
    228c:	e9 e3       	ldi	r30, 0x39	; 57
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	8b 81       	ldd	r24, Y+3	; 0x03
    2298:	88 2f       	mov	r24, r24
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	a9 01       	movw	r20, r18
    229e:	02 c0       	rjmp	.+4      	; 0x22a4 <DIO_enuGetPinVal+0x8a>
    22a0:	55 95       	asr	r21
    22a2:	47 95       	ror	r20
    22a4:	8a 95       	dec	r24
    22a6:	e2 f7       	brpl	.-8      	; 0x22a0 <DIO_enuGetPinVal+0x86>
    22a8:	ca 01       	movw	r24, r20
    22aa:	81 70       	andi	r24, 0x01	; 1
    22ac:	ec 81       	ldd	r30, Y+4	; 0x04
    22ae:	fd 81       	ldd	r31, Y+5	; 0x05
    22b0:	80 83       	st	Z, r24
    22b2:	3b c0       	rjmp	.+118    	; 0x232a <DIO_enuGetPinVal+0x110>
					break;

					case DIO_PORTB:
					 *Copy_pu8Value=((PINB >> Copy_u8PinID) & 1);
    22b4:	e6 e3       	ldi	r30, 0x36	; 54
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	88 2f       	mov	r24, r24
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	a9 01       	movw	r20, r18
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <DIO_enuGetPinVal+0xb2>
    22c8:	55 95       	asr	r21
    22ca:	47 95       	ror	r20
    22cc:	8a 95       	dec	r24
    22ce:	e2 f7       	brpl	.-8      	; 0x22c8 <DIO_enuGetPinVal+0xae>
    22d0:	ca 01       	movw	r24, r20
    22d2:	81 70       	andi	r24, 0x01	; 1
    22d4:	ec 81       	ldd	r30, Y+4	; 0x04
    22d6:	fd 81       	ldd	r31, Y+5	; 0x05
    22d8:	80 83       	st	Z, r24
    22da:	27 c0       	rjmp	.+78     	; 0x232a <DIO_enuGetPinVal+0x110>
					break;

					case DIO_PORTC:
					 *Copy_pu8Value=((PINC >> Copy_u8PinID) & 1);
    22dc:	e3 e3       	ldi	r30, 0x33	; 51
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	88 2f       	mov	r24, r24
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	a9 01       	movw	r20, r18
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <DIO_enuGetPinVal+0xda>
    22f0:	55 95       	asr	r21
    22f2:	47 95       	ror	r20
    22f4:	8a 95       	dec	r24
    22f6:	e2 f7       	brpl	.-8      	; 0x22f0 <DIO_enuGetPinVal+0xd6>
    22f8:	ca 01       	movw	r24, r20
    22fa:	81 70       	andi	r24, 0x01	; 1
    22fc:	ec 81       	ldd	r30, Y+4	; 0x04
    22fe:	fd 81       	ldd	r31, Y+5	; 0x05
    2300:	80 83       	st	Z, r24
    2302:	13 c0       	rjmp	.+38     	; 0x232a <DIO_enuGetPinVal+0x110>
					break;

					case DIO_PORTD:
				    *Copy_pu8Value=((PIND >> Copy_u8PinID) & 1);
    2304:	e0 e3       	ldi	r30, 0x30	; 48
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	28 2f       	mov	r18, r24
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	88 2f       	mov	r24, r24
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	a9 01       	movw	r20, r18
    2316:	02 c0       	rjmp	.+4      	; 0x231c <DIO_enuGetPinVal+0x102>
    2318:	55 95       	asr	r21
    231a:	47 95       	ror	r20
    231c:	8a 95       	dec	r24
    231e:	e2 f7       	brpl	.-8      	; 0x2318 <DIO_enuGetPinVal+0xfe>
    2320:	ca 01       	movw	r24, r20
    2322:	81 70       	andi	r24, 0x01	; 1
    2324:	ec 81       	ldd	r30, Y+4	; 0x04
    2326:	fd 81       	ldd	r31, Y+5	; 0x05
    2328:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorState = ES_OK;
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	05 c0       	rjmp	.+10     	; 0x233a <DIO_enuGetPinVal+0x120>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    2330:	83 e0       	ldi	r24, 0x03	; 3
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	02 c0       	rjmp	.+4      	; 0x233a <DIO_enuGetPinVal+0x120>
			}
	 }
	 else{
		 Local_enuErrorState = ES_NULL_POINTER;
    2336:	82 e0       	ldi	r24, 0x02	; 2
    2338:	89 83       	std	Y+1, r24	; 0x01
	 }
			return Local_enuErrorState;
    233a:	89 81       	ldd	r24, Y+1	; 0x01


}
    233c:	27 96       	adiw	r28, 0x07	; 7
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <DIO_enuTogPinVal>:
ES_t DIO_enuTogPinVal(u8 Copy_u8PortID,u8 Copy_u8PinID){
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	00 d0       	rcall	.+0      	; 0x2354 <DIO_enuTogPinVal+0x6>
    2354:	00 d0       	rcall	.+0      	; 0x2356 <DIO_enuTogPinVal+0x8>
    2356:	0f 92       	push	r0
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	8a 83       	std	Y+2, r24	; 0x02
    235e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2360:	19 82       	std	Y+1, r1	; 0x01

				if(Copy_u8PortID <= DIO_PORTD&&Copy_u8PinID<=DIO_PIN7)
    2362:	8a 81       	ldd	r24, Y+2	; 0x02
    2364:	84 30       	cpi	r24, 0x04	; 4
    2366:	08 f0       	brcs	.+2      	; 0x236a <DIO_enuTogPinVal+0x1c>
    2368:	75 c0       	rjmp	.+234    	; 0x2454 <DIO_enuTogPinVal+0x106>
    236a:	8b 81       	ldd	r24, Y+3	; 0x03
    236c:	88 30       	cpi	r24, 0x08	; 8
    236e:	08 f0       	brcs	.+2      	; 0x2372 <DIO_enuTogPinVal+0x24>
    2370:	71 c0       	rjmp	.+226    	; 0x2454 <DIO_enuTogPinVal+0x106>
				{
					switch(Copy_u8PortID)
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	28 2f       	mov	r18, r24
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	3d 83       	std	Y+5, r19	; 0x05
    237a:	2c 83       	std	Y+4, r18	; 0x04
    237c:	8c 81       	ldd	r24, Y+4	; 0x04
    237e:	9d 81       	ldd	r25, Y+5	; 0x05
    2380:	81 30       	cpi	r24, 0x01	; 1
    2382:	91 05       	cpc	r25, r1
    2384:	49 f1       	breq	.+82     	; 0x23d8 <DIO_enuTogPinVal+0x8a>
    2386:	2c 81       	ldd	r18, Y+4	; 0x04
    2388:	3d 81       	ldd	r19, Y+5	; 0x05
    238a:	22 30       	cpi	r18, 0x02	; 2
    238c:	31 05       	cpc	r19, r1
    238e:	2c f4       	brge	.+10     	; 0x239a <DIO_enuTogPinVal+0x4c>
    2390:	8c 81       	ldd	r24, Y+4	; 0x04
    2392:	9d 81       	ldd	r25, Y+5	; 0x05
    2394:	00 97       	sbiw	r24, 0x00	; 0
    2396:	61 f0       	breq	.+24     	; 0x23b0 <DIO_enuTogPinVal+0x62>
    2398:	5a c0       	rjmp	.+180    	; 0x244e <DIO_enuTogPinVal+0x100>
    239a:	2c 81       	ldd	r18, Y+4	; 0x04
    239c:	3d 81       	ldd	r19, Y+5	; 0x05
    239e:	22 30       	cpi	r18, 0x02	; 2
    23a0:	31 05       	cpc	r19, r1
    23a2:	71 f1       	breq	.+92     	; 0x2400 <DIO_enuTogPinVal+0xb2>
    23a4:	8c 81       	ldd	r24, Y+4	; 0x04
    23a6:	9d 81       	ldd	r25, Y+5	; 0x05
    23a8:	83 30       	cpi	r24, 0x03	; 3
    23aa:	91 05       	cpc	r25, r1
    23ac:	e9 f1       	breq	.+122    	; 0x2428 <DIO_enuTogPinVal+0xda>
    23ae:	4f c0       	rjmp	.+158    	; 0x244e <DIO_enuTogPinVal+0x100>
					{
						case DIO_PORTA:
						 PORTA^=(1 << Copy_u8PinID);
    23b0:	ab e3       	ldi	r26, 0x3B	; 59
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	eb e3       	ldi	r30, 0x3B	; 59
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	48 2f       	mov	r20, r24
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	28 2f       	mov	r18, r24
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	02 2e       	mov	r0, r18
    23c8:	02 c0       	rjmp	.+4      	; 0x23ce <DIO_enuTogPinVal+0x80>
    23ca:	88 0f       	add	r24, r24
    23cc:	99 1f       	adc	r25, r25
    23ce:	0a 94       	dec	r0
    23d0:	e2 f7       	brpl	.-8      	; 0x23ca <DIO_enuTogPinVal+0x7c>
    23d2:	84 27       	eor	r24, r20
    23d4:	8c 93       	st	X, r24
    23d6:	3b c0       	rjmp	.+118    	; 0x244e <DIO_enuTogPinVal+0x100>
						break;

						case DIO_PORTB:
						 PORTB^=(1 << Copy_u8PinID);
    23d8:	a8 e3       	ldi	r26, 0x38	; 56
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	e8 e3       	ldi	r30, 0x38	; 56
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	48 2f       	mov	r20, r24
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	28 2f       	mov	r18, r24
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	02 2e       	mov	r0, r18
    23f0:	02 c0       	rjmp	.+4      	; 0x23f6 <DIO_enuTogPinVal+0xa8>
    23f2:	88 0f       	add	r24, r24
    23f4:	99 1f       	adc	r25, r25
    23f6:	0a 94       	dec	r0
    23f8:	e2 f7       	brpl	.-8      	; 0x23f2 <DIO_enuTogPinVal+0xa4>
    23fa:	84 27       	eor	r24, r20
    23fc:	8c 93       	st	X, r24
    23fe:	27 c0       	rjmp	.+78     	; 0x244e <DIO_enuTogPinVal+0x100>
						break;

						case DIO_PORTC:
						 PORTC^=(1 << Copy_u8PinID);
    2400:	a5 e3       	ldi	r26, 0x35	; 53
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	e5 e3       	ldi	r30, 0x35	; 53
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 81       	ld	r24, Z
    240a:	48 2f       	mov	r20, r24
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	28 2f       	mov	r18, r24
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	02 2e       	mov	r0, r18
    2418:	02 c0       	rjmp	.+4      	; 0x241e <DIO_enuTogPinVal+0xd0>
    241a:	88 0f       	add	r24, r24
    241c:	99 1f       	adc	r25, r25
    241e:	0a 94       	dec	r0
    2420:	e2 f7       	brpl	.-8      	; 0x241a <DIO_enuTogPinVal+0xcc>
    2422:	84 27       	eor	r24, r20
    2424:	8c 93       	st	X, r24
    2426:	13 c0       	rjmp	.+38     	; 0x244e <DIO_enuTogPinVal+0x100>
						break;

						case DIO_PORTD:
						 PORTD^=(1 << Copy_u8PinID);
    2428:	a2 e3       	ldi	r26, 0x32	; 50
    242a:	b0 e0       	ldi	r27, 0x00	; 0
    242c:	e2 e3       	ldi	r30, 0x32	; 50
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	80 81       	ld	r24, Z
    2432:	48 2f       	mov	r20, r24
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	28 2f       	mov	r18, r24
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	02 2e       	mov	r0, r18
    2440:	02 c0       	rjmp	.+4      	; 0x2446 <DIO_enuTogPinVal+0xf8>
    2442:	88 0f       	add	r24, r24
    2444:	99 1f       	adc	r25, r25
    2446:	0a 94       	dec	r0
    2448:	e2 f7       	brpl	.-8      	; 0x2442 <DIO_enuTogPinVal+0xf4>
    244a:	84 27       	eor	r24, r20
    244c:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorState = ES_OK;
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	89 83       	std	Y+1, r24	; 0x01
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <DIO_enuTogPinVal+0x10a>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
    2454:	83 e0       	ldi	r24, 0x03	; 3
    2456:	89 83       	std	Y+1, r24	; 0x01
				}

				return Local_enuErrorState;
    2458:	89 81       	ldd	r24, Y+1	; 0x01

	}
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	08 95       	ret

0000246a <LED_enuInit>:
#include "LED_config.h"
#include "LED_priv.h"


ES_t LED_enuInit(LED_t * Copy_pstrLedConfig)
{
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	00 d0       	rcall	.+0      	; 0x2470 <LED_enuInit+0x6>
    2470:	00 d0       	rcall	.+0      	; 0x2472 <LED_enuInit+0x8>
    2472:	0f 92       	push	r0
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
    2478:	9c 83       	std	Y+4, r25	; 0x04
    247a:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    247c:	1a 82       	std	Y+2, r1	; 0x02

	if (Copy_pstrLedConfig != NULL)
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	9c 81       	ldd	r25, Y+4	; 0x04
    2482:	00 97       	sbiw	r24, 0x00	; 0
    2484:	09 f4       	brne	.+2      	; 0x2488 <LED_enuInit+0x1e>
    2486:	24 c1       	rjmp	.+584    	; 0x26d0 <LED_enuInit+0x266>
	{
		u8 Local_enuIterator=0;
    2488:	19 82       	std	Y+1, r1	; 0x01
		for (Local_enuIterator=0; Local_enuIterator < LED_NUM ; Local_enuIterator++)
    248a:	19 82       	std	Y+1, r1	; 0x01
    248c:	1c c1       	rjmp	.+568    	; 0x26c6 <LED_enuInit+0x25c>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8OUTPUT );
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	88 2f       	mov	r24, r24
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	9c 01       	movw	r18, r24
    2496:	22 0f       	add	r18, r18
    2498:	33 1f       	adc	r19, r19
    249a:	22 0f       	add	r18, r18
    249c:	33 1f       	adc	r19, r19
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	9c 81       	ldd	r25, Y+4	; 0x04
    24a2:	fc 01       	movw	r30, r24
    24a4:	e2 0f       	add	r30, r18
    24a6:	f3 1f       	adc	r31, r19
    24a8:	40 81       	ld	r20, Z
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	88 2f       	mov	r24, r24
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	9c 01       	movw	r18, r24
    24b2:	22 0f       	add	r18, r18
    24b4:	33 1f       	adc	r19, r19
    24b6:	22 0f       	add	r18, r18
    24b8:	33 1f       	adc	r19, r19
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	9c 81       	ldd	r25, Y+4	; 0x04
    24be:	fc 01       	movw	r30, r24
    24c0:	e2 0f       	add	r30, r18
    24c2:	f3 1f       	adc	r31, r19
    24c4:	91 81       	ldd	r25, Z+1	; 0x01
    24c6:	84 2f       	mov	r24, r20
    24c8:	69 2f       	mov	r22, r25
    24ca:	41 e0       	ldi	r20, 0x01	; 1
    24cc:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <DIO_enuSetPinDirection>
    24d0:	8a 83       	std	Y+2, r24	; 0x02
			if (Copy_pstrLedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	88 2f       	mov	r24, r24
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	9c 01       	movw	r18, r24
    24da:	22 0f       	add	r18, r18
    24dc:	33 1f       	adc	r19, r19
    24de:	22 0f       	add	r18, r18
    24e0:	33 1f       	adc	r19, r19
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	9c 81       	ldd	r25, Y+4	; 0x04
    24e6:	fc 01       	movw	r30, r24
    24e8:	e2 0f       	add	r30, r18
    24ea:	f3 1f       	adc	r31, r19
    24ec:	82 81       	ldd	r24, Z+2	; 0x02
    24ee:	82 30       	cpi	r24, 0x02	; 2
    24f0:	09 f0       	breq	.+2      	; 0x24f4 <LED_enuInit+0x8a>
    24f2:	69 c0       	rjmp	.+210    	; 0x25c6 <LED_enuInit+0x15c>
			{
				if (Copy_pstrLedConfig[Local_enuIterator].LED_u8Status == LED_ON)
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	88 2f       	mov	r24, r24
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	9c 01       	movw	r18, r24
    24fc:	22 0f       	add	r18, r18
    24fe:	33 1f       	adc	r19, r19
    2500:	22 0f       	add	r18, r18
    2502:	33 1f       	adc	r19, r19
    2504:	8b 81       	ldd	r24, Y+3	; 0x03
    2506:	9c 81       	ldd	r25, Y+4	; 0x04
    2508:	fc 01       	movw	r30, r24
    250a:	e2 0f       	add	r30, r18
    250c:	f3 1f       	adc	r31, r19
    250e:	83 81       	ldd	r24, Z+3	; 0x03
    2510:	81 30       	cpi	r24, 0x01	; 1
    2512:	19 f5       	brne	.+70     	; 0x255a <LED_enuInit+0xf0>
				{
					Local_enuErrorState =DIO_enuSetPinVal(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8LOW);
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	88 2f       	mov	r24, r24
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	9c 01       	movw	r18, r24
    251c:	22 0f       	add	r18, r18
    251e:	33 1f       	adc	r19, r19
    2520:	22 0f       	add	r18, r18
    2522:	33 1f       	adc	r19, r19
    2524:	8b 81       	ldd	r24, Y+3	; 0x03
    2526:	9c 81       	ldd	r25, Y+4	; 0x04
    2528:	fc 01       	movw	r30, r24
    252a:	e2 0f       	add	r30, r18
    252c:	f3 1f       	adc	r31, r19
    252e:	40 81       	ld	r20, Z
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	88 2f       	mov	r24, r24
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	9c 01       	movw	r18, r24
    2538:	22 0f       	add	r18, r18
    253a:	33 1f       	adc	r19, r19
    253c:	22 0f       	add	r18, r18
    253e:	33 1f       	adc	r19, r19
    2540:	8b 81       	ldd	r24, Y+3	; 0x03
    2542:	9c 81       	ldd	r25, Y+4	; 0x04
    2544:	fc 01       	movw	r30, r24
    2546:	e2 0f       	add	r30, r18
    2548:	f3 1f       	adc	r31, r19
    254a:	91 81       	ldd	r25, Z+1	; 0x01
    254c:	84 2f       	mov	r24, r20
    254e:	69 2f       	mov	r22, r25
    2550:	40 e0       	ldi	r20, 0x00	; 0
    2552:	0e 94 21 10 	call	0x2042	; 0x2042 <DIO_enuSetPinVal>
    2556:	8a 83       	std	Y+2, r24	; 0x02
    2558:	b3 c0       	rjmp	.+358    	; 0x26c0 <LED_enuInit+0x256>
				}
				else if(Copy_pstrLedConfig[Local_enuIterator].LED_u8Status == LED_OFF)
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	88 2f       	mov	r24, r24
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	9c 01       	movw	r18, r24
    2562:	22 0f       	add	r18, r18
    2564:	33 1f       	adc	r19, r19
    2566:	22 0f       	add	r18, r18
    2568:	33 1f       	adc	r19, r19
    256a:	8b 81       	ldd	r24, Y+3	; 0x03
    256c:	9c 81       	ldd	r25, Y+4	; 0x04
    256e:	fc 01       	movw	r30, r24
    2570:	e2 0f       	add	r30, r18
    2572:	f3 1f       	adc	r31, r19
    2574:	83 81       	ldd	r24, Z+3	; 0x03
    2576:	88 23       	and	r24, r24
    2578:	19 f5       	brne	.+70     	; 0x25c0 <LED_enuInit+0x156>
				{
					Local_enuErrorState =DIO_enuSetPinVal(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8HIGH);
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	88 2f       	mov	r24, r24
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	9c 01       	movw	r18, r24
    2582:	22 0f       	add	r18, r18
    2584:	33 1f       	adc	r19, r19
    2586:	22 0f       	add	r18, r18
    2588:	33 1f       	adc	r19, r19
    258a:	8b 81       	ldd	r24, Y+3	; 0x03
    258c:	9c 81       	ldd	r25, Y+4	; 0x04
    258e:	fc 01       	movw	r30, r24
    2590:	e2 0f       	add	r30, r18
    2592:	f3 1f       	adc	r31, r19
    2594:	40 81       	ld	r20, Z
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	88 2f       	mov	r24, r24
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	9c 01       	movw	r18, r24
    259e:	22 0f       	add	r18, r18
    25a0:	33 1f       	adc	r19, r19
    25a2:	22 0f       	add	r18, r18
    25a4:	33 1f       	adc	r19, r19
    25a6:	8b 81       	ldd	r24, Y+3	; 0x03
    25a8:	9c 81       	ldd	r25, Y+4	; 0x04
    25aa:	fc 01       	movw	r30, r24
    25ac:	e2 0f       	add	r30, r18
    25ae:	f3 1f       	adc	r31, r19
    25b0:	91 81       	ldd	r25, Z+1	; 0x01
    25b2:	84 2f       	mov	r24, r20
    25b4:	69 2f       	mov	r22, r25
    25b6:	41 e0       	ldi	r20, 0x01	; 1
    25b8:	0e 94 21 10 	call	0x2042	; 0x2042 <DIO_enuSetPinVal>
    25bc:	8a 83       	std	Y+2, r24	; 0x02
    25be:	80 c0       	rjmp	.+256    	; 0x26c0 <LED_enuInit+0x256>
				}
				else
				{
					return ES_OUT_OF_RANGE;
    25c0:	83 e0       	ldi	r24, 0x03	; 3
    25c2:	8d 83       	std	Y+5, r24	; 0x05
    25c4:	89 c0       	rjmp	.+274    	; 0x26d8 <LED_enuInit+0x26e>
				}
			}
			else if (Copy_pstrLedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	88 2f       	mov	r24, r24
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	9c 01       	movw	r18, r24
    25ce:	22 0f       	add	r18, r18
    25d0:	33 1f       	adc	r19, r19
    25d2:	22 0f       	add	r18, r18
    25d4:	33 1f       	adc	r19, r19
    25d6:	8b 81       	ldd	r24, Y+3	; 0x03
    25d8:	9c 81       	ldd	r25, Y+4	; 0x04
    25da:	fc 01       	movw	r30, r24
    25dc:	e2 0f       	add	r30, r18
    25de:	f3 1f       	adc	r31, r19
    25e0:	82 81       	ldd	r24, Z+2	; 0x02
    25e2:	83 30       	cpi	r24, 0x03	; 3
    25e4:	09 f0       	breq	.+2      	; 0x25e8 <LED_enuInit+0x17e>
    25e6:	69 c0       	rjmp	.+210    	; 0x26ba <LED_enuInit+0x250>
			{
				if (Copy_pstrLedConfig[Local_enuIterator].LED_u8Status == LED_ON)
    25e8:	89 81       	ldd	r24, Y+1	; 0x01
    25ea:	88 2f       	mov	r24, r24
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	9c 01       	movw	r18, r24
    25f0:	22 0f       	add	r18, r18
    25f2:	33 1f       	adc	r19, r19
    25f4:	22 0f       	add	r18, r18
    25f6:	33 1f       	adc	r19, r19
    25f8:	8b 81       	ldd	r24, Y+3	; 0x03
    25fa:	9c 81       	ldd	r25, Y+4	; 0x04
    25fc:	fc 01       	movw	r30, r24
    25fe:	e2 0f       	add	r30, r18
    2600:	f3 1f       	adc	r31, r19
    2602:	83 81       	ldd	r24, Z+3	; 0x03
    2604:	81 30       	cpi	r24, 0x01	; 1
    2606:	19 f5       	brne	.+70     	; 0x264e <LED_enuInit+0x1e4>
				{
					Local_enuErrorState =DIO_enuSetPinVal(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8HIGH);
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	88 2f       	mov	r24, r24
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	9c 01       	movw	r18, r24
    2610:	22 0f       	add	r18, r18
    2612:	33 1f       	adc	r19, r19
    2614:	22 0f       	add	r18, r18
    2616:	33 1f       	adc	r19, r19
    2618:	8b 81       	ldd	r24, Y+3	; 0x03
    261a:	9c 81       	ldd	r25, Y+4	; 0x04
    261c:	fc 01       	movw	r30, r24
    261e:	e2 0f       	add	r30, r18
    2620:	f3 1f       	adc	r31, r19
    2622:	40 81       	ld	r20, Z
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	88 2f       	mov	r24, r24
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	9c 01       	movw	r18, r24
    262c:	22 0f       	add	r18, r18
    262e:	33 1f       	adc	r19, r19
    2630:	22 0f       	add	r18, r18
    2632:	33 1f       	adc	r19, r19
    2634:	8b 81       	ldd	r24, Y+3	; 0x03
    2636:	9c 81       	ldd	r25, Y+4	; 0x04
    2638:	fc 01       	movw	r30, r24
    263a:	e2 0f       	add	r30, r18
    263c:	f3 1f       	adc	r31, r19
    263e:	91 81       	ldd	r25, Z+1	; 0x01
    2640:	84 2f       	mov	r24, r20
    2642:	69 2f       	mov	r22, r25
    2644:	41 e0       	ldi	r20, 0x01	; 1
    2646:	0e 94 21 10 	call	0x2042	; 0x2042 <DIO_enuSetPinVal>
    264a:	8a 83       	std	Y+2, r24	; 0x02
    264c:	39 c0       	rjmp	.+114    	; 0x26c0 <LED_enuInit+0x256>
				}
				else if(Copy_pstrLedConfig[Local_enuIterator].LED_u8Status == LED_OFF)
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	88 2f       	mov	r24, r24
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	9c 01       	movw	r18, r24
    2656:	22 0f       	add	r18, r18
    2658:	33 1f       	adc	r19, r19
    265a:	22 0f       	add	r18, r18
    265c:	33 1f       	adc	r19, r19
    265e:	8b 81       	ldd	r24, Y+3	; 0x03
    2660:	9c 81       	ldd	r25, Y+4	; 0x04
    2662:	fc 01       	movw	r30, r24
    2664:	e2 0f       	add	r30, r18
    2666:	f3 1f       	adc	r31, r19
    2668:	83 81       	ldd	r24, Z+3	; 0x03
    266a:	88 23       	and	r24, r24
    266c:	19 f5       	brne	.+70     	; 0x26b4 <LED_enuInit+0x24a>
				{
					Local_enuErrorState =DIO_enuSetPinVal(Copy_pstrLedConfig[Local_enuIterator].LED_u8PortID , Copy_pstrLedConfig[Local_enuIterator].LED_u8PinID , DIO_u8LOW);
    266e:	89 81       	ldd	r24, Y+1	; 0x01
    2670:	88 2f       	mov	r24, r24
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	9c 01       	movw	r18, r24
    2676:	22 0f       	add	r18, r18
    2678:	33 1f       	adc	r19, r19
    267a:	22 0f       	add	r18, r18
    267c:	33 1f       	adc	r19, r19
    267e:	8b 81       	ldd	r24, Y+3	; 0x03
    2680:	9c 81       	ldd	r25, Y+4	; 0x04
    2682:	fc 01       	movw	r30, r24
    2684:	e2 0f       	add	r30, r18
    2686:	f3 1f       	adc	r31, r19
    2688:	40 81       	ld	r20, Z
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	88 2f       	mov	r24, r24
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	9c 01       	movw	r18, r24
    2692:	22 0f       	add	r18, r18
    2694:	33 1f       	adc	r19, r19
    2696:	22 0f       	add	r18, r18
    2698:	33 1f       	adc	r19, r19
    269a:	8b 81       	ldd	r24, Y+3	; 0x03
    269c:	9c 81       	ldd	r25, Y+4	; 0x04
    269e:	fc 01       	movw	r30, r24
    26a0:	e2 0f       	add	r30, r18
    26a2:	f3 1f       	adc	r31, r19
    26a4:	91 81       	ldd	r25, Z+1	; 0x01
    26a6:	84 2f       	mov	r24, r20
    26a8:	69 2f       	mov	r22, r25
    26aa:	40 e0       	ldi	r20, 0x00	; 0
    26ac:	0e 94 21 10 	call	0x2042	; 0x2042 <DIO_enuSetPinVal>
    26b0:	8a 83       	std	Y+2, r24	; 0x02
    26b2:	06 c0       	rjmp	.+12     	; 0x26c0 <LED_enuInit+0x256>
				}
				else
				{
					return ES_OUT_OF_RANGE;
    26b4:	83 e0       	ldi	r24, 0x03	; 3
    26b6:	8d 83       	std	Y+5, r24	; 0x05
    26b8:	0f c0       	rjmp	.+30     	; 0x26d8 <LED_enuInit+0x26e>
				}
			}
			else
			{
				return ES_OUT_OF_RANGE;
    26ba:	83 e0       	ldi	r24, 0x03	; 3
    26bc:	8d 83       	std	Y+5, r24	; 0x05
    26be:	0c c0       	rjmp	.+24     	; 0x26d8 <LED_enuInit+0x26e>
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_pstrLedConfig != NULL)
	{
		u8 Local_enuIterator=0;
		for (Local_enuIterator=0; Local_enuIterator < LED_NUM ; Local_enuIterator++)
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	8f 5f       	subi	r24, 0xFF	; 255
    26c4:	89 83       	std	Y+1, r24	; 0x01
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	86 30       	cpi	r24, 0x06	; 6
    26ca:	08 f4       	brcc	.+2      	; 0x26ce <LED_enuInit+0x264>
    26cc:	e0 ce       	rjmp	.-576    	; 0x248e <LED_enuInit+0x24>
    26ce:	02 c0       	rjmp	.+4      	; 0x26d4 <LED_enuInit+0x26a>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    26d0:	82 e0       	ldi	r24, 0x02	; 2
    26d2:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    26d4:	8a 81       	ldd	r24, Y+2	; 0x02
    26d6:	8d 83       	std	Y+5, r24	; 0x05
    26d8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    26da:	0f 90       	pop	r0
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	cf 91       	pop	r28
    26e6:	df 91       	pop	r29
    26e8:	08 95       	ret

000026ea <LED_enuTurnON>:

ES_t LED_enuTurnON(LED_t * Copy_pstrLedID)
{
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	00 d0       	rcall	.+0      	; 0x26f0 <LED_enuTurnON+0x6>
    26f0:	0f 92       	push	r0
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	9b 83       	std	Y+3, r25	; 0x03
    26f8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    26fa:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pstrLedID != NULL)
    26fc:	8a 81       	ldd	r24, Y+2	; 0x02
    26fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2700:	00 97       	sbiw	r24, 0x00	; 0
    2702:	29 f1       	breq	.+74     	; 0x274e <LED_enuTurnON+0x64>
	{
		if (Copy_pstrLedID->LED_u8Connection == LED_SINK )
    2704:	ea 81       	ldd	r30, Y+2	; 0x02
    2706:	fb 81       	ldd	r31, Y+3	; 0x03
    2708:	82 81       	ldd	r24, Z+2	; 0x02
    270a:	82 30       	cpi	r24, 0x02	; 2
    270c:	61 f4       	brne	.+24     	; 0x2726 <LED_enuTurnON+0x3c>
		{
			Local_enuErrorState=DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID,DIO_u8LOW);
    270e:	ea 81       	ldd	r30, Y+2	; 0x02
    2710:	fb 81       	ldd	r31, Y+3	; 0x03
    2712:	80 81       	ld	r24, Z
    2714:	ea 81       	ldd	r30, Y+2	; 0x02
    2716:	fb 81       	ldd	r31, Y+3	; 0x03
    2718:	91 81       	ldd	r25, Z+1	; 0x01
    271a:	69 2f       	mov	r22, r25
    271c:	40 e0       	ldi	r20, 0x00	; 0
    271e:	0e 94 21 10 	call	0x2042	; 0x2042 <DIO_enuSetPinVal>
    2722:	89 83       	std	Y+1, r24	; 0x01
    2724:	16 c0       	rjmp	.+44     	; 0x2752 <LED_enuTurnON+0x68>
		}
		else if (Copy_pstrLedID->LED_u8Connection == LED_SOURCE)
    2726:	ea 81       	ldd	r30, Y+2	; 0x02
    2728:	fb 81       	ldd	r31, Y+3	; 0x03
    272a:	82 81       	ldd	r24, Z+2	; 0x02
    272c:	83 30       	cpi	r24, 0x03	; 3
    272e:	61 f4       	brne	.+24     	; 0x2748 <LED_enuTurnON+0x5e>
		{
			Local_enuErrorState=DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID,DIO_u8HIGH);
    2730:	ea 81       	ldd	r30, Y+2	; 0x02
    2732:	fb 81       	ldd	r31, Y+3	; 0x03
    2734:	80 81       	ld	r24, Z
    2736:	ea 81       	ldd	r30, Y+2	; 0x02
    2738:	fb 81       	ldd	r31, Y+3	; 0x03
    273a:	91 81       	ldd	r25, Z+1	; 0x01
    273c:	69 2f       	mov	r22, r25
    273e:	41 e0       	ldi	r20, 0x01	; 1
    2740:	0e 94 21 10 	call	0x2042	; 0x2042 <DIO_enuSetPinVal>
    2744:	89 83       	std	Y+1, r24	; 0x01
    2746:	05 c0       	rjmp	.+10     	; 0x2752 <LED_enuTurnON+0x68>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    2748:	83 e0       	ldi	r24, 0x03	; 3
    274a:	89 83       	std	Y+1, r24	; 0x01
    274c:	02 c0       	rjmp	.+4      	; 0x2752 <LED_enuTurnON+0x68>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    274e:	82 e0       	ldi	r24, 0x02	; 2
    2750:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2752:	89 81       	ldd	r24, Y+1	; 0x01
}
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	cf 91       	pop	r28
    275c:	df 91       	pop	r29
    275e:	08 95       	ret

00002760 <LED_enuTurnOFF>:

ES_t LED_enuTurnOFF(LED_t * Copy_pstrLedID)
{
    2760:	df 93       	push	r29
    2762:	cf 93       	push	r28
    2764:	00 d0       	rcall	.+0      	; 0x2766 <LED_enuTurnOFF+0x6>
    2766:	0f 92       	push	r0
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	9b 83       	std	Y+3, r25	; 0x03
    276e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2770:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pstrLedID != NULL)
    2772:	8a 81       	ldd	r24, Y+2	; 0x02
    2774:	9b 81       	ldd	r25, Y+3	; 0x03
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	29 f1       	breq	.+74     	; 0x27c4 <LED_enuTurnOFF+0x64>
	{
		if (Copy_pstrLedID->LED_u8Connection == LED_SINK )
    277a:	ea 81       	ldd	r30, Y+2	; 0x02
    277c:	fb 81       	ldd	r31, Y+3	; 0x03
    277e:	82 81       	ldd	r24, Z+2	; 0x02
    2780:	82 30       	cpi	r24, 0x02	; 2
    2782:	61 f4       	brne	.+24     	; 0x279c <LED_enuTurnOFF+0x3c>
		{
			Local_enuErrorState=DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID,DIO_u8HIGH);
    2784:	ea 81       	ldd	r30, Y+2	; 0x02
    2786:	fb 81       	ldd	r31, Y+3	; 0x03
    2788:	80 81       	ld	r24, Z
    278a:	ea 81       	ldd	r30, Y+2	; 0x02
    278c:	fb 81       	ldd	r31, Y+3	; 0x03
    278e:	91 81       	ldd	r25, Z+1	; 0x01
    2790:	69 2f       	mov	r22, r25
    2792:	41 e0       	ldi	r20, 0x01	; 1
    2794:	0e 94 21 10 	call	0x2042	; 0x2042 <DIO_enuSetPinVal>
    2798:	89 83       	std	Y+1, r24	; 0x01
    279a:	16 c0       	rjmp	.+44     	; 0x27c8 <LED_enuTurnOFF+0x68>
		}
		else if (Copy_pstrLedID->LED_u8Connection == LED_SOURCE)
    279c:	ea 81       	ldd	r30, Y+2	; 0x02
    279e:	fb 81       	ldd	r31, Y+3	; 0x03
    27a0:	82 81       	ldd	r24, Z+2	; 0x02
    27a2:	83 30       	cpi	r24, 0x03	; 3
    27a4:	61 f4       	brne	.+24     	; 0x27be <LED_enuTurnOFF+0x5e>
		{
			Local_enuErrorState=DIO_enuSetPinVal(Copy_pstrLedID->LED_u8PortID, Copy_pstrLedID->LED_u8PinID,DIO_u8LOW);
    27a6:	ea 81       	ldd	r30, Y+2	; 0x02
    27a8:	fb 81       	ldd	r31, Y+3	; 0x03
    27aa:	80 81       	ld	r24, Z
    27ac:	ea 81       	ldd	r30, Y+2	; 0x02
    27ae:	fb 81       	ldd	r31, Y+3	; 0x03
    27b0:	91 81       	ldd	r25, Z+1	; 0x01
    27b2:	69 2f       	mov	r22, r25
    27b4:	40 e0       	ldi	r20, 0x00	; 0
    27b6:	0e 94 21 10 	call	0x2042	; 0x2042 <DIO_enuSetPinVal>
    27ba:	89 83       	std	Y+1, r24	; 0x01
    27bc:	05 c0       	rjmp	.+10     	; 0x27c8 <LED_enuTurnOFF+0x68>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    27be:	83 e0       	ldi	r24, 0x03	; 3
    27c0:	89 83       	std	Y+1, r24	; 0x01
    27c2:	02 c0       	rjmp	.+4      	; 0x27c8 <LED_enuTurnOFF+0x68>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    27c4:	82 e0       	ldi	r24, 0x02	; 2
    27c6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	cf 91       	pop	r28
    27d2:	df 91       	pop	r29
    27d4:	08 95       	ret

000027d6 <main>:

#include "../LED/LED_config.h"
#include "../LED/LED_int.h"
#include <util/delay.h>
extern LED_t LED_AstrLedConfig [LED_NUM];
void main(void){
    27d6:	df 93       	push	r29
    27d8:	cf 93       	push	r28
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62

	DIO_enuInit();
    27de:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <DIO_enuInit>
	TIMER0_enuInit();
    27e2:	0e 94 e7 06 	call	0xdce	; 0xdce <TIMER0_enuInit>
	LED_enuInit( LED_AstrLedConfig);
    27e6:	8e e6       	ldi	r24, 0x6E	; 110
    27e8:	91 e0       	ldi	r25, 0x01	; 1
    27ea:	0e 94 35 12 	call	0x246a	; 0x246a <LED_enuInit>
	DIO_enuSetPinDirection(DIO_u8PIN2,DIO_u8PORTA,DIO_u8OUTPUT);
    27ee:	82 e0       	ldi	r24, 0x02	; 2
    27f0:	60 e0       	ldi	r22, 0x00	; 0
    27f2:	41 e0       	ldi	r20, 0x01	; 1
    27f4:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8PIN2,DIO_u8PORTA,DIO_u8OUTPUT);
    27f8:	82 e0       	ldi	r24, 0x02	; 2
    27fa:	60 e0       	ldi	r22, 0x00	; 0
    27fc:	41 e0       	ldi	r20, 0x01	; 1
    27fe:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <DIO_enuSetPinDirection>
	LED_enuInit(LED_AstrLedConfig);
    2802:	8e e6       	ldi	r24, 0x6E	; 110
    2804:	91 e0       	ldi	r25, 0x01	; 1
    2806:	0e 94 35 12 	call	0x246a	; 0x246a <LED_enuInit>
	while(1){

		LED_enuTurnON(&LED_AstrLedConfig[2]);
    280a:	86 e7       	ldi	r24, 0x76	; 118
    280c:	91 e0       	ldi	r25, 0x01	; 1
    280e:	0e 94 75 13 	call	0x26ea	; 0x26ea <LED_enuTurnON>
		TIMER0_enuSetsyncDelay(1000);
    2812:	68 ee       	ldi	r22, 0xE8	; 232
    2814:	73 e0       	ldi	r23, 0x03	; 3
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	0e 94 2b 08 	call	0x1056	; 0x1056 <TIMER0_enuSetsyncDelay>

	LED_enuTurnOFF(&LED_AstrLedConfig[2]);
    281e:	86 e7       	ldi	r24, 0x76	; 118
    2820:	91 e0       	ldi	r25, 0x01	; 1
    2822:	0e 94 b0 13 	call	0x2760	; 0x2760 <LED_enuTurnOFF>
	 TIMER0_enuSetsyncDelay(1000);
    2826:	68 ee       	ldi	r22, 0xE8	; 232
    2828:	73 e0       	ldi	r23, 0x03	; 3
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	0e 94 2b 08 	call	0x1056	; 0x1056 <TIMER0_enuSetsyncDelay>
    2832:	eb cf       	rjmp	.-42     	; 0x280a <main+0x34>

00002834 <__prologue_saves__>:
    2834:	2f 92       	push	r2
    2836:	3f 92       	push	r3
    2838:	4f 92       	push	r4
    283a:	5f 92       	push	r5
    283c:	6f 92       	push	r6
    283e:	7f 92       	push	r7
    2840:	8f 92       	push	r8
    2842:	9f 92       	push	r9
    2844:	af 92       	push	r10
    2846:	bf 92       	push	r11
    2848:	cf 92       	push	r12
    284a:	df 92       	push	r13
    284c:	ef 92       	push	r14
    284e:	ff 92       	push	r15
    2850:	0f 93       	push	r16
    2852:	1f 93       	push	r17
    2854:	cf 93       	push	r28
    2856:	df 93       	push	r29
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	ca 1b       	sub	r28, r26
    285e:	db 0b       	sbc	r29, r27
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	f8 94       	cli
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	cd bf       	out	0x3d, r28	; 61
    286a:	09 94       	ijmp

0000286c <__epilogue_restores__>:
    286c:	2a 88       	ldd	r2, Y+18	; 0x12
    286e:	39 88       	ldd	r3, Y+17	; 0x11
    2870:	48 88       	ldd	r4, Y+16	; 0x10
    2872:	5f 84       	ldd	r5, Y+15	; 0x0f
    2874:	6e 84       	ldd	r6, Y+14	; 0x0e
    2876:	7d 84       	ldd	r7, Y+13	; 0x0d
    2878:	8c 84       	ldd	r8, Y+12	; 0x0c
    287a:	9b 84       	ldd	r9, Y+11	; 0x0b
    287c:	aa 84       	ldd	r10, Y+10	; 0x0a
    287e:	b9 84       	ldd	r11, Y+9	; 0x09
    2880:	c8 84       	ldd	r12, Y+8	; 0x08
    2882:	df 80       	ldd	r13, Y+7	; 0x07
    2884:	ee 80       	ldd	r14, Y+6	; 0x06
    2886:	fd 80       	ldd	r15, Y+5	; 0x05
    2888:	0c 81       	ldd	r16, Y+4	; 0x04
    288a:	1b 81       	ldd	r17, Y+3	; 0x03
    288c:	aa 81       	ldd	r26, Y+2	; 0x02
    288e:	b9 81       	ldd	r27, Y+1	; 0x01
    2890:	ce 0f       	add	r28, r30
    2892:	d1 1d       	adc	r29, r1
    2894:	0f b6       	in	r0, 0x3f	; 63
    2896:	f8 94       	cli
    2898:	de bf       	out	0x3e, r29	; 62
    289a:	0f be       	out	0x3f, r0	; 63
    289c:	cd bf       	out	0x3d, r28	; 61
    289e:	ed 01       	movw	r28, r26
    28a0:	08 95       	ret

000028a2 <_exit>:
    28a2:	f8 94       	cli

000028a4 <__stop_program>:
    28a4:	ff cf       	rjmp	.-2      	; 0x28a4 <__stop_program>
